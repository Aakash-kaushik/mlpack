<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="bug" kind="page">
    <compoundname>bug</compoundname>
    <title>Bug List</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><variablelist>
<varlistentry><term>Class <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref>  </term></varlistentry>
<listitem><para><anchor id="bug_1_bug000001"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a36713e2f7157727157af4a92f1c2ad5d" kindref="member">PARAM_COL_IN</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000018"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1ad390258cf9c175da3c77ac7e63359417" kindref="member">PARAM_COL_IN_REQ</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000019"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a07120f558c6c681b2a27a719a7c39bd2" kindref="member">PARAM_COL_OUT</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000023"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a14e7059294c684b01128819daea241d4" kindref="member">PARAM_DOUBLE_IN</ref>  (ID, DESC, ALIAS, DEF)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000005"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a1236858e19f2e8be7da663d4aecfac9f" kindref="member">PARAM_DOUBLE_IN_REQ</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000031"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1aa39a5fa65308f2d5581c01cfae5f9203" kindref="member">PARAM_DOUBLE_OUT</ref>  (ID, DESC)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000006"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a59a38dfe16c56a278bd89817216a3739" kindref="member">PARAM_FLAG</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000002"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a627025f18abd2735345f03fd733ccd9b" kindref="member">PARAM_INT_IN</ref>  (ID, DESC, ALIAS, DEF)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000003"/> Use a forward declaration of the class. The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information. </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a59102e55c5d69d23909a75bd6093f816" kindref="member">PARAM_INT_IN_REQ</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000030"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a50b8bfabec3f0b64fb6e15837da50aa0" kindref="member">PARAM_INT_OUT</ref>  (ID, DESC)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000004"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a49e6517671e6c8173dd3570de950363b" kindref="member">PARAM_MATRIX_IN</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000009"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a20dc72054c6568f040bdc8a5512acacb" kindref="member">PARAM_MATRIX_IN_REQ</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000010"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a20f436f371a7613b532ae3a4c0416b30" kindref="member">PARAM_MATRIX_OUT</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000011"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a503427b6b8cca3f0948487006e7f11b4" kindref="member">PARAM_ROW_IN</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000020"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a9beb54447b7992ecff903397abb60f73" kindref="member">PARAM_ROW_OUT</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000024"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a9514ae93b51ba592bc3299da8326bb80" kindref="member">PARAM_STRING_IN</ref>  (ID, DESC, ALIAS, DEF)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000007"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a39f209691f1ca8c649a40cb22cea5408" kindref="member">PARAM_STRING_IN_REQ</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000032"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a94d8f8edc103da0e05f04fce245e8a93" kindref="member">PARAM_STRING_OUT</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000008"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a237697d0b35e7e6484e8ce52c0ed00c9" kindref="member">PARAM_TMATRIX_IN</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000012"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a580cb0e5b1c587a4bc5b7211aa2c414b" kindref="member">PARAM_TMATRIX_IN_REQ</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000013"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a76754d246b86d1b159270e4794c25019" kindref="member">PARAM_TMATRIX_OUT</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000014"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a55c356a0f2cc3df7122b3f033033538e" kindref="member">PARAM_UCOL_IN</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000021"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1ac8b7f343ae79cb1ec43a0d2eb791090d" kindref="member">PARAM_UCOL_OUT</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000025"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a0db58e2b5c75754d200638093b9cc40f" kindref="member">PARAM_UMATRIX_IN</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000015"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1aaf334355d68e6667f4e50e071eee4d63" kindref="member">PARAM_UMATRIX_IN_REQ</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000016"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a145abfa58262c15f01139092ececc571" kindref="member">PARAM_UMATRIX_OUT</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000017"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a311a7e2ebd5c3c73bb58206337e1da5d" kindref="member">PARAM_UROW_IN</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000022"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a0027b7ba5f161851bf91b167c8891058" kindref="member">PARAM_UROW_OUT</ref>  (ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000026"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a8431e7deab47987cfdb2ae3f242c72bc" kindref="member">PARAM_VECTOR_IN</ref>  (T, ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000027"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a83c3be131e322e0a661c8ddf9c3c7df6" kindref="member">PARAM_VECTOR_IN_REQ</ref>  (T, ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000033"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1ac24919def62bd93f462cc3ff9d555cbc" kindref="member">PARAM_VECTOR_OUT</ref>  (T, ID, DESC, ALIAS)</term></varlistentry>
<listitem><para><anchor id="bug_1_bug000028"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information.  </para>
</listitem>
<varlistentry><term>Member <ref refid="param_8hpp_1a56a316ac6f3ea218df55afae8376ce4e" kindref="member">TUPLE_TYPE</ref>  </term></varlistentry>
<listitem><para><anchor id="bug_1_bug000029"/> The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information. </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="bug"/>
  </compounddef>
</doxygen>
