<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="nstutorial" kind="page">
    <compoundname>nstutorial</compoundname>
    <title>NeighborSearch tutorial (k-nearest-neighbors)</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="nstutorial_1intro_nstut">
<title>Introduction</title>
<para>Nearest-neighbors search is a common machine learning task. In this setting, we have a <bold>query</bold> and a <bold>reference</bold> dataset. For each point in the <bold>query</bold> dataset, we wish to know the <formula id="174">$k$</formula> points in the <bold>reference</bold> dataset which are closest to the given query point.</para>
<para>Alternately, if the query and reference datasets are the same, the problem can be stated more simply: for each point in the dataset, we wish to know the <formula id="174">$k$</formula> nearest points to that point.</para>
<para><bold>mlpack</bold> provides:</para>
<para><itemizedlist>
<listitem><para>a <ref refid="nstutorial_1cli_nstut" kindref="member">simple command-line executable</ref> to run nearest-neighbors search (and furthest-neighbors search)</para>
</listitem><listitem><para>a <ref refid="nstutorial_1knn_nstut" kindref="member">simple C++ interface</ref> to perform nearest-neighbors search (and furthest-neighbors search)</para>
</listitem><listitem><para>a <ref refid="nstutorial_1neighborsearch_nstut" kindref="member">generic, extensible, and powerful C++ class (NeighborSearch)</ref> for complex usage</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="nstutorial_1toc_nstut">
<title>Table of Contents</title>
<para>A list of all the sections this tutorial contains.</para>
<para><itemizedlist>
<listitem><para><ref refid="nstutorial_1intro_nstut" kindref="member">Introduction</ref></para>
</listitem><listitem><para><ref refid="nstutorial_1toc_nstut" kindref="member">Table of Contents</ref></para>
</listitem><listitem><para><ref refid="nstutorial_1cli_nstut" kindref="member">Command-Line &apos;mlpack_knn&apos;</ref><itemizedlist>
<listitem><para><ref refid="nstutorial_1cli_ex1_nstut" kindref="member">One dataset, 5 nearest neighbors</ref></para>
</listitem><listitem><para><ref refid="nstutorial_1cli_ex2_nstut" kindref="member">Query and reference dataset, 10 nearest neighbors</ref></para>
</listitem><listitem><para><ref refid="nstutorial_1cli_ex3_nstut" kindref="member">One dataset, 3 nearest neighbors, leaf size of 15 points</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="nstutorial_1knn_nstut" kindref="member">The &apos;KNN&apos; class</ref><itemizedlist>
<listitem><para><ref refid="nstutorial_1knn_ex1_nstut" kindref="member">5 nearest neighbors on a single dataset</ref></para>
</listitem><listitem><para><ref refid="nstutorial_1knn_ex2_nstut" kindref="member">10 nearest neighbors on a query and reference dataset</ref></para>
</listitem><listitem><para><ref refid="nstutorial_1knn_ex3_nstut" kindref="member">Naive (exhaustive) search for 6 nearest neighbors on one dataset</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="nstutorial_1neighborsearch_nstut" kindref="member">The extensible &apos;NeighborSearch&apos; class</ref><itemizedlist>
<listitem><para><ref refid="nstutorial_1sort_policy_doc_nstut" kindref="member">SortPolicy policy class</ref></para>
</listitem><listitem><para><ref refid="nstutorial_1metric_type_doc_nstut" kindref="member">MetricType policy class</ref></para>
</listitem><listitem><para><ref refid="nstutorial_1mat_type_doc_nstut" kindref="member">MatType policy class</ref></para>
</listitem><listitem><para><ref refid="nstutorial_1tree_type_doc_nstut" kindref="member">TreeType policy class</ref></para>
</listitem><listitem><para><ref refid="nstutorial_1traverser_type_doc_nstut" kindref="member">TraverserType policy class</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="nstutorial_1further_doc_nstut" kindref="member">Further documentation</ref></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="nstutorial_1cli_nstut">
<title>Command-Line &apos;mlpack_knn&apos;</title>
<para>The simplest way to perform nearest-neighbors search in <bold>mlpack</bold> is to use the <computeroutput>mlpack_knn</computeroutput> executable. This program will perform nearest-neighbors search and place the resultant neighbors into one file and the resultant distances into another. The output files are organized such that the first row corresponds to the nearest neighbors of the first query point, with the first column corresponding to the nearest neighbor, and so forth.</para>
<para>Below are several examples of simple usage (and the resultant output). The <computeroutput>-v</computeroutput> option is used so that output is given. Further documentation on each individual option can be found by typing</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_knn<sp/>--help</highlight></codeline>
</programlisting></para>
<sect2 id="nstutorial_1cli_ex1_nstut">
<title>One dataset, 5 nearest neighbors</title>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_knn<sp/>-r<sp/>dataset.csv<sp/>-n<sp/>neighbors_out.csv<sp/>-d<sp/>distances_out.csv<sp/>-k<sp/>5<sp/>-v</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;dataset.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loaded<sp/>reference<sp/>data<sp/>from<sp/>&apos;dataset.csv&apos;<sp/>(3<sp/>x<sp/>1000).</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>reference<sp/>tree...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Tree<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Searching<sp/>for<sp/>5<sp/>nearest<sp/>neighbors<sp/>with<sp/>dual-tree<sp/>kd-tree<sp/>search...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>18412<sp/>node<sp/>combinations<sp/>were<sp/>scored.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>54543<sp/>base<sp/>cases<sp/>were<sp/>calculated.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;neighbors_out.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;distances_out.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>distances_out.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>k:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>leaf_size:<sp/>20</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>naive:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>neighbors_out.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>random_basis:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>dataset.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>seed:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>single_mode:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_type:<sp/>kd</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>computing_neighbors:<sp/>0.108968s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.006495s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>saving_data:<sp/>0.003843s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.126036s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_building:<sp/>0.003442s</highlight></codeline>
</programlisting></para>
<para>Convenient program timers are given for different parts of the calculation at the bottom of the output, as well as the parameters the simulation was run with. Now, if we look at the output files:</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>head<sp/>neighbors_out.csv</highlight></codeline>
<codeline><highlight class="normal">862,344,224,43,885</highlight></codeline>
<codeline><highlight class="normal">703,499,805,639,450</highlight></codeline>
<codeline><highlight class="normal">867,472,972,380,601</highlight></codeline>
<codeline><highlight class="normal">397,319,277,443,323</highlight></codeline>
<codeline><highlight class="normal">840,827,865,38,438</highlight></codeline>
<codeline><highlight class="normal">732,876,751,492,616</highlight></codeline>
<codeline><highlight class="normal">563,222,569,985,940</highlight></codeline>
<codeline><highlight class="normal">361,97,928,437,79</highlight></codeline>
<codeline><highlight class="normal">547,695,419,961,716</highlight></codeline>
<codeline><highlight class="normal">982,113,689,843,634</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>head<sp/>distances_out.csv</highlight></codeline>
<codeline><highlight class="normal">5.986076164057e-02,7.664920518084e-02,1.116050961847e-01,1.155595474371e-01,1.169810085522e-01</highlight></codeline>
<codeline><highlight class="normal">7.532635022982e-02,1.012564715841e-01,1.127846944644e-01,1.209584396720e-01,1.216543647014e-01</highlight></codeline>
<codeline><highlight class="normal">7.659571546879e-02,1.014588981948e-01,1.025114621511e-01,1.128082429187e-01,1.131659758673e-01</highlight></codeline>
<codeline><highlight class="normal">2.079405647909e-02,4.710724516732e-02,7.597622408419e-02,9.171977778898e-02,1.037033340864e-01</highlight></codeline>
<codeline><highlight class="normal">7.082206779700e-02,9.002355499742e-02,1.044181406406e-01,1.093149568834e-01,1.139700558608e-01</highlight></codeline>
<codeline><highlight class="normal">5.688056488896e-02,9.478072514474e-02,1.085637706630e-01,1.114177921451e-01,1.139370265105e-01</highlight></codeline>
<codeline><highlight class="normal">7.882260880455e-02,9.454474078041e-02,9.724494179950e-02,1.023829575445e-01,1.066927013814e-01</highlight></codeline>
<codeline><highlight class="normal">7.005321598247e-02,9.131417221561e-02,9.498248889074e-02,9.897964162308e-02,1.121202216165e-01</highlight></codeline>
<codeline><highlight class="normal">5.295654132754e-02,5.509877761894e-02,8.108227366619e-02,9.785461174861e-02,1.043968140367e-01</highlight></codeline>
<codeline><highlight class="normal">3.992859920333e-02,4.471418646159e-02,7.346053904990e-02,9.181982339584e-02,9.843075910782e-02</highlight></codeline>
</programlisting></para>
<para>So, the nearest neighbor to point 0 is point 862, with a distance of 5.986076164057e-02. The second nearest neighbor to point 0 is point 344, with a distance of 7.664920518084e-02. The third nearest neighbor to point 5 is point 751, with a distance of 1.085637706630e-01.</para>
</sect2>
<sect2 id="nstutorial_1cli_ex2_nstut">
<title>Query and reference dataset, 10 nearest neighbors</title>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_knn<sp/>-q<sp/>query_dataset.csv<sp/>-r<sp/>reference_dataset.csv<sp/>\</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>-n<sp/>neighbors_out.csv<sp/>-d<sp/>distances_out.csv<sp/>-k<sp/>10<sp/>-v</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;reference_dataset.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loaded<sp/>reference<sp/>data<sp/>from<sp/>&apos;reference_dataset.csv&apos;<sp/>(3<sp/>x<sp/>1000).</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>reference<sp/>tree...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Tree<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;query_dataset.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>50.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loaded<sp/>query<sp/>data<sp/>from<sp/>&apos;query_dataset.csv&apos;<sp/>(3x50).</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Searching<sp/>for<sp/>10<sp/>nearest<sp/>neighbors<sp/>with<sp/>dual-tree<sp/>kd-tree<sp/>search...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>query<sp/>tree...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Tree<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;neighbors_out.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;distances_out.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>distances_out.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>k:<sp/>10</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>leaf_size:<sp/>20</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>naive:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>neighbors_out.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>query_dataset.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>random_basis:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>reference_dataset.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>seed:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>single_mode:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_type:<sp/>kd</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>computing_neighbors:<sp/>0.022589s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.003572s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>saving_data:<sp/>0.000755s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.032197s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_building:<sp/>0.002590s</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="nstutorial_1cli_ex3_nstut">
<title>One dataset, 3 nearest neighbors, leaf size of 15 points</title>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_knn<sp/>-r<sp/>dataset.csv<sp/>-n<sp/>neighbors_out.csv<sp/>-d<sp/>distances_out.csv<sp/>-k<sp/>3<sp/>-l<sp/>15<sp/>-v</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;dataset.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loaded<sp/>reference<sp/>data<sp/>from<sp/>&apos;dataset.csv&apos;<sp/>(3<sp/>x<sp/>1000).</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>reference<sp/>tree...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Tree<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Searching<sp/>for<sp/>3<sp/>nearest<sp/>neighbors<sp/>with<sp/>dual-tree<sp/>kd-tree<sp/>search...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>19692<sp/>node<sp/>combinations<sp/>were<sp/>scored.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>36263<sp/>base<sp/>cases<sp/>were<sp/>calculated.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;neighbors_out.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;distances_out.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>distances_out.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>k:<sp/>3</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>leaf_size:<sp/>15</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>naive:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>neighbors_out.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>random_basis:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>dataset.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>seed:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>single_mode:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_type:<sp/>kd</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>computing_neighbors:<sp/>0.059020s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.002791s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>saving_data:<sp/>0.002369s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.069277s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_building:<sp/>0.002713s</highlight></codeline>
</programlisting></para>
<para>Further documentation on options should be found by using the <ndash/>help option.</para>
</sect2>
</sect1>
<sect1 id="nstutorial_1knn_nstut">
<title>The &apos;KNN&apos; class</title>
<para>The &apos;KNN&apos; class is, specifically, a typedef of the more extensible NeighborSearch class, querying for nearest neighbors using the Euclidean distance.</para>
<para><programlisting><codeline><highlight class="normal">typedef<sp/>NeighborSearch&lt;NearestNeighborSort,<sp/>metric::EuclideanDistance&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>KNN;</highlight></codeline>
</programlisting></para>
<para>Using the KNN class is particularly simple; first, the object must be constructed and given a dataset. Then, the method is run, and two matrices are returned: one which holds the indices of the nearest neighbors, and one which holds the distances of the nearest neighbors. These are of the same structure as the output <ndash/>neighbors_file and <ndash/>distances_file for the CLI interface (see above). A handful of examples of simple usage of the KNN class are given below.</para>
<sect2 id="nstutorial_1knn_ex1_nstut">
<title>5 nearest neighbors on a single dataset</title>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/neighbor_search/neighbor_search.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Our<sp/>dataset<sp/>matrix,<sp/>which<sp/>is<sp/>column-major.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>data;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">KNN<sp/>a(data);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>matrices<sp/>we<sp/>will<sp/>store<sp/>output<sp/>in.</highlight></codeline>
<codeline><highlight class="normal">arma::Mat&lt;size_t&gt;<sp/>resultingNeighbors;</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>resultingDistances;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">a.Search(5,<sp/>resultingNeighbors,<sp/>resultingDistances);</highlight></codeline>
</programlisting></para>
<para>The output of the search is stored in resultingNeighbors and resultingDistances.</para>
</sect2>
<sect2 id="nstutorial_1knn_ex2_nstut">
<title>10 nearest neighbors on a query and reference dataset</title>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/neighbor_search/neighbor_search.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Our<sp/>dataset<sp/>matrices,<sp/>which<sp/>are<sp/>column-major.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>queryData,<sp/>referenceData;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">KNN<sp/>a(referenceData);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>matrices<sp/>we<sp/>will<sp/>store<sp/>output<sp/>in.</highlight></codeline>
<codeline><highlight class="normal">arma::Mat&lt;size_t&gt;<sp/>resultingNeighbors;</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>resultingDistances;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">a.Search(queryData,<sp/>10,<sp/>resultingNeighbors,<sp/>resultingDistances);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="nstutorial_1knn_ex3_nstut">
<title>Naive (exhaustive) search for 6 nearest neighbors on one dataset</title>
<para>This example uses the O(n^2) naive search (not the tree-based search).</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/neighbor_search/neighbor_search.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Our<sp/>dataset<sp/>matrix,<sp/>which<sp/>is<sp/>column-major.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>dataset;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">KNN<sp/>a(dataset,<sp/>true);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>matrices<sp/>we<sp/>will<sp/>store<sp/>output<sp/>in.</highlight></codeline>
<codeline><highlight class="normal">arma::Mat&lt;size_t&gt;<sp/>resultingNeighbors;</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>resultingDistances;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">a.Search(6,<sp/>resultingNeighbors,<sp/>resultingDistances);</highlight></codeline>
</programlisting></para>
<para>Needless to say, naive search can be very slow...</para>
</sect2>
</sect1>
<sect1 id="nstutorial_1neighborsearch_nstut">
<title>The extensible &apos;NeighborSearch&apos; class</title>
<para>The NeighborSearch class is very extensible, having the following template arguments:</para>
<para><programlisting><codeline><highlight class="normal">template&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>typename<sp/>SortPolicy<sp/>=<sp/>NearestNeighborSort,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>typename<sp/>MetricType<sp/>=<sp/>mlpack::metric::EuclideanDistance,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>typename<sp/>MatType<sp/>=<sp/>arma::mat,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template&lt;typename<sp/>TreeMetricType,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>TreeStatType,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>TreeMatType&gt;<sp/>class<sp/>TreeType<sp/>=<sp/>tree::KDTree,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template&lt;typename<sp/>RuleType&gt;<sp/>class<sp/>TraversalType<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TreeType&lt;MetricType,<sp/>NeighborSearchStat&lt;SortPolicy&gt;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatType&gt;::template<sp/>DualTreeTraverser&gt;</highlight></codeline>
<codeline><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>NeighborSearch;</highlight></codeline>
</programlisting></para>
<para>By choosing different components for each of these template classes, a very arbitrary neighbor searching object can be constructed. Note that each of these template parameters have defaults, so it is not necessary to specify each one.</para>
<sect2 id="nstutorial_1sort_policy_doc_nstut">
<title>SortPolicy policy class</title>
<para>The SortPolicy template parameter allows specification of how the NeighborSearch object will decide which points are to be searched for. The <ref refid="namespacemlpack_1_1neighbor_1af3f11fce33c041aa26b1c91107f71b0f" kindref="member">mlpack::neighbor::NearestNeighborSort</ref> class is a well-documented example. A custom SortPolicy class must implement the same methods which NearestNeighborSort does:</para>
<para><programlisting><codeline><highlight class="normal">static<sp/>size_t<sp/>SortDistance(const<sp/>arma::vec&amp;<sp/>list,<sp/>double<sp/>newDistance);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>bool<sp/>IsBetter(const<sp/>double<sp/>value,<sp/>const<sp/>double<sp/>ref);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>TreeType&gt;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>double<sp/>BestNodeToNodeDistance(const<sp/>TreeType*<sp/>queryNode,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TreeType*<sp/>referenceNode);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>TreeType&gt;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>double<sp/>BestPointToNodeDistance(const<sp/>arma::vec&amp;<sp/>queryPoint,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TreeType*<sp/>referenceNode);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>const<sp/>double<sp/>WorstDistance();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>const<sp/>double<sp/>BestDistance();</highlight></codeline>
</programlisting></para>
<para>The <ref refid="namespacemlpack_1_1neighbor_1a690bbbab38fc719071a5c019acd2f947" kindref="member">mlpack::neighbor::FurthestNeighborSort</ref> class is another implementation, which is used to create the &apos;KFN&apos; typedef class, which finds the furthest neighbors, as opposed to the nearest neighbors.</para>
</sect2>
<sect2 id="nstutorial_1metric_type_doc_nstut">
<title>MetricType policy class</title>
<para>The MetricType policy class allows the neighbor search to take place in any arbitrary metric space. The <ref refid="classmlpack_1_1metric_1_1LMetric" kindref="compound">mlpack::metric::LMetric</ref> class is a good example implementation. A MetricType class must provide the following functions:</para>
<para><programlisting><codeline><highlight class="normal">//<sp/>Empty<sp/>constructor<sp/>is<sp/>required.</highlight></codeline>
<codeline><highlight class="normal">MetricType();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Compute<sp/>the<sp/>distance<sp/>between<sp/>two<sp/>points.</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>VecType&gt;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>Evaluate(const<sp/>VecType&amp;<sp/>a,<sp/>const<sp/>VecType&amp;<sp/>b);</highlight></codeline>
</programlisting></para>
<para>Internally, the NeighborSearch class keeps an instantiated MetricType class (which can be given in the constructor). This is useful for a metric like the Mahalanobis distance (<ref refid="classmlpack_1_1metric_1_1MahalanobisDistance" kindref="compound">mlpack::metric::MahalanobisDistance</ref>), which must store state (the covariance matrix). Therefore, you can write a non-static MetricType class and use it seamlessly with NeighborSearch.</para>
<para>For more information on the MetricType policy, see the documentation <ref refid="metrics" kindref="compound">here</ref>.</para>
</sect2>
<sect2 id="nstutorial_1mat_type_doc_nstut">
<title>MatType policy class</title>
<para>The MatType template parameter specifies the type of data matrix used. This type must implement the same operations as an Armadillo matrix, and so standard choices are <computeroutput>arma::mat</computeroutput> and <computeroutput>arma::sp_mat</computeroutput>.</para>
</sect2>
<sect2 id="nstutorial_1tree_type_doc_nstut">
<title>TreeType policy class</title>
<para>The NeighborSearch class allows great extensibility in the selection of the type of tree used for search. This type must follow the typical mlpack TreeType policy, documented <ref refid="trees" kindref="compound">here</ref>.</para>
<para>Typical choices might include <ref refid="namespacemlpack_1_1tree_1a73c2146f8d1da65d927c7746bfe7e750" kindref="member">mlpack::tree::KDTree</ref>, <ref refid="namespacemlpack_1_1tree_1a9d4905444011bbd045122cc985638b32" kindref="member">mlpack::tree::BallTree</ref>, <ref refid="namespacemlpack_1_1tree_1a6ed9d585969e7837af0d41e0c3975602" kindref="member">mlpack::tree::StandardCoverTree</ref>, <ref refid="namespacemlpack_1_1tree_1ae4af35641769744ba680cc934e1c1f0e" kindref="member">mlpack::tree::RTree</ref>, or <ref refid="namespacemlpack_1_1tree_1a879db9c5c88d62f13f4a1667bc5adf5c" kindref="member">mlpack::tree::RStarTree</ref>. It is easily possible to make your own tree type for use with NeighborSearch; consult the <ref refid="trees" kindref="compound">TreeType documentation</ref> for more details.</para>
<para>An example of using the NeighborSearch class with a ball tree is given below.</para>
<para><programlisting><codeline><highlight class="normal">//<sp/>Construct<sp/>a<sp/>NeighborSearch<sp/>object<sp/>with<sp/>ball<sp/>bounds.</highlight></codeline>
<codeline><highlight class="normal">NeighborSearch&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>NearestNeighborSort,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>metric::EuclideanDistance,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arma::mat,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tree::BallTree</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>neighborSearch(dataset);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="nstutorial_1traverser_type_doc_nstut">
<title>TraverserType policy class</title>
<para>The last template parameter the NeighborSearch class offers is the TraverserType class. The TraverserType class holds the strategy used to traverse the trees in either single-tree or dual-tree search mode. By default, it is set to use the default traverser of the given <computeroutput>TreeType</computeroutput> (which is the member <computeroutput>TreeType::DualTreeTraverser</computeroutput>).</para>
<para>This class must implement the following two methods:</para>
<para><programlisting><codeline><highlight class="normal">//<sp/>Instantiate<sp/>with<sp/>a<sp/>given<sp/>RuleType.</highlight></codeline>
<codeline><highlight class="normal">TraverserType(RuleType&amp;<sp/>rule);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Traverse<sp/>with<sp/>two<sp/>trees.</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Traverse(TreeType&amp;<sp/>queryNode,<sp/>TreeType&amp;<sp/>referenceNode);</highlight></codeline>
</programlisting></para>
<para>The RuleType class provides the following functions for use in the traverser:</para>
<para><programlisting><codeline><highlight class="normal">//<sp/>Evaluate<sp/>the<sp/>base<sp/>case<sp/>between<sp/>two<sp/>points.</highlight></codeline>
<codeline><highlight class="normal">double<sp/>BaseCase(const<sp/>size_t<sp/>queryIndex,<sp/>const<sp/>size_t<sp/>referenceIndex);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Score<sp/>the<sp/>two<sp/>nodes<sp/>to<sp/>see<sp/>if<sp/>they<sp/>can<sp/>be<sp/>pruned,<sp/>returning<sp/>DBL_MAX<sp/>if<sp/>they</highlight></codeline>
<codeline><highlight class="normal">//<sp/>can<sp/>be<sp/>pruned.</highlight></codeline>
<codeline><highlight class="normal">double<sp/>Score(TreeType&amp;<sp/>queryNode,<sp/>TreeType&amp;<sp/>referenceNode);</highlight></codeline>
</programlisting></para>
<para>Note also that any traverser given must satisfy the definition of a pruning dual-tree traversal given in the paper &quot;Tree-independent dual-tree algorithms&quot;.</para>
</sect2>
</sect1>
<sect1 id="nstutorial_1further_doc_nstut">
<title>Further documentation</title>
<para>For further documentation on the NeighborSearch class, consult the <ref refid="classmlpack_1_1neighbor_1_1NeighborSearch" kindref="compound">complete API documentation</ref>. </para>
</sect1>
    </detaileddescription>
    <location file="/home/aakash/mlpack/doc/tutorials/neighbor_search/neighbor_search.txt"/>
  </compounddef>
</doxygen>
