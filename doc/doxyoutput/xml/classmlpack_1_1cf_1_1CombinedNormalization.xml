<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmlpack_1_1cf_1_1CombinedNormalization" kind="class" language="C++" prot="public">
    <compoundname>mlpack::cf::CombinedNormalization</compoundname>
    <includes refid="combined__normalization_8hpp" local="no">combined_normalization.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename...</type>
        <declname>NormalizationTypes</declname>
        <defname>NormalizationTypes</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmlpack_1_1cf_1_1CombinedNormalization_1a1e98d43da1ec47c76125e7782460aa2c" prot="public" static="no">
        <type>std::tuple&lt; NormalizationTypes... &gt;</type>
        <definition>using TupleType =  std::tuple&lt;NormalizationTypes...&gt;</definition>
        <argsstring></argsstring>
        <name>TupleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="47" column="3" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1cf_1_1CombinedNormalization_1adee84ada30167a606e055ea7eb2a2509" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a1e98d43da1ec47c76125e7782460aa2c" kindref="member">TupleType</ref></type>
        <definition>TupleType normalizations</definition>
        <argsstring></argsstring>
        <name>normalizations</name>
        <briefdescription>
<para>A tuple of all normalization objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="112" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CombinedNormalization_1a8fb4e3fa10e0ecf786c2b710175bb75b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CombinedNormalization</definition>
        <argsstring>()</argsstring>
        <name>CombinedNormalization</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="50" column="3" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CombinedNormalization_1a93926452083f79197edc30f83476a40d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Denormalize</definition>
        <argsstring>(const arma::Mat&lt; size_t &gt; &amp;combinations, arma::vec &amp;predictions) const</argsstring>
        <name>Denormalize</name>
        <param>
          <type>const arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>combinations</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>predictions</declname>
        </param>
        <briefdescription>
<para>Denormalize rating by calling <ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a27ffe74669d0dfd1c217728c369b35f9" kindref="member">Denormalize()</ref> in each normalization object. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the order of objects calling <ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a27ffe74669d0dfd1c217728c369b35f9" kindref="member">Denormalize()</ref> should be the reversed order of objects calling <ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a47ac5da06a1301c0c72529184cc77a7e" kindref="member">Normalize()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>combinations</parametername>
</parameternamelist>
<parameterdescription>
<para>User/Item combinations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>predictions</parametername>
</parameternamelist>
<parameterdescription>
<para>Predicted ratings for each user/item combination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="87" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="87" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CombinedNormalization_1a27ffe74669d0dfd1c217728c369b35f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Denormalize</definition>
        <argsstring>(const size_t user, const size_t item, const double rating) const</argsstring>
        <name>Denormalize</name>
        <param>
          <type>const size_t</type>
          <declname>user</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>item</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rating</declname>
        </param>
        <briefdescription>
<para>Denormalize rating by calling <ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a27ffe74669d0dfd1c217728c369b35f9" kindref="member">Denormalize()</ref> in each normalization object. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the order of objects calling <ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a27ffe74669d0dfd1c217728c369b35f9" kindref="member">Denormalize()</ref> should be the reversed order of objects calling <ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a47ac5da06a1301c0c72529184cc77a7e" kindref="member">Normalize()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Item ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rating</parametername>
</parameternamelist>
<parameterdescription>
<para>Computed rating before denormalization. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="72" column="10" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CombinedNormalization_1a58a35d3ef1c11ee69753aa099513840e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a1e98d43da1ec47c76125e7782460aa2c" kindref="member">TupleType</ref> &amp;</type>
        <definition>const TupleType&amp; Normalizations</definition>
        <argsstring>() const</argsstring>
        <name>Normalizations</name>
        <briefdescription>
<para>Return normalizations tuple. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="96" column="19" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CombinedNormalization_1a47ac5da06a1301c0c72529184cc77a7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Normalize</definition>
        <argsstring>(MatType &amp;data)</argsstring>
        <name>Normalize</name>
        <param>
          <type>MatType &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Normalize the data by calling <ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a47ac5da06a1301c0c72529184cc77a7e" kindref="member">Normalize()</ref> in each normalization object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dataset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="58" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CombinedNormalization_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t version)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Serialization. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="105" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="105" bodyend="108"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CombinedNormalization_1ac82cb09213454b0fe1ab558397157f8b" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;(I &gt;= std::tuple_size&lt;<ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a1e98d43da1ec47c76125e7782460aa2c" kindref="member">TupleType</ref>&gt;::value)&gt;</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SequenceDenormalize</definition>
        <argsstring>(const arma::Mat&lt; size_t &gt; &amp;, arma::vec &amp;) const</argsstring>
        <name>SequenceDenormalize</name>
        <param>
          <type>const arma::Mat&lt; size_t &gt; &amp;</type>
        </param>
        <param>
          <type>arma::vec &amp;</type>
        </param>
        <briefdescription>
<para>End of tuple unpacking. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="179" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="179" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CombinedNormalization_1a60b6a244bb21f96a9f78220aa2b62dd6" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;(I &lt; std::tuple_size&lt;<ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a1e98d43da1ec47c76125e7782460aa2c" kindref="member">TupleType</ref>&gt;::value)&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SequenceDenormalize</definition>
        <argsstring>(const arma::Mat&lt; size_t &gt; &amp;combinations, arma::vec &amp;predictions) const</argsstring>
        <name>SequenceDenormalize</name>
        <param>
          <type>const arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>combinations</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>predictions</declname>
        </param>
        <briefdescription>
<para>Unpack normalizations tuple to denormalize. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="165" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="165" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CombinedNormalization_1a2ea9b91e1d801f2ba627816860bd2584" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;(I &lt; std::tuple_size&lt;<ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a1e98d43da1ec47c76125e7782460aa2c" kindref="member">TupleType</ref>&gt;::value)&gt;</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double SequenceDenormalize</definition>
        <argsstring>(const size_t user, const size_t item, const double rating) const</argsstring>
        <name>SequenceDenormalize</name>
        <param>
          <type>const size_t</type>
          <declname>user</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>item</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rating</declname>
        </param>
        <briefdescription>
<para>Unpack normalizations tuple to denormalize. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="137" column="10" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="137" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CombinedNormalization_1ad85a942929ad0ed6e4fd11ecff16245e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;(I &gt;= std::tuple_size&lt;<ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a1e98d43da1ec47c76125e7782460aa2c" kindref="member">TupleType</ref>&gt;::value)&gt;</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double SequenceDenormalize</definition>
        <argsstring>(const size_t, const size_t, const double rating) const</argsstring>
        <name>SequenceDenormalize</name>
        <param>
          <type>const</type>
          <declname>size_t</declname>
        </param>
        <param>
          <type>const</type>
          <declname>size_t</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rating</declname>
        </param>
        <briefdescription>
<para>End of tuple unpacking. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="154" column="10" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="154" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CombinedNormalization_1aaceb8dd8d8358837a3ec3c91976acc05" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename MatType</type>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;(I &gt;= std::tuple_size&lt;<ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a1e98d43da1ec47c76125e7782460aa2c" kindref="member">TupleType</ref>&gt;::value)&gt;</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SequenceNormalize</definition>
        <argsstring>(MatType &amp;)</argsstring>
        <name>SequenceNormalize</name>
        <param>
          <type>MatType &amp;</type>
        </param>
        <briefdescription>
<para>End of tuple unpacking. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="131" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CombinedNormalization_1a85727c5e0db41e5de38a9ef08832f009" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename MatType</type>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;(I &lt; std::tuple_size&lt;<ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a1e98d43da1ec47c76125e7782460aa2c" kindref="member">TupleType</ref>&gt;::value)&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SequenceNormalize</definition>
        <argsstring>(MatType &amp;data)</argsstring>
        <name>SequenceNormalize</name>
        <param>
          <type>MatType &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Unpack normalizations tuple to normalize data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="119" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CombinedNormalization_1a83e09751af7c747831580e266710d8ac" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename Archive</type>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;(I &gt;= std::tuple_size&lt;<ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a1e98d43da1ec47c76125e7782460aa2c" kindref="member">TupleType</ref>&gt;::value)&gt;</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SequenceSerialize</definition>
        <argsstring>(Archive &amp;, const uint32_t)</argsstring>
        <name>SequenceSerialize</name>
        <param>
          <type>Archive &amp;</type>
        </param>
        <param>
          <type>const uint32_t</type>
        </param>
        <briefdescription>
<para>End of tuple unpacking. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="202" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="202" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CombinedNormalization_1a6f99e08a608a58577888b58866abb8af" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename Archive</type>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;(I &lt; std::tuple_size&lt;<ref refid="classmlpack_1_1cf_1_1CombinedNormalization_1a1e98d43da1ec47c76125e7782460aa2c" kindref="member">TupleType</ref>&gt;::value)&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SequenceSerialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t version)</argsstring>
        <name>SequenceSerialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Unpack normalizations tuple to serialize. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="187" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="187" bodyend="194"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This normalization class performs a sequence of normalization methods on raw ratings. </para>
    </briefdescription>
    <detaileddescription>
<para>An example of how to use <ref refid="classmlpack_1_1cf_1_1CombinedNormalization" kindref="compound">CombinedNormalization</ref> in CF is shown below:</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>arma::mat<sp/>data;<sp/>//<sp/>data<sp/>is<sp/>a<sp/>(user,<sp/>item,<sp/>rating)<sp/>table.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Users<sp/>for<sp/>whom<sp/>recommendations<sp/>are<sp/>generated.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::Col&lt;size_t&gt;<sp/>users;</highlight></codeline>
<codeline><highlight class="normal">arma::Mat&lt;size_t&gt;<sp/>recommendations;<sp/>//<sp/>Resulting<sp/>recommendations.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CFType&lt;NMFPolicy,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CombinedNormalization&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OverallMeanNormalization,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UserMeanNormalization,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ItemMeanNormalization&gt;&gt;<sp/>cf(data);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Generate<sp/>10<sp/>recommendations<sp/>for<sp/>all<sp/>users.</highlight></codeline>
<codeline><highlight class="normal">cf.GetRecommendations(10,<sp/>recommendations);</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" line="44" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/combined_normalization.hpp" bodystart="45" bodyend="204"/>
    <listofallmembers>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1a8fb4e3fa10e0ecf786c2b710175bb75b" prot="public" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>CombinedNormalization</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1a27ffe74669d0dfd1c217728c369b35f9" prot="public" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>Denormalize</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1a93926452083f79197edc30f83476a40d" prot="public" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>Denormalize</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1adee84ada30167a606e055ea7eb2a2509" prot="private" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>normalizations</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1a58a35d3ef1c11ee69753aa099513840e" prot="public" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>Normalizations</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1a47ac5da06a1301c0c72529184cc77a7e" prot="public" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>Normalize</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1a2ea9b91e1d801f2ba627816860bd2584" prot="private" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>SequenceDenormalize</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1ad85a942929ad0ed6e4fd11ecff16245e" prot="private" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>SequenceDenormalize</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1a60b6a244bb21f96a9f78220aa2b62dd6" prot="private" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>SequenceDenormalize</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1ac82cb09213454b0fe1ab558397157f8b" prot="private" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>SequenceDenormalize</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1a85727c5e0db41e5de38a9ef08832f009" prot="private" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>SequenceNormalize</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1aaceb8dd8d8358837a3ec3c91976acc05" prot="private" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>SequenceNormalize</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1a6f99e08a608a58577888b58866abb8af" prot="private" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>SequenceSerialize</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1a83e09751af7c747831580e266710d8ac" prot="private" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>SequenceSerialize</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>serialize</name></member>
      <member refid="classmlpack_1_1cf_1_1CombinedNormalization_1a1e98d43da1ec47c76125e7782460aa2c" prot="public" virt="non-virtual"><scope>mlpack::cf::CombinedNormalization</scope><name>TupleType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
