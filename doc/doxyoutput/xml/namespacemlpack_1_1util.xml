<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacemlpack_1_1util" kind="namespace" language="C++">
    <compoundname>mlpack::util</compoundname>
    <innerclass refid="structmlpack_1_1util_1_1BindingDetails" prot="public">mlpack::util::BindingDetails</innerclass>
    <innerclass refid="classmlpack_1_1util_1_1Example" prot="public">mlpack::util::Example</innerclass>
    <innerclass refid="structmlpack_1_1util_1_1IsStdVector" prot="public">mlpack::util::IsStdVector</innerclass>
    <innerclass refid="structmlpack_1_1util_1_1IsStdVector_3_01std_1_1vector_3_01T_00_01A_01_4_01_4" prot="public">mlpack::util::IsStdVector&lt; std::vector&lt; T, A &gt; &gt;</innerclass>
    <innerclass refid="classmlpack_1_1util_1_1LongDescription" prot="public">mlpack::util::LongDescription</innerclass>
    <innerclass refid="classmlpack_1_1util_1_1NullOutStream" prot="public">mlpack::util::NullOutStream</innerclass>
    <innerclass refid="structmlpack_1_1util_1_1ParamData" prot="public">mlpack::util::ParamData</innerclass>
    <innerclass refid="classmlpack_1_1util_1_1PrefixedOutStream" prot="public">mlpack::util::PrefixedOutStream</innerclass>
    <innerclass refid="classmlpack_1_1util_1_1ProgramName" prot="public">mlpack::util::ProgramName</innerclass>
    <innerclass refid="classmlpack_1_1util_1_1SeeAlso" prot="public">mlpack::util::SeeAlso</innerclass>
    <innerclass refid="classmlpack_1_1util_1_1ShortDescription" prot="public">mlpack::util::ShortDescription</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::util::CamelCase</definition>
        <argsstring>(std::string s, bool lower)</argsstring>
        <name>CamelCase</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lower</declname>
        </param>
        <briefdescription>
<para>Given an snake_case like, e.g., &quot;logistic_regression&quot;, return CamelCase(e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>&quot;LogisticRegression&quot;) that can be used in bindings.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>input string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lower</parametername>
</parameternamelist>
<parameterdescription>
<para>is of bool type. If lower is true then output must be lowerCamelCase else UpperCamelCase. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/util/camel_case.hpp" line="26" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/util/camel_case.hpp" bodystart="26" bodyend="49"/>
        <referencedby refid="namespacemlpack_1_1bindings_1_1go_1a7c05388978bbd1562bd5f855b3be264d" compoundref="print__defn__input_8hpp" startline="29" endline="41">mlpack::bindings::go::PrintDefnInput</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1go_1adbaa72724d7f6265c12c4d205c1d78a9" compoundref="go_2print__doc_8hpp" startline="39" endline="70">mlpack::bindings::go::PrintDoc</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1go_1a3866346aeed26609b1a97d962fa6fe32" compoundref="go_2print__input__processing_8hpp" startline="29" endline="123">mlpack::bindings::go::PrintInputProcessing</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1go_1af86c61eac4dcbbdd4d677dc8d078da9f" compoundref="print__method__config_8hpp" startline="29" endline="58">mlpack::bindings::go::PrintMethodConfig</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1go_1ae18e5140e357a39e7fd9c171a6cdf5e6" compoundref="print__method__init_8hpp" startline="29" endline="80">mlpack::bindings::go::PrintMethodInit</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1go_1a76b2a04be53e39d1b6e87074bcf7a12f" compoundref="go_2print__output__processing_8hpp" startline="29" endline="50">mlpack::bindings::go::PrintOutputProcessing</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1ad3edb223b2cb9147f26f1f7e6cd84874" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
          <param>
            <type>typename DimType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::util::CheckSameDimensionality</definition>
        <argsstring>(const DataType &amp;data, const DimType &amp;dimension, const std::string &amp;callerDescription, const std::string &amp;addInfo=&quot;dataset&quot;)</argsstring>
        <name>CheckSameDimensionality</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const DimType &amp;</type>
          <declname>dimension</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>callerDescription</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>addInfo</declname>
          <defval>&quot;dataset&quot;</defval>
        </param>
        <briefdescription>
<para>Check for if the given dataset dimension matches with the model&apos;s. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>dataset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the model. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callerDescription</parametername>
</parameternamelist>
<parameterdescription>
<para>A description of the caller that can be used for error generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to use for dataset for precise error generation. Default is &quot;dataset&quot;; for example, &quot;weights&quot; could also be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/size_checks.hpp" line="78" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/size_checks.hpp" bodystart="78" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a157fecedf39b2a38c83eb0f83c731494" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::util::CheckSameDimensionality</definition>
        <argsstring>(const DataType &amp;data, const size_t &amp;dimension, const std::string &amp;callerDescription, const std::string &amp;addInfo=&quot;dataset&quot;)</argsstring>
        <name>CheckSameDimensionality</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>dimension</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>callerDescription</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>addInfo</declname>
          <defval>&quot;dataset&quot;</defval>
        </param>
        <briefdescription>
<para>An overload of <ref refid="namespacemlpack_1_1util_1ad3edb223b2cb9147f26f1f7e6cd84874" kindref="member">CheckSameDimensionality()</ref> where the dimension to be checked is known second param is unsigned long int. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/size_checks.hpp" line="99" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/size_checks.hpp" bodystart="99" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a45a020ff6df656fc4948ffe17e4cec6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
          <param>
            <type>typename LabelsType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::util::CheckSameSizes</definition>
        <argsstring>(const DataType &amp;data, const LabelsType &amp;label, const std::string &amp;callerDescription, const std::string &amp;addInfo=&quot;labels&quot;)</argsstring>
        <name>CheckSameSizes</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const LabelsType &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>callerDescription</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>addInfo</declname>
          <defval>&quot;labels&quot;</defval>
        </param>
        <briefdescription>
<para>Check for if the given data points &amp; labels have same size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Labels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callerDescription</parametername>
</parameternamelist>
<parameterdescription>
<para>A description of the caller that can be used for error generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to use for labels for precise error generation. Default is &quot;labels&quot;; for example, &quot;weights&quot; could also be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/size_checks.hpp" line="31" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/size_checks.hpp" bodystart="31" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a017858cb742d1e2be3a5a8f9fb83f304" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::util::CheckSameSizes</definition>
        <argsstring>(const DataType &amp;data, const size_t &amp;size, const std::string &amp;callerDescription, const std::string &amp;addInfo=&quot;labels&quot;)</argsstring>
        <name>CheckSameSizes</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>callerDescription</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>addInfo</declname>
          <defval>&quot;labels&quot;</defval>
        </param>
        <briefdescription>
<para>An overload of <ref refid="namespacemlpack_1_1util_1a45a020ff6df656fc4948ffe17e4cec6e" kindref="member">CheckSameSizes()</ref> where the size to be checked is known previously. </para>
        </briefdescription>
        <detaileddescription>
<para>The second parameter is of type unsigned int. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/size_checks.hpp" line="51" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/size_checks.hpp" bodystart="51" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1abe07e42de35ab2a768e1a84af6466ca1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void DisableBacktrace</definition>
        <argsstring>()</argsstring>
        <name>DisableBacktrace</name>
        <briefdescription>
<para>Disable backtraces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" line="76" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" bodystart="76" bodyend="79"/>
        <references refid="classmlpack_1_1util_1_1PrefixedOutStream_1abb536618767706a6154fb1f159122eb2" compoundref="prefixedoutstream_8hpp" startline="123">PrefixedOutStream::backtrace</references>
        <references refid="classmlpack_1_1Log_1a5b72fcdfa48547883454fbc59be9caf1" compoundref="log_8hpp" startline="90">Log::Fatal</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a25bab37c162e45dbf873923b99603bb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void DisableVerbose</definition>
        <argsstring>()</argsstring>
        <name>DisableVerbose</name>
        <briefdescription>
<para>Turn verbose output off. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" line="68" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" bodystart="68" bodyend="71"/>
        <references refid="classmlpack_1_1util_1_1PrefixedOutStream_1afd382e0526bef760552ccae39559116a" compoundref="prefixedoutstream_8hpp" startline="119">PrefixedOutStream::ignoreInput</references>
        <references refid="classmlpack_1_1Log_1a6e069f745e1bbea8ccc4c1d39bf56089" compoundref="log_8hpp" startline="84">Log::Info</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a32cda6b3afb11b82d71cf83267e65807" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EnableTimers</definition>
        <argsstring>()</argsstring>
        <name>EnableTimers</name>
        <briefdescription>
<para>Enable timing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" line="93" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" bodystart="93" bodyend="96"/>
        <references refid="classmlpack_1_1Timer_1a41f8422720891efeaf30a43f6a7bbc7f">Timer::EnableTiming</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a511ac95ccd5cd83a09e13c4437eb0e45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EnableVerbose</definition>
        <argsstring>()</argsstring>
        <name>EnableVerbose</name>
        <briefdescription>
<para>Turn verbose output on. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" line="60" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" bodystart="60" bodyend="63"/>
        <references refid="classmlpack_1_1util_1_1PrefixedOutStream_1afd382e0526bef760552ccae39559116a" compoundref="prefixedoutstream_8hpp" startline="119">PrefixedOutStream::ignoreInput</references>
        <references refid="classmlpack_1_1Log_1a6e069f745e1bbea8ccc4c1d39bf56089" compoundref="log_8hpp" startline="84">Log::Info</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1acd9a3115e22684d3b768a78920c57adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * GetParamPtr</definition>
        <argsstring>(const std::string &amp;paramName)</argsstring>
        <name>GetParamPtr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
<para>Return a pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function exists to work around Cython&apos;s seeming lack of support for template pointer types. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" line="52" column="3" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a02467c0d501c83596e52a066ba498a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T&amp; mlpack::util::GetParamWithInfo</definition>
        <argsstring>(const std::string &amp;paramName)</argsstring>
        <name>GetParamWithInfo</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
<para>Return the matrix part of a matrix + dataset info parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/python/mlpack/io_util.hpp" line="118" column="3" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/python/mlpack/io_util.hpp" bodystart="118" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a5463728499ca94746d779a6863df5c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::util::GetVersion</definition>
        <argsstring>()</argsstring>
        <name>GetVersion</name>
        <briefdescription>
<para>This will return either &quot;mlpack x.y.z&quot; or &quot;mlpack master-XXXXXXX&quot; depending on whether or not this is a stable version of mlpack or a git repository. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/version.hpp" line="31" column="13" declfile="/home/aakash/mlpack/src/mlpack/core/util/version.hpp" declline="31" declcolumn="13"/>
        <referencedby refid="namespacemlpack_1_1bindings_1_1cli_1a9f4d336f3d999569328497d0b8f37b35" compoundref="parse__command__line_8hpp" startline="36" endline="152">mlpack::bindings::cli::ParseCommandLine</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a7b8929840f4891a96df1108873e1a1f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::util::HyphenateString</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;prefix, const bool force=false)</argsstring>
        <name>HyphenateString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Hyphenate a string or split it onto multiple 80-character lines, with some amount of padding on each line. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used for option output.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to hyphenate (splits are on &apos; &apos;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix to hyphenate a string with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>Hyphenate the string even if the length is less then 80. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if prefix.size() &gt;= 80. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/hyphenate_string.hpp" line="27" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/hyphenate_string.hpp" bodystart="27" bodyend="73"/>
        <referencedby refid="namespacemlpack_1_1util_1a0617e4b19f760fef6d14bbacd7545049" compoundref="hyphenate__string_8hpp" startline="82" endline="85">HyphenateString</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1r_1a9cbe53faf744ce5439cd284796375c20" compoundref="R_2print__doc_8hpp" startline="36" endline="82">mlpack::bindings::r::PrintDoc</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1python_1ad24641bda961439e033d20c7fecbacbc" compoundref="python_2print__doc_8hpp" startline="36" endline="65">mlpack::bindings::python::PrintDoc</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1go_1adbaa72724d7f6265c12c4d205c1d78a9" compoundref="go_2print__doc_8hpp" startline="39" endline="70">mlpack::bindings::go::PrintDoc</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a0617e4b19f760fef6d14bbacd7545049" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::util::HyphenateString</definition>
        <argsstring>(const std::string &amp;str, int padding)</argsstring>
        <name>HyphenateString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>padding</declname>
        </param>
        <briefdescription>
<para>Hyphenate a string or split it onto multiple 80-character lines, with some amount of padding on each line. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used for option output.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to hyphenate (splits are on &apos; &apos;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>padding</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of padding on the left for each new line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/hyphenate_string.hpp" line="82" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/hyphenate_string.hpp" bodystart="82" bodyend="85"/>
        <references refid="namespacemlpack_1_1util_1a7b8929840f4891a96df1108873e1a1f9" compoundref="hyphenate__string_8hpp" startline="27" endline="73">HyphenateString</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a267aad01fc4c11f1a97cdb0710b89af4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mlpack::util::ReportIgnoredParam</definition>
        <argsstring>(const std::string &amp;paramName, const std::string &amp;reason)</argsstring>
        <name>ReportIgnoredParam</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>If the given parameter is passed, report that it is ignored, supplying a custom reason. </para>
        </briefdescription>
        <detaileddescription>
<para>The reason should specify, in short and clear terms, why the parameter is ignored. So, for example, the output may be similar to:</para>
<para><programlisting><codeline><highlight class="normal">--iterations<sp/>(-i)<sp/>ignored<sp/>because<sp/>&lt;reason&gt;.</highlight></codeline>
</programlisting></para>
<para>and in this case a good reason might be &quot;SGD is not being used as an
optimizer&quot;. Be sure that when you write the reason, the full message makes sense.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>paramName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of parameter to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>Reason that parameter is ignored, if it is passed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_checks.hpp" line="206" column="6" declfile="/home/aakash/mlpack/src/mlpack/core/util/param_checks.hpp" declline="206" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1ab244b3b942d525edebe5d0e08b056bf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mlpack::util::ReportIgnoredParam</definition>
        <argsstring>(const std::vector&lt; std::pair&lt; std::string, bool &gt;&gt; &amp;constraints, const std::string &amp;paramName)</argsstring>
        <name>ReportIgnoredParam</name>
        <param>
          <type>const std::vector&lt; std::pair&lt; std::string, bool &gt;&gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
<para>Report that a parameter is ignored, if each of the constraints given are satisfied. </para>
        </briefdescription>
        <detaileddescription>
<para>The constraints should be a set of string/bool pairs. If all of the constraints are true, and the given parameter in &apos;paramName&apos; is passed, then a warning will be issued noting that the parameter is ignored. The warning will go to <ref refid="classmlpack_1_1Log_1af8dd463e0db2840410fe6b1165429d5b" kindref="member">Log::Warn</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constraints</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of constraints. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paramName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of parameter to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_checks.hpp" line="186" column="6" declfile="/home/aakash/mlpack/src/mlpack/core/util/param_checks.hpp" declline="186" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1ae19bc258d5d2bc0f4c5ac52da8d2992e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mlpack::util::RequireAtLeastOnePassed</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;constraints, const bool fatal=true, const std::string &amp;customErrorMessage=&quot;&quot;)</argsstring>
        <name>RequireAtLeastOnePassed</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>fatal</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>customErrorMessage</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Require that at least one of the given parameters in the constraints set was passed to the <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> object; otherwise, issue a warning or fatal error, optionally with the given custom error message. </para>
        </briefdescription>
        <detaileddescription>
<para>This uses the correct binding type name for each parameter (i.e. &apos;<ndash/>parameter&apos; for CLI bindings, &apos;parameter&apos; for Python bindings).</para>
<para>This can be used with a set of only one constraint and the output is still sensible.</para>
<para>If you use a custom error message, be aware that the given output will be similar to, for example:</para>
<para><programlisting><codeline><highlight class="normal">Should<sp/>pass<sp/>one<sp/>of<sp/>&apos;--codes_file<sp/>(-c)&apos;,<sp/>&apos;--dictionary_file<sp/>(-d)&apos;,<sp/>or</highlight></codeline>
<codeline><highlight class="normal">&apos;--output_model_file<sp/>(-M)&apos;;<sp/>&lt;custom<sp/>error<sp/>message&gt;!</highlight></codeline>
</programlisting></para>
<para>so when you write your custom error message, be sure that the sentence makes sense. The custom error message should not have a capitalized first character and no ending punctuation (a &apos;!&apos; will be added by this function).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constraints</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters from which only one should be passed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fatal</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, output goes to <ref refid="classmlpack_1_1Log_1a5b72fcdfa48547883454fbc59be9caf1" kindref="member">Log::Fatal</ref> instead of <ref refid="classmlpack_1_1Log_1af8dd463e0db2840410fe6b1165429d5b" kindref="member">Log::Warn</ref> and an exception is thrown. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>customErrorMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>Error message to append. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_checks.hpp" line="83" column="6" declfile="/home/aakash/mlpack/src/mlpack/core/util/param_checks.hpp" declline="83" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a37ad0ecd07b5b006bf8135c2880779dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mlpack::util::RequireNoneOrAllPassed</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;constraints, const bool fatal=true, const std::string &amp;customErrorMessage=&quot;&quot;)</argsstring>
        <name>RequireNoneOrAllPassed</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>fatal</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>customErrorMessage</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Require that either none or all of the given parameters in the constraints set were passed to the <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> object; otherwise, issue a warning or fatal error, optionally with the given custom error message. </para>
        </briefdescription>
        <detaileddescription>
<para>This uses the correct binding type name for each parameter (i.e. &apos;<ndash/>parameter&apos; for CLI bindings, &apos;parameter&apos; for Python bindings).</para>
<para>If you use a custom error message, be aware that the given output will be similar to, for example:</para>
<para><programlisting><codeline><highlight class="normal">Must<sp/>pass<sp/>none<sp/>or<sp/>all<sp/>of<sp/>&apos;--codes_file<sp/>(-c)&apos;,<sp/>&apos;--dictionary_file<sp/>(-d)&apos;,<sp/>and</highlight></codeline>
<codeline><highlight class="normal">&apos;--output_model_file<sp/>(-M)&apos;;<sp/>&lt;custom<sp/>error<sp/>message&gt;!</highlight></codeline>
</programlisting></para>
<para>so when you write your custom error message, be sure that the sentence makes sense. The custom error message should not have a capitalized first character and no ending punctuation (a &apos;!&apos; will be added by this function).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constraints</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters of which none or all should be passed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fatal</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, output goes to <ref refid="classmlpack_1_1Log_1a5b72fcdfa48547883454fbc59be9caf1" kindref="member">Log::Fatal</ref> instead of <ref refid="classmlpack_1_1Log_1af8dd463e0db2840410fe6b1165429d5b" kindref="member">Log::Warn</ref> and an exception is thrown. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>customErrorMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>Error message to append. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_checks.hpp" line="113" column="6" declfile="/home/aakash/mlpack/src/mlpack/core/util/param_checks.hpp" declline="113" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1aa885d1e461234b74a7afaeffb9fa65e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mlpack::util::RequireOnlyOnePassed</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;constraints, const bool fatal=true, const std::string &amp;customErrorMessage=&quot;&quot;, const bool allowNone=false)</argsstring>
        <name>RequireOnlyOnePassed</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>fatal</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>customErrorMessage</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allowNone</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Require that only one of the given parameters in the constraints set was passed to the <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> object; otherwise, issue a warning or fatal error, optionally with the given custom error message. </para>
        </briefdescription>
        <detaileddescription>
<para>This uses the correct binding type name for each parameter (i.e. &apos;<ndash/>parameter&apos; for CLI bindings, &apos;parameter&apos; for Python bindings).</para>
<para>If you use a custom error message, be aware that the given output will be similar to, for example:</para>
<para><programlisting><codeline><highlight class="normal">Must<sp/>specify<sp/>one<sp/>of<sp/>&apos;--reference_file<sp/>(-r)&apos;<sp/>or<sp/>&apos;--input_model_file<sp/>(-m)&apos;;</highlight></codeline>
<codeline><highlight class="normal">&lt;custom<sp/>error<sp/>message<sp/>here&gt;!</highlight></codeline>
</programlisting></para>
<para>so when you write your custom error message, be sure that the sentence makes sense. The custom error message should not have a capitalized first character and no ending punctuation (a &apos;!&apos; will be added by this function).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constraints</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of parameters from which only one should be passed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fatal</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, output goes to <ref refid="classmlpack_1_1Log_1a5b72fcdfa48547883454fbc59be9caf1" kindref="member">Log::Fatal</ref> instead of <ref refid="classmlpack_1_1Log_1af8dd463e0db2840410fe6b1165429d5b" kindref="member">Log::Warn</ref> and an exception is thrown. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>customErrorMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>Error message to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allowNone</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, then no error message will be thrown if none of the parameters in the constraints were passed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_checks.hpp" line="49" column="6" declfile="/home/aakash/mlpack/src/mlpack/core/util/param_checks.hpp" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a103bcfe2b3a7641fe3f3c59b2436bb63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::util::RequireParamInSet</definition>
        <argsstring>(const std::string &amp;paramName, const std::vector&lt; T &gt; &amp;set, const bool fatal, const std::string &amp;errorMessage)</argsstring>
        <name>RequireParamInSet</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>set</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>fatal</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>errorMessage</declname>
        </param>
        <briefdescription>
<para>Require that a given parameter is in a set of allowable parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This is probably most useful with T = std::string. If fatal is true, then an exception is thrown. An error message is not optional and must be specified. The error message does <emphasis>not</emphasis> need to specify the values in the set; this function will already output them. So, for example, the output may be similar to:</para>
<para><programlisting><codeline><highlight class="normal">Invalid<sp/>value<sp/>of<sp/>&apos;--weak_learner<sp/>(-w)&apos;<sp/>specified<sp/>(&apos;something&apos;);<sp/>&lt;error</highlight></codeline>
<codeline><highlight class="normal">message&gt;;<sp/>must<sp/>be<sp/>one<sp/>of<sp/>&apos;decision_stump&apos;,<sp/>or<sp/>&apos;perceptron&apos;!</highlight></codeline>
</programlisting></para>
<para>so when you write the error message, make sure that the message makes sense. For example, in the message above, a good error message might be &quot;unknown
weak learner type&quot;.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>paramName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of parameter to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of valid values for parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fatal</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, an exception is thrown and output goes to <ref refid="classmlpack_1_1Log_1a5b72fcdfa48547883454fbc59be9caf1" kindref="member">Log::Fatal</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errorMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>Error message to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_checks.hpp" line="142" column="6" declfile="/home/aakash/mlpack/src/mlpack/core/util/param_checks.hpp" declline="142" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1ae93b13d8041246b4d1d697d7f00155ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::util::RequireParamValue</definition>
        <argsstring>(const std::string &amp;paramName, const std::function&lt; bool(T)&gt; &amp;conditional, const bool fatal, const std::string &amp;errorMessage)</argsstring>
        <name>RequireParamValue</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <param>
          <type>const std::function&lt; bool(T)&gt; &amp;</type>
          <declname>conditional</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>fatal</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>errorMessage</declname>
        </param>
        <briefdescription>
<para>Require that a given parameter satisfies the given conditional function. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful for, e.g., checking that a given parameter is greater than 0. If fatal is true, then an exception is thrown. An error message is not optional and must be specified. The error message should specify, in clear terms, what the value of the parameter <emphasis>should</emphasis> be. So, for example, the output may be similar to:</para>
<para><programlisting><codeline><highlight class="normal">Invalid<sp/>value<sp/>of<sp/>&apos;--iterations<sp/>(-i)&apos;<sp/>specified<sp/>(-1);<sp/>&lt;error<sp/>message&gt;!</highlight></codeline>
</programlisting></para>
<para>and in this case a good error message might be &quot;number of iterations must be
positive&quot;. Be sure that when you write the error message, the message makes sense.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of parameter to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>paramName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of parameter to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conditional</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to use to check parameter value; should return &apos;true&apos; if the parameter value is okay. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fatal</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, an exception is thrown and output goes to <ref refid="classmlpack_1_1Log_1a5b72fcdfa48547883454fbc59be9caf1" kindref="member">Log::Fatal</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errorMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>Error message to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_checks.hpp" line="171" column="6" declfile="/home/aakash/mlpack/src/mlpack/core/util/param_checks.hpp" declline="171" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1aa51cc50fad843f33d826c5bd80711ccf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ResetTimers</definition>
        <argsstring>()</argsstring>
        <name>ResetTimers</name>
        <briefdescription>
<para>Reset the status of all timers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" line="84" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" bodystart="84" bodyend="88"/>
        <references refid="classmlpack_1_1IO_1aacf8da2c1644e932b3cbd46703a3d889">IO::GetSingleton</references>
        <references refid="classmlpack_1_1Timers_1a372de693ad40b3f42839c8ec6ac845f4">Timers::Reset</references>
        <references refid="classmlpack_1_1IO_1aca4a039cfb9a63fbe2d98febc7ae337b" compoundref="io_8hpp" startline="329">IO::timer</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a997283ede9320ae143e5cf3314efe0a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::util::SetInputParam</definition>
        <argsstring>(const std::string &amp;name, T &amp;&amp;value)</argsstring>
        <name>SetInputParam</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Utility function that is used in binding tests for setting a parameter and marking it as passed; it uses copy semantics for lvalues and move semantics for rvalues. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of parameter to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set parameter to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/tests/main_tests/test_helper.hpp" line="29" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/tests/main_tests/test_helper.hpp" bodystart="29" bodyend="34"/>
        <references refid="classmlpack_1_1IO_1a12aa08b1280e9b33864a9845706e0e59">IO::SetPassed</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a1cbcba9e3ae417f6482ff0dd78094289" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SetParam</definition>
        <argsstring>(const std::string &amp;identifier, T &amp;value)</argsstring>
        <name>SetParam</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the parameter to the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set parameter to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function exists to work around Cython&apos;s lack of support for lvalue references.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set parameter to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" line="29" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1aedb2977a40b16aca2abcef35412b235f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::util::SetParamPtr</definition>
        <argsstring>(const std::string &amp;identifier, T *value)</argsstring>
        <name>SetParamPtr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the parameter to the given value, given that the type is a pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set parameter to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" line="41" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" bodystart="41" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a8049b2ec848ae98373bfdcb4c5a05554" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::util::SetParamPtr</definition>
        <argsstring>(const std::string &amp;identifier, T *value, const bool copy)</argsstring>
        <name>SetParamPtr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
<para>Set the parameter to the given value, given that the type is a pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function exists to work around both Cython&apos;s lack of support for lvalue references and also its seeming lack of support for template pointer types.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set parameter to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the object should be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/python/mlpack/io_util.hpp" line="48" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/python/mlpack/io_util.hpp" bodystart="48" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a9e27a239e91e2b00add573b22aa6c966" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::util::SetParamWithInfo</definition>
        <argsstring>(const std::string &amp;identifier, T &amp;matrix, const bool *dims)</argsstring>
        <name>SetParamWithInfo</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const bool *</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
<para>Set the parameter (which is a matrix/DatasetInfo tuple) to the given value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/python/mlpack/io_util.hpp" line="59" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/python/mlpack/io_util.hpp" bodystart="59" bodyend="102"/>
        <references refid="namespacemlpack_1_1data_1aa7714fa0b7efc7b31cbda21da607c5b6a2992a7ab833605792145cd40762644c7" compoundref="datatype_8hpp" startline="27">mlpack::data::categorical</references>
        <references refid="classmlpack_1_1data_1_1DatasetMapper_1aa262641cb3ba3a0b2583c37e2863ab49">DatasetMapper&lt; PolicyType, InputType &gt;::MapString</references>
        <references refid="classmlpack_1_1data_1_1DatasetMapper_1af46c276f8b3c130454e23447bcb959e4">DatasetMapper&lt; PolicyType, InputType &gt;::Type</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a7eb84b8e75a14594bd8b89733112378d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::util::StripType</definition>
        <argsstring>(std::string cppType)</argsstring>
        <name>StripType</name>
        <param>
          <type>std::string</type>
          <declname>cppType</declname>
        </param>
        <briefdescription>
<para>Given a C++ type name, turn it into something that has no special characters that can simply be printed. </para>
        </briefdescription>
        <detaileddescription>
<para>This is similar to but not identical to <ref refid="namespacemlpack_1_1util_1a7eb84b8e75a14594bd8b89733112378d" kindref="member">mlpack::util::StripType()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cppType</parametername>
</parameternamelist>
<parameterdescription>
<para>C++ type as a string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Stripped type with no special characters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/util/strip_type.hpp" line="27" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/util/strip_type.hpp" bodystart="27" bodyend="42"/>
        <referencedby refid="namespacemlpack_1_1bindings_1_1julia_1aa9fe68e1da9daec9372965162d8bad94" compoundref="get__julia__type_8hpp" startline="137" endline="149">mlpack::bindings::julia::GetJuliaType</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1r_1aec8bb71884c43046e6187c272200d0be" compoundref="get__r__type_8hpp" startline="130" endline="136">mlpack::bindings::r::GetRType</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1r_1ac27fea289c602b0e9df55fbf038fe6b8" compoundref="R_2print__input__processing_8hpp" startline="156" endline="187">mlpack::bindings::r::PrintInputProcessing</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1julia_1a542a7f3046a7acf108d591facc8b2e02" compoundref="print__model__type__import_8hpp" startline="49" endline="59">mlpack::bindings::julia::PrintModelTypeImport</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1julia_1a15f2fbf7bd8137c68337e2dc4d353f56" compoundref="print__param__defn_8hpp" startline="51" endline="157">mlpack::bindings::julia::PrintParamDefn</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1r_1ac9dfc0f41352071820158a5a4eb77748" compoundref="print__serialize__util_8hpp" startline="49" endline="67">mlpack::bindings::r::PrintSerializeUtil</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1util_1a17299c3035aca77759743f241cefd4c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::util::ToLower</definition>
        <argsstring>(const std::string &amp;input)</argsstring>
        <name>ToLower</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Convert a string to lowercase letters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/to_lower.hpp" line="23" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/to_lower.hpp" bodystart="23" bodyend="29"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/bindings/go/mlpack/capi/io_util.hpp" line="20" column="1"/>
  </compounddef>
</doxygen>
