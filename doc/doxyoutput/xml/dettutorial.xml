<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="dettutorial" kind="page">
    <compoundname>dettutorial</compoundname>
    <title>Density Estimation Tree (DET) tutorial</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="dettutorial_1intro_det_tut">
<title>Introduction</title>
<para>DETs perform the unsupervised task of density estimation using decision trees. Using a trained density estimation tree (DET), the density at any particular point can be estimated very quickly (O(log n) time, where n is the number of points the tree is built on).</para>
<para>The details of this work is presented in the following paper: <programlisting><codeline><highlight class="normal">@inproceedings{ram2011density,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title={Density<sp/>estimation<sp/>trees},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author={Ram,<sp/>P.<sp/>and<sp/>Gray,<sp/>A.G.},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>booktitle={Proceedings<sp/>of<sp/>the<sp/>17th<sp/>ACM<sp/>SIGKDD<sp/>International<sp/>Conference<sp/>on</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Knowledge<sp/>Discovery<sp/>and<sp/>Data<sp/>Mining},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pages={627--635},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year={2011},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>organization={ACM}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>mlpack</bold> provides:</para>
<para><itemizedlist>
<listitem><para>a <ref refid="dettutorial_1cli_det_tut" kindref="member">simple command-line executable</ref> to perform density estimation and related analyses using DETs</para>
</listitem><listitem><para>a <ref refid="dettutorial_1dtree_det_tut" kindref="member">generic C++ class (DTree)</ref> which provides various functionality for the DETs</para>
</listitem><listitem><para>a set of functions in the namespace <ref refid="dettutorial_1dtutils_det_tut" kindref="member">mlpack::det</ref> to perform cross-validation for the task of density estimation with DETs</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="dettutorial_1toc_det_tut">
<title>Table of Contents</title>
<para>A list of all the sections this tutorial contains.</para>
<para><itemizedlist>
<listitem><para><ref refid="dettutorial_1intro_det_tut" kindref="member">Introduction</ref></para>
</listitem><listitem><para><ref refid="dettutorial_1toc_det_tut" kindref="member">Table of Contents</ref></para>
</listitem><listitem><para><ref refid="dettutorial_1cli_det_tut" kindref="member">Command-Line mlpack_det</ref><itemizedlist>
<listitem><para><ref refid="dettutorial_1cli_ex1_de_tut" kindref="member">Plain-vanilla density estimation</ref></para>
</listitem><listitem><para><ref refid="dettutorial_1cli_ex2_de_test_tut" kindref="member">Estimation on a test set</ref></para>
</listitem><listitem><para><ref refid="dettutorial_1cli_ex4_de_vi_tut" kindref="member">Computing the variable importance</ref></para>
</listitem><listitem><para><ref refid="dettutorial_1cli_ex6_de_save" kindref="member">Saving trained DETs</ref></para>
</listitem><listitem><para><ref refid="dettutorial_1cli_ex7_de_load" kindref="member">Loading trained DETs</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="dettutorial_1dtree_det_tut" kindref="member">The &apos;DTree&apos; class</ref><itemizedlist>
<listitem><para><ref refid="dettutorial_1dtree_pub_func_det_tut" kindref="member">Public Functions</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="dettutorial_1dtutils_det_tut" kindref="member">&apos;namespace mlpack::det&apos;</ref><itemizedlist>
<listitem><para><ref refid="dettutorial_1dtutils_util_funcs" kindref="member">Utility Functions</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="dettutorial_1further_doc_det_tut" kindref="member">Further Documentation</ref></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="dettutorial_1cli_det_tut">
<title>Command-Line mlpack_det</title>
<para>The command line arguments of this program can be viewed using the <computeroutput>-h</computeroutput> option:</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_det<sp/>-h</highlight></codeline>
<codeline><highlight class="normal">Density<sp/>Estimation<sp/>With<sp/>Density<sp/>Estimation<sp/>Trees</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>program<sp/>performs<sp/>a<sp/>number<sp/>of<sp/>functions<sp/>related<sp/>to<sp/>Density<sp/>Estimation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Trees.<sp/><sp/>The<sp/>optimal<sp/>Density<sp/>Estimation<sp/>Tree<sp/>(DET)<sp/>can<sp/>be<sp/>trained<sp/>on<sp/>a<sp/>set<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data<sp/>(specified<sp/>by<sp/>--training_file<sp/>or<sp/>-t)<sp/>using<sp/>cross-validation<sp/>(with<sp/>number</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>of<sp/>folds<sp/>specified<sp/>by<sp/>--folds).<sp/><sp/>This<sp/>trained<sp/>density<sp/>estimation<sp/>tree<sp/>may<sp/>then</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>be<sp/>saved<sp/>to<sp/>a<sp/>model<sp/>file<sp/>with<sp/>the<sp/>--output_model_file<sp/>(-M)<sp/>option.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>The<sp/>variable<sp/>importances<sp/>of<sp/>each<sp/>dimension<sp/>may<sp/>be<sp/>saved<sp/>with<sp/>the<sp/>--vi_file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>(-i)<sp/>option,<sp/>and<sp/>the<sp/>density<sp/>estimates<sp/>on<sp/>each<sp/>training<sp/>point<sp/>may<sp/>be<sp/>saved<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>the<sp/>file<sp/>specified<sp/>with<sp/>the<sp/>--training_set_estimates_file<sp/>(-e)<sp/>option.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>program<sp/>also<sp/>can<sp/>provide<sp/>density<sp/>estimates<sp/>for<sp/>a<sp/>set<sp/>of<sp/>test<sp/>points,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>specified<sp/>in<sp/>the<sp/>--test_file<sp/>(-T)<sp/>file.<sp/><sp/>The<sp/>density<sp/>estimation<sp/>tree<sp/>used<sp/>for</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this<sp/>task<sp/>will<sp/>be<sp/>the<sp/>tree<sp/>that<sp/>was<sp/>trained<sp/>on<sp/>the<sp/>given<sp/>training<sp/>points,<sp/>or<sp/>a</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tree<sp/>stored<sp/>in<sp/>the<sp/>file<sp/>given<sp/>with<sp/>the<sp/>--input_model_file<sp/>(-m)<sp/>parameter.<sp/><sp/>The</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>density<sp/>estimates<sp/>for<sp/>the<sp/>test<sp/>points<sp/>may<sp/>be<sp/>saved<sp/>into<sp/>the<sp/>file<sp/>specified</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>with<sp/>the<sp/>--test_set_estimates_file<sp/>(-E)<sp/>option.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Options:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>--folds<sp/>(-f)<sp/>[int]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>folds<sp/>of<sp/>cross-validation<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perform<sp/>for<sp/>the<sp/>estimation<sp/>(0<sp/>is<sp/>LOOCV)<sp/><sp/>Default</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>10.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--help<sp/>(-h)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default<sp/>help<sp/>info.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--info<sp/>[string]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Get<sp/>help<sp/>on<sp/>a<sp/>specific<sp/>module<sp/>or<sp/>option.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default<sp/>value<sp/>&apos;&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--input_model_file<sp/>(-m)<sp/>[string]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>containing<sp/>already<sp/>trained<sp/>density</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>estimation<sp/>tree.<sp/><sp/>Default<sp/>value<sp/>&apos;&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--max_leaf_size<sp/>(-L)<sp/>[int]<sp/><sp/><sp/><sp/>The<sp/>maximum<sp/>size<sp/>of<sp/>a<sp/>leaf<sp/>in<sp/>the<sp/>unpruned,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fully<sp/>grown<sp/>DET.<sp/><sp/>Default<sp/>value<sp/>10.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--min_leaf_size<sp/>(-l)<sp/>[int]<sp/><sp/><sp/><sp/>The<sp/>minimum<sp/>size<sp/>of<sp/>a<sp/>leaf<sp/>in<sp/>the<sp/>unpruned,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fully<sp/>grown<sp/>DET.<sp/><sp/>Default<sp/>value<sp/>5.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--output_model_file<sp/>(-M)<sp/>[string]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>to<sp/>save<sp/>trained<sp/>density<sp/>estimation<sp/>tree<sp/>to.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default<sp/>value<sp/>&apos;&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--test_file<sp/>(-T)<sp/>[string]<sp/><sp/><sp/><sp/><sp/>A<sp/>set<sp/>of<sp/>test<sp/>points<sp/>to<sp/>estimate<sp/>the<sp/>density<sp/>of.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default<sp/>value<sp/>&apos;&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--test_set_estimates_file<sp/>(-E)<sp/>[string]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>file<sp/>in<sp/>which<sp/>to<sp/>output<sp/>the<sp/>estimates<sp/>on<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>set<sp/>from<sp/>the<sp/>final<sp/>optimally<sp/>pruned<sp/>tree.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default<sp/>value<sp/>&apos;&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--training_file<sp/>(-t)<sp/>[string]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>data<sp/>set<sp/>on<sp/>which<sp/>to<sp/>build<sp/>a<sp/>density</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>estimation<sp/>tree.<sp/><sp/>Default<sp/>value<sp/>&apos;&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--training_set_estimates_file<sp/>(-e)<sp/>[string]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>file<sp/>in<sp/>which<sp/>to<sp/>output<sp/>the<sp/>density</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>estimates<sp/>on<sp/>the<sp/>training<sp/>set<sp/>from<sp/>the<sp/>final</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimally<sp/>pruned<sp/>tree.<sp/><sp/>Default<sp/>value<sp/>&apos;&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--verbose<sp/>(-v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Display<sp/>informational<sp/>messages<sp/>and<sp/>the<sp/>full<sp/>list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>parameters<sp/>and<sp/>timers<sp/>at<sp/>the<sp/>end<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execution.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--version<sp/>(-V)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Display<sp/>the<sp/>version<sp/>of<sp/>mlpack.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--vi_file<sp/>(-i)<sp/>[string]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>file<sp/>to<sp/>output<sp/>the<sp/>variable<sp/>importance</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>for<sp/>each<sp/>feature.<sp/><sp/>Default<sp/>value<sp/>&apos;&apos;.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>further<sp/>information,<sp/>including<sp/>relevant<sp/>papers,<sp/>citations,<sp/>and<sp/>theory,</highlight></codeline>
<codeline><highlight class="normal">consult<sp/>the<sp/>documentation<sp/>found<sp/>at<sp/>http://www.mlpack.org<sp/>or<sp/>included<sp/>with<sp/>your</highlight></codeline>
<codeline><highlight class="normal">distribution<sp/>of<sp/>mlpack.</highlight></codeline>
</programlisting></para>
<sect2 id="dettutorial_1cli_ex1_de_tut">
<title>Plain-vanilla density estimation</title>
<para>We can just train a DET on the provided data set <emphasis>S</emphasis>. Like all datasets <bold>mlpack</bold> uses, the data should be row-major (<bold>mlpack</bold> transposes data when it is loaded; internally, the data is column-major <ndash/> see <ref refid="matrices" kindref="compound">this page</ref> for more information).</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_det<sp/>-t<sp/>dataset.csv<sp/>-v</highlight></codeline>
</programlisting></para>
<para>By default, <computeroutput>mlpack_det</computeroutput> performs 10-fold cross-validation (using the <formula id="190">$\alpha$</formula>-pruning regularization for decision trees). To perform LOOCV (leave-one-out cross-validation), which can provide better results but will take longer, use the following command:</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_det<sp/>-t<sp/>dataset.csv<sp/>-f<sp/>0<sp/>-v</highlight></codeline>
</programlisting></para>
<para>To perform k-fold crossvalidation, use <computeroutput>-f</computeroutput> <computeroutput>k</computeroutput> (or <computeroutput><ndash/>folds</computeroutput> <computeroutput>k</computeroutput>). There are certain other options available for training. For example, in the construction of the initial tree, you can specify the maximum and minimum leaf sizes. By default, they are 10 and 5 respectively; you can set them using the <computeroutput>-M</computeroutput> (<computeroutput><ndash/>max_leaf_size</computeroutput>) and the <computeroutput>-N</computeroutput> (<computeroutput><ndash/>min_leaf_size</computeroutput>) options.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_det<sp/>-t<sp/>dataset.csv<sp/>-M<sp/>20<sp/>-N<sp/>10</highlight></codeline>
</programlisting></para>
<para>In case you want to output the density estimates at the points in the training set, use the <computeroutput>-e</computeroutput> (<computeroutput><ndash/>training_set_estimates_file</computeroutput>) option to specify the output file to which the estimates will be saved. The first line in density_estimates.txt will correspond to the density at the first point in the training set. Note that the logarithm of the density estimates are given, which allows smaller estimates to be saved.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_det<sp/>-t<sp/>dataset.csv<sp/>-e<sp/>density_estimates.txt<sp/>-v</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="dettutorial_1cli_ex2_de_test_tut">
<title>Estimation on a test set</title>
<para>Often, it is useful to train a density estimation tree on a training set and then obtain density estimates from the learned estimator for a separate set of test points. The <computeroutput>-T</computeroutput> (<computeroutput><ndash/>test_file</computeroutput>) option allows specification of a set of test points, and the <computeroutput>-E</computeroutput> (<computeroutput><ndash/>test_set_estimates_file</computeroutput>) option allows specification of the file into which the test set estimates are saved. Note that the logarithm of the density estimates are saved; this allows smaller values to be saved.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_det<sp/>-t<sp/>dataset.csv<sp/>-T<sp/>test_points.csv<sp/>-E<sp/>test_density_estimates.txt<sp/>-v</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="dettutorial_1cli_ex4_de_vi_tut">
<title>Computing the variable importance</title>
<para>The variable importance (with respect to density estimation) of the different features in the data set can be obtained by using the <computeroutput>-i</computeroutput> (<computeroutput><ndash/>vi_file</computeroutput> ) option. This outputs the absolute (as opposed to relative) variable importance of the all the features into the specified file.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_det<sp/>-t<sp/>dataset.csv<sp/>-i<sp/>variable_importance.txt<sp/>-v</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="dettutorial_1cli_ex6_de_save">
<title>Saving trained DETs</title>
<para>The <computeroutput>mlpack_det</computeroutput> program is capable of saving a trained DET to a file for later usage. The <computeroutput><ndash/>output_model_file</computeroutput> or <computeroutput>-M</computeroutput> option allows specification of the file to save to. In the example below, a DET trained on <computeroutput>dataset.csv</computeroutput> is saved to the file <computeroutput>det.xml</computeroutput>.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_det<sp/>-t<sp/>dataset.csv<sp/>-M<sp/>det.xml<sp/>-v</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="dettutorial_1cli_ex7_de_load">
<title>Loading trained DETs</title>
<para>A saved DET can be used to perform any of the functionality in the examples above. A saved DET is loaded with the <computeroutput><ndash/>input_model_file</computeroutput> or <computeroutput>-m</computeroutput> option. The example below loads a saved DET from <computeroutput>det.xml</computeroutput> and outputs density estimates on the dataset <computeroutput>test_dataset.csv</computeroutput> into the file <computeroutput>estimates.csv</computeroutput>.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_det<sp/>-m<sp/>det.xml<sp/>-T<sp/>test_dataset.csv<sp/>-E<sp/>estimates.csv<sp/>-v</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="dettutorial_1dtree_det_tut">
<title>The &apos;DTree&apos; class</title>
<para>This class implements density estimation trees. Below is a simple example which initializes a density estimation tree.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/det/dtree.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::det;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>dataset<sp/>matrix,<sp/>on<sp/>which<sp/>to<sp/>learn<sp/>the<sp/>density<sp/>estimation<sp/>tree.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::Mat&lt;float&gt;<sp/>data;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>tree.<sp/><sp/>This<sp/>function<sp/>also<sp/>creates<sp/>and<sp/>saves<sp/>the<sp/>bounding<sp/>box</highlight></codeline>
<codeline><highlight class="normal">//<sp/>of<sp/>the<sp/>data.<sp/><sp/>Note<sp/>that<sp/>it<sp/>does<sp/>not<sp/>actually<sp/>build<sp/>the<sp/>tree.</highlight></codeline>
<codeline><highlight class="normal">DTree&lt;&gt;<sp/>det(data);</highlight></codeline>
</programlisting></para>
<sect2 id="dettutorial_1dtree_pub_func_det_tut">
<title>Public Functions</title>
<para>The function <computeroutput>Grow()</computeroutput> greedily grows the tree, adding new points to the tree. Note that the points in the dataset will be reordered. This should only be run on a tree which has not already been built. In general, it is more useful to use the <computeroutput><ref refid="namespacemlpack_1_1det_1a4a84945ed0d2a629c86f8538e6e7090c" kindref="member">Trainer()</ref></computeroutput> function found in <ref refid="dettutorial_1dtutils_det_tut" kindref="member">&apos;namespace mlpack::det&apos;</ref>.</para>
<para><programlisting><codeline><highlight class="normal">//<sp/>This<sp/>keeps<sp/>track<sp/>of<sp/>the<sp/>data<sp/>during<sp/>the<sp/>shuffle<sp/>that<sp/>occurs<sp/>while<sp/>growing<sp/>the</highlight></codeline>
<codeline><highlight class="normal">//<sp/>tree.</highlight></codeline>
<codeline><highlight class="normal">arma::Col&lt;size_t&gt;<sp/>oldFromNew(data.n_cols);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>data.n_cols;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>oldFromNew[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>function<sp/>grows<sp/>the<sp/>tree<sp/>down<sp/>to<sp/>the<sp/>leaves.<sp/>It<sp/>returns<sp/>the<sp/>current</highlight></codeline>
<codeline><highlight class="normal">//<sp/>minimum<sp/>value<sp/>of<sp/>the<sp/>regularization<sp/>parameter<sp/>alpha.</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/>maxLeafSize<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/>minLeafSize<sp/>=<sp/>5;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">double<sp/>alpha<sp/>=<sp/>det.Grow(data,<sp/>oldFromNew,<sp/>false,<sp/>maxLeafSize,<sp/>minLeafSize);</highlight></codeline>
</programlisting></para>
<para>Note that the alternate volume regularization should not be used (see ticket #238).</para>
<para>To estimate the density at a given query point, use the following code. Note that the logarithm of the density is returned.</para>
<para><programlisting><codeline><highlight class="normal">//<sp/>For<sp/>a<sp/>given<sp/>query,<sp/>you<sp/>can<sp/>obtain<sp/>the<sp/>density<sp/>estimate.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::Col&lt;float&gt;<sp/>query;</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>DTree*<sp/>det;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>estimate<sp/>=<sp/>det-&gt;ComputeValue(&amp;query);</highlight></codeline>
</programlisting></para>
<para>Computing the <bold>variable</bold> <bold>importance</bold> of each feature for the given DET.</para>
<para><programlisting><codeline><highlight class="normal">//<sp/>The<sp/>data<sp/>matrix<sp/>and<sp/>density<sp/>estimation<sp/>tree.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>data;</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>DTree*<sp/>det;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>variable<sp/>importances<sp/>will<sp/>be<sp/>saved<sp/>into<sp/>this<sp/>vector.</highlight></codeline>
<codeline><highlight class="normal">arma::Col&lt;double&gt;<sp/>varImps;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>You<sp/>can<sp/>obtain<sp/>the<sp/>variable<sp/>importance<sp/>from<sp/>the<sp/>current<sp/>tree.</highlight></codeline>
<codeline><highlight class="normal">det-&gt;ComputeVariableImportance(varImps);</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="dettutorial_1dtutils_det_tut">
<title>&apos;namespace mlpack::det&apos;</title>
<para>The functions in this namespace allows the user to perform tasks with the &apos;DTree&apos; class. Most importantly, the <computeroutput><ref refid="namespacemlpack_1_1det_1a4a84945ed0d2a629c86f8538e6e7090c" kindref="member">Trainer()</ref></computeroutput> method allows the full training of a density estimation tree with cross-validation. There are also utility functions which allow printing of leaf membership and variable importance.</para>
<sect2 id="dettutorial_1dtutils_util_funcs">
<title>Utility Functions</title>
<para>The code below details how to train a density estimation tree with cross-validation.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/det/dt_utils.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::det;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>dataset<sp/>matrix,<sp/>on<sp/>which<sp/>to<sp/>learn<sp/>the<sp/>density<sp/>estimation<sp/>tree.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::Mat&lt;float&gt;<sp/>data;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>number<sp/>of<sp/>folds<sp/>for<sp/>cross-validation.</highlight></codeline>
<codeline><highlight class="normal">const<sp/>size_t<sp/>folds<sp/>=<sp/>10;<sp/>//<sp/>Set<sp/>folds<sp/>=<sp/>0<sp/>for<sp/>LOOCV.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>size_t<sp/>maxLeafSize<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>size_t<sp/>minLeafSize<sp/>=<sp/>5;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Train<sp/>the<sp/>density<sp/>estimation<sp/>tree<sp/>with<sp/>cross-validation.</highlight></codeline>
<codeline><highlight class="normal">DTree&lt;&gt;*<sp/>dtree_opt<sp/>=<sp/>Trainer(data,<sp/>folds,<sp/>false,<sp/>maxLeafSize,<sp/>minLeafSize);</highlight></codeline>
</programlisting></para>
<para>Note that the alternate volume regularization should be set to false because it has known bugs (see #238).</para>
<para>To print the class membership of leaves in the tree into a file, see the following code.</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>arma::Mat&lt;size_t&gt;<sp/>labels;</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>DTree*<sp/>det;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>size_t<sp/>numClasses<sp/>=<sp/>3;<sp/>//<sp/>The<sp/>number<sp/>of<sp/>classes<sp/>must<sp/>be<sp/>known.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">extern<sp/>string<sp/>leafClassMembershipFile;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PrintLeafMembership(det,<sp/>data,<sp/>labels,<sp/>numClasses,<sp/>leafClassMembershipFile);</highlight></codeline>
</programlisting></para>
<para>Note that you can find the number of classes with <computeroutput>max(labels)</computeroutput> <computeroutput>+</computeroutput> <computeroutput>1</computeroutput>. The variable importance can also be printed to a file in a similar manner.</para>
<para><programlisting><codeline><highlight class="normal">extern<sp/>DTree*<sp/>det;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">extern<sp/>string<sp/>variableImportanceFile;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>size_t<sp/>numFeatures<sp/>=<sp/>data.n_rows;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PrintVariableImportance(det,<sp/>numFeatures,<sp/>variableImportanceFile);</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="dettutorial_1further_doc_det_tut">
<title>Further Documentation</title>
<para>For further documentation on the DTree class, consult the <ref refid="classmlpack_1_1det_1_1DTree" kindref="compound">complete API documentation</ref>. </para>
</sect1>
    </detaileddescription>
    <location file="/home/aakash/mlpack/doc/tutorials/det/det.txt"/>
  </compounddef>
</doxygen>
