<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="util_2strip__type_8hpp" kind="file" language="C++">
    <compoundname>strip_type.hpp</compoundname>
    <includedby refid="print__model__type__import_8hpp" local="no">/home/aakash/mlpack/src/mlpack/bindings/julia/print_model_type_import.hpp</includedby>
    <includedby refid="print__param__defn_8hpp" local="no">/home/aakash/mlpack/src/mlpack/bindings/julia/print_param_defn.hpp</includedby>
    <includedby refid="get__r__type_8hpp" local="no">/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp</includedby>
    <includedby refid="R_2print__input__processing_8hpp" local="no">/home/aakash/mlpack/src/mlpack/bindings/R/print_input_processing.hpp</includedby>
    <includedby refid="print__serialize__util_8hpp" local="no">/home/aakash/mlpack/src/mlpack/bindings/R/print_serialize_util.hpp</includedby>
    <invincdepgraph>
      <node id="8">
        <label>/home/aakash/mlpack/src/mlpack/bindings/R/print_input_processing.hpp</label>
        <link refid="R_2print__input__processing_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/aakash/mlpack/src/mlpack/bindings/util/strip_type.hpp</label>
        <link refid="util_2strip__type_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp</label>
        <link refid="get__r__type_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/aakash/mlpack/src/mlpack/bindings/julia/print_model_type_import.hpp</label>
        <link refid="print__model__type__import_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/aakash/mlpack/src/mlpack/bindings/julia/julia_option.hpp</label>
        <link refid="julia__option_8hpp"/>
      </node>
      <node id="7">
        <label>/home/aakash/mlpack/src/mlpack/bindings/R/R_option.hpp</label>
        <link refid="R__option_8hpp"/>
      </node>
      <node id="9">
        <label>/home/aakash/mlpack/src/mlpack/bindings/R/print_serialize_util.hpp</label>
        <link refid="print__serialize__util_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/aakash/mlpack/src/mlpack/bindings/julia/print_param_defn.hpp</label>
        <link refid="print__param__defn_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/aakash/mlpack/src/mlpack/bindings/R/print_doc.hpp</label>
        <link refid="R_2print__doc_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1util">mlpack::util</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Ryan Curtin</para>
</simplesect>
Given a C++ type name, turn it into something that has no special characters that can simply be printed.</para>
<para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MLPACK_BINDINGS_UTIL_STRIP_TYPE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_BINDINGS_UTIL_STRIP_TYPE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="namespacemlpack_1_1util_1a7eb84b8e75a14594bd8b89733112378d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacemlpack_1_1util_1a7eb84b8e75a14594bd8b89733112378d" kindref="member">StripType</ref>(std::string<sp/>cppType)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Basically<sp/>what<sp/>we<sp/>need<sp/>to<sp/>do<sp/>is<sp/>strip<sp/>any<sp/>&apos;&lt;&apos;<sp/>(template<sp/>bits)<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>type.<sp/><sp/>We&apos;ll<sp/>try<sp/>first<sp/>by<sp/>removing<sp/>any<sp/>instances<sp/>of<sp/>&lt;&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>loc<sp/>=<sp/>cppType.find(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(loc<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>cppType.replace(loc,<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>just<sp/>replace<sp/>any<sp/>invalid<sp/>characters<sp/>with<sp/>valid<sp/>&apos;_&apos;<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>std::replace(cppType.begin(),<sp/>cppType.end(),<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>std::replace(cppType.begin(),<sp/>cppType.end(),<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>std::replace(cppType.begin(),<sp/>cppType.end(),<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>std::replace(cppType.begin(),<sp/>cppType.end(),<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cppType;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>util</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/bindings/util/strip_type.hpp"/>
  </compounddef>
</doxygen>
