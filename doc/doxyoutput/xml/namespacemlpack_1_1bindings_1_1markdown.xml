<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacemlpack_1_1bindings_1_1markdown" kind="namespace" language="C++">
    <compoundname>mlpack::bindings::markdown</compoundname>
    <innerclass refid="classmlpack_1_1bindings_1_1markdown_1_1BindingInfo" prot="public">mlpack::bindings::markdown::BindingInfo</innerclass>
    <innerclass refid="classmlpack_1_1bindings_1_1markdown_1_1ExampleWrapper" prot="public">mlpack::bindings::markdown::ExampleWrapper</innerclass>
    <innerclass refid="classmlpack_1_1bindings_1_1markdown_1_1LongDescriptionWrapper" prot="public">mlpack::bindings::markdown::LongDescriptionWrapper</innerclass>
    <innerclass refid="classmlpack_1_1bindings_1_1markdown_1_1MDOption" prot="public">mlpack::bindings::markdown::MDOption</innerclass>
    <innerclass refid="classmlpack_1_1bindings_1_1markdown_1_1ProgramNameWrapper" prot="public">mlpack::bindings::markdown::ProgramNameWrapper</innerclass>
    <innerclass refid="classmlpack_1_1bindings_1_1markdown_1_1SeeAlsoWrapper" prot="public">mlpack::bindings::markdown::SeeAlsoWrapper</innerclass>
    <innerclass refid="classmlpack_1_1bindings_1_1markdown_1_1ShortDescriptionWrapper" prot="public">mlpack::bindings::markdown::ShortDescriptionWrapper</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a9261e5c9ff71d4d97f4de7f6f79a8af4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::markdown::DefaultParam</definition>
        <argsstring>(util::ParamData &amp;data, const void *, void *output)</argsstring>
        <name>DefaultParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Print the default value of a parameter into the output string. </para>
        </briefdescription>
        <detaileddescription>
<para>The type printed depends on the current setting of <ref refid="classmlpack_1_1bindings_1_1markdown_1_1BindingInfo_1a6ddf4e79a94a2a67a7539583f77d1081" kindref="member">BindingInfo::Language()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/default_param.hpp" line="34" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/default_param.hpp" bodystart="34" bodyend="68"/>
        <references refid="classmlpack_1_1bindings_1_1markdown_1_1BindingInfo_1a6ddf4e79a94a2a67a7539583f77d1081">BindingInfo::Language</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1ad06f67ffd9f7e6de162c5b20b6f6d797" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetBindingName</definition>
        <argsstring>(const std::string &amp;bindingName)</argsstring>
        <name>GetBindingName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bindingName</declname>
        </param>
        <briefdescription>
<para>Given the name of the binding, print the name for the current language (as given by <ref refid="classmlpack_1_1bindings_1_1markdown_1_1BindingInfo" kindref="compound">BindingInfo</ref>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="27" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="27" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1afb163baf9126234890e53dbc602c823a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetBindingName</definition>
        <argsstring>(const std::string &amp;language, const std::string &amp;name)</argsstring>
        <name>GetBindingName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>language</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Given a language name and a binding name, return the name of that binding for that language. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that if a new language is added to the mlpack bindings, this method will need to be updated so that documentation can be successfully generated for that language. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_binding_name.hpp" line="28" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_binding_name.hpp" declline="28" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a1660635b7e29eda0900c3590cbda9ec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::markdown::GetParam</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *output)</argsstring>
        <name>GetParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>All Markdown binding types are exactly what is held in the ParamData, so no special handling is necessary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_param.hpp" line="26" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_param.hpp" bodystart="26" bodyend="32"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a98f98c1598d170fa0dd5dacaf52765db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print an option of a simple type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param.hpp" line="26" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param.hpp" bodystart="26" bodyend="37"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a5c452633fa1c61b983de959cc6711084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print a serializable class option (this prints the class name). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param.hpp" line="75" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param.hpp" bodystart="75" bodyend="83"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a5647b2f3dbcd458f7e4c8ab4feab91ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print a matrix option (this prints its size). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param.hpp" line="59" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param.hpp" bodystart="59" bodyend="69"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a5be4f3c4dd4fc86ef3b0a70ffd72004b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print a combination DatasetInfo/matrix parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param.hpp" line="89" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param.hpp" bodystart="89" bodyend="102"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a13f621171fb4dad17c022b730f63e49e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print a vector option, with spaces between it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param.hpp" line="43" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param.hpp" bodystart="43" bodyend="53"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a03edccc4cd756bd7b80df2ffc0d48d50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::markdown::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const void *, void *output)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Print an option into a std::string. </para>
        </briefdescription>
        <detaileddescription>
<para>This should print a short, one-line representation of the object. The string will be stored in the output pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(input) Unused parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Output storage for the string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param.hpp" line="114" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param.hpp" bodystart="114" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a26f7ab17d3ba8f88ace687d4c871b57c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::markdown::GetPrintableParamName</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *output)</argsstring>
        <name>GetPrintableParamName</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Get the parameter&apos;s name as seen by the user. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_name.hpp" line="67" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_name.hpp" bodystart="67" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1abb6b59ce6029eecf0598d75862297a56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetPrintableParamName</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParamName</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the parameter name for a type that has no special handling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_name.hpp" line="27" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_name.hpp" declline="27" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a4479dcab57c0f6835a5af7aa8f547cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetPrintableParamName</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParamName</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the parameter name for a serializable model type (where the user has to pass the file that holds the matrix). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_name.hpp" line="48" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_name.hpp" declline="48" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1ad44fd478f2f02ab27336eb9b0fa2cc3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetPrintableParamName</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParamName</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the parameter name for a matrix type (where the user has to pass the file that holds the matrix). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_name.hpp" line="39" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_name.hpp" declline="39" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a357703e42944d4f8fe2b5c12202916cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetPrintableParamName</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParamName</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the parameter name for a mapped matrix type (where the user has to pass the file that holds the matrix). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_name.hpp" line="58" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_name.hpp" declline="58" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1ac3a219d0f6b224d5135240c8cc1814b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::markdown::GetPrintableParamValue</definition>
        <argsstring>(util::ParamData &amp;d, const void *input, void *output)</argsstring>
        <name>GetPrintableParamValue</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Get the parameter&apos;s name as seen by the user. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_value.hpp" line="71" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_value.hpp" bodystart="71" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1ad89b6730a6a414ba2aa04856d055b2c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetPrintableParamValue</definition>
        <argsstring>(util::ParamData &amp;data, const std::string &amp;value, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParamValue</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the parameter name for a type that has no special handling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_value.hpp" line="27" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_value.hpp" declline="27" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a57f138dc63563eee534f1c00865c1bbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetPrintableParamValue</definition>
        <argsstring>(util::ParamData &amp;data, const std::string &amp;value, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParamValue</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the parameter name for a serializable model type (where the user has to pass the file that holds the matrix). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_value.hpp" line="50" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_value.hpp" declline="50" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a066d404cc3df9df41a4e0cdce07d1a06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetPrintableParamValue</definition>
        <argsstring>(util::ParamData &amp;data, const std::string &amp;value, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParamValue</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the parameter name for a matrix type (where the user has to pass the file that holds the matrix). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_value.hpp" line="40" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_value.hpp" declline="40" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a4aa8a74647a4600092797f4509034fc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetPrintableParamValue</definition>
        <argsstring>(util::ParamData &amp;data, const std::string &amp;value, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParamValue</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the parameter name for a mapped matrix type (where the user has to pass the file that holds the matrix). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_value.hpp" line="61" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_param_value.hpp" declline="61" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a1641c4b9ff4e21ba55123327696216bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::GetPrintableType</definition>
        <argsstring>(util::ParamData &amp;data)</argsstring>
        <name>GetPrintableType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Print the type of a parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>The type printed depends on the current setting of <ref refid="classmlpack_1_1bindings_1_1markdown_1_1BindingInfo_1a6ddf4e79a94a2a67a7539583f77d1081" kindref="member">BindingInfo::Language()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_type.hpp" line="74" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_type.hpp" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1acf176580dc16ae23bc20d66c31f3d2e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::markdown::GetPrintableType</definition>
        <argsstring>(util::ParamData &amp;data, const void *, void *output)</argsstring>
        <name>GetPrintableType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Print the type of a parameter into the output string. </para>
        </briefdescription>
        <detaileddescription>
<para>The type printed depends on the current setting of <ref refid="classmlpack_1_1bindings_1_1markdown_1_1BindingInfo_1a6ddf4e79a94a2a67a7539583f77d1081" kindref="member">BindingInfo::Language()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_type.hpp" line="33" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/get_printable_type.hpp" bodystart="33" bodyend="67"/>
        <references refid="classmlpack_1_1bindings_1_1markdown_1_1BindingInfo_1a6ddf4e79a94a2a67a7539583f77d1081">BindingInfo::Language</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a44f008b4b5f3c69c74ae544679768dfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mlpack::bindings::markdown::IgnoreCheck</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>IgnoreCheck</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Return whether or not a runtime check on parameters should be ignored. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="106" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="106" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a9afa2d6116bae5d069e263ee7c29a75e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mlpack::bindings::markdown::IsSerializable</definition>
        <argsstring>(const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>IsSerializable</name>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return false, because the type is not serializable. </para>
        </briefdescription>
        <detaileddescription>
<para>This includes Armadillo types, which we say aren&apos;t serializable (in this context) because they aren&apos;t mlpack models. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/is_serializable.hpp" line="27" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/is_serializable.hpp" bodystart="27" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1aac2e8af8e3acb77b0c9b09bd23b09a83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mlpack::bindings::markdown::IsSerializable</definition>
        <argsstring>(const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>IsSerializable</name>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return true, because the type is serializable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/is_serializable.hpp" line="37" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/is_serializable.hpp" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a2f2d9012f9af925c7a0c0c1c74bd6684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::markdown::IsSerializable</definition>
        <argsstring>(util::ParamData &amp;, const void *, void *output)</argsstring>
        <name>IsSerializable</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Return whether or not the type is serializable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/is_serializable.hpp" line="48" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/is_serializable.hpp" bodystart="48" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1ae85819f6cce1b7c8c90678d1e37d3d0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::ParamString</definition>
        <argsstring>(const std::string &amp;paramName)</argsstring>
        <name>ParamString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
<para>Print what a user would type to invoke the given option name. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the name <emphasis>must</emphasis> exist in the <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> module. (Note that because of the way <ref refid="param_8hpp_1a7f7cbd16d4fecab7136b5ca1cbcbb0a7" kindref="member">BINDING_LONG_DESC()</ref> and <ref refid="param_8hpp_1a9ffe1d6d254b3e50a5611f77ee381838" kindref="member">BINDING_EXAMPLE()</ref> is structured, this doesn&apos;t mean that all of the PARAM_*() declarataions need to come before <ref refid="param_8hpp_1a7f7cbd16d4fecab7136b5ca1cbcbb0a7" kindref="member">BINDING_LONG_DESC()</ref> and <ref refid="param_8hpp_1a9ffe1d6d254b3e50a5611f77ee381838" kindref="member">BINDING_EXAMPLE()</ref> declaration.) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="95" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="95" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1adb549db7f68cc96d7db9b82a8ea98a80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::ParamType</definition>
        <argsstring>(util::ParamData &amp;d)</argsstring>
        <name>ParamType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Print the user-encountered type of an option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="100" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="100" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a2adaa5c2552cc907048a8877ccde1256" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::PrintDataset</definition>
        <argsstring>(const std::string &amp;dataset)</argsstring>
        <name>PrintDataset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dataset</declname>
        </param>
        <briefdescription>
<para>Print a dataset type parameter (add .csv and return). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="69" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="69" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a0691ae2ee1dbe0771e53d70b4d96476d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::PrintDefault</definition>
        <argsstring>(const std::string &amp;paramName)</argsstring>
        <name>PrintDefault</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
<para>Print the default value of an option, unless it is required (in which case Markdown italicized &apos;<ndash/>&apos; is printed). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="64" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="64" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1ab0b4d7758d67a8b23fb39272b2a166ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::PrintImport</definition>
        <argsstring>(const std::string &amp;bindingName)</argsstring>
        <name>PrintImport</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bindingName</declname>
        </param>
        <briefdescription>
<para>Print any imports that need to be done before using the binding. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="37" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="37" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a02b006e64149f0d0cb704b8e180dc0b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::PrintInputOptionInfo</definition>
        <argsstring>(const std::string &amp;language)</argsstring>
        <name>PrintInputOptionInfo</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>language</declname>
        </param>
        <briefdescription>
<para>Print any special information about input options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="42" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="42" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a2de7536a2b789d5d63f466557da0df80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::PrintLanguage</definition>
        <argsstring>(const std::string &amp;language)</argsstring>
        <name>PrintLanguage</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>language</declname>
        </param>
        <briefdescription>
<para>Print the name of the given language. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="32" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="32" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a8f4ae874f87222a5ae8e8bfc8ae814de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::PrintModel</definition>
        <argsstring>(const std::string &amp;model)</argsstring>
        <name>PrintModel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Print a model type parameter (add .bin and return). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="74" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="74" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1ae90ef76b5843135e84c47a2481c48d2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::PrintOutputOptionInfo</definition>
        <argsstring>(const std::string &amp;language)</argsstring>
        <name>PrintOutputOptionInfo</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>language</declname>
        </param>
        <briefdescription>
<para>Print any special information about output options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="47" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="47" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a2edc60ced95ca968f37e3149bc15541c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::PrintTypeDoc</definition>
        <argsstring>(util::ParamData &amp;data)</argsstring>
        <name>PrintTypeDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Print the type of a parameter into the output string. </para>
        </briefdescription>
        <detaileddescription>
<para>The type printed depends on the current setting of <ref refid="classmlpack_1_1bindings_1_1markdown_1_1BindingInfo_1a6ddf4e79a94a2a67a7539583f77d1081" kindref="member">BindingInfo::Language()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_type_doc.hpp" line="33" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_type_doc.hpp" bodystart="33" bodyend="60"/>
        <references refid="classmlpack_1_1bindings_1_1markdown_1_1BindingInfo_1a6ddf4e79a94a2a67a7539583f77d1081">BindingInfo::Language</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1aa5095bdefec60d5ef2709d51ba3c9ba9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::PrintTypeDocs</definition>
        <argsstring>()</argsstring>
        <name>PrintTypeDocs</name>
        <briefdescription>
<para>Print details about the different types for a language. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="52" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="52" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1af68dcd9dbef6c3c58c8024cc8aed5352" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::PrintValue</definition>
        <argsstring>(const T &amp;value, bool quotes)</argsstring>
        <name>PrintValue</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quotes</declname>
        </param>
        <briefdescription>
<para>Given a parameter type, print the corresponding value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="58" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="58" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a19cee6db7720fb50fd1f7746c6499e8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::ProgramCall</definition>
        <argsstring>(const std::string &amp;programName)</argsstring>
        <name>ProgramCall</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>programName</declname>
        </param>
        <briefdescription>
<para>Given a program name, print a call assuming that all arguments are specified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="86" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="86" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1markdown_1a557a57e62932caf9a1abd1f41024a697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::markdown::ProgramCall</definition>
        <argsstring>(const std::string &amp;programName, Args... args)</argsstring>
        <name>ProgramCall</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>programName</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Given a program name and arguments for it, print what its invocation would be. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" line="81" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/markdown/print_doc_functions.hpp" declline="81" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/bindings/markdown/binding_info.hpp" line="23" column="1"/>
  </compounddef>
</doxygen>
