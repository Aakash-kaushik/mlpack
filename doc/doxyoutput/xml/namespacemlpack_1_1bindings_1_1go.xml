<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacemlpack_1_1bindings_1_1go" kind="namespace" language="C++">
    <compoundname>mlpack::bindings::go</compoundname>
    <innerclass refid="classmlpack_1_1bindings_1_1go_1_1GoOption" prot="public">mlpack::bindings::go::GoOption</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacemlpack_1_1bindings_1_1go_1a24d855d329269931b59bdf1b36706a88" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string programName</definition>
        <argsstring></argsstring>
        <name>programName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/go_option.hpp" line="33" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/go_option.hpp" declline="33" declcolumn="20"/>
        <referencedby refid="classmlpack_1_1bindings_1_1go_1_1GoOption_1a89c79fb6c96bbd487c943bb75cec173e" compoundref="go__option_8hpp" startline="60" endline="126">GoOption&lt; T &gt;::GoOption</referencedby>
        <referencedby refid="classmlpack_1_1bindings_1_1markdown_1_1ProgramNameWrapper_1a0f651f952111e6db381e63443a067b02" compoundref="program__doc__wrapper_8hpp" startline="29" endline="34">ProgramNameWrapper::ProgramNameWrapper</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a2ed85213a0458c58adacd694dd1dd5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::DefaultParam</definition>
        <argsstring>(util::ParamData &amp;data, const void *, void *output)</argsstring>
        <name>DefaultParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Return the default value of an option. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the function that will be placed into the <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> functionMap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/default_param.hpp" line="80" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/default_param.hpp" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ad9ad724a09278f46bfeafc6250d674f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::DefaultParamImpl</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::string &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; mlpack::data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>DefaultParamImpl</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::string &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">mlpack::data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the default value of an option. </para>
        </briefdescription>
        <detaileddescription>
<para>This is for regular types. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/default_param.hpp" line="27" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/default_param.hpp" declline="27" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ac5ce818c8b25725ba39dde10ba3133d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::DefaultParamImpl</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>DefaultParamImpl</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the default value of a model option (this returns the default filename, or &apos;&apos; if the default is no file). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/default_param.hpp" line="70" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/default_param.hpp" declline="70" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a05be07f76d7e0c1c5a4e0a3f3f5d3b69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::DefaultParamImpl</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; std::is_same&lt; T, std::string &gt;&gt;::type *=0)</argsstring>
        <name>DefaultParamImpl</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::string &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the default value of a string option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/default_param.hpp" line="48" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/default_param.hpp" declline="48" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a1495232b06083207b4d8a4a7e73d9436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::DefaultParamImpl</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>DefaultParamImpl</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the default value of a vector option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/default_param.hpp" line="40" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/default_param.hpp" declline="40" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ad63a0e3d345cac7208170299dd5e6fec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::DefaultParamImpl</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if_c&lt; arma::is_arma_type&lt; T &gt;::value||std::is_same&lt; T, std::tuple&lt; mlpack::data::DatasetInfo, arma::mat &gt;&gt;::value &gt;::type *=0)</argsstring>
        <name>DefaultParamImpl</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if_c&lt; arma::is_arma_type&lt; T &gt;::value||std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">mlpack::data::DatasetInfo</ref>, arma::mat &gt;&gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the default value of a matrix option, a tuple option, a serializable option, or a string option (this returns the default filename, or &apos;&apos; if the default is no file). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/default_param.hpp" line="58" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/default_param.hpp" declline="58" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1aba7be021859aac664e036568b37ba994" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetBindingName</definition>
        <argsstring>(const std::string &amp;bindingName)</argsstring>
        <name>GetBindingName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bindingName</declname>
        </param>
        <briefdescription>
<para>Given the name of a binding, print its Go name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="26" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="26" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a22bf3d5e3612c5d18a1e135ef205b940" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetGoType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetGoType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" line="106" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" bodystart="106" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a59be27929d163660564671a9ca7356de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetGoType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetGoType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" line="26" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" bodystart="26" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a1d6eba4d1c838d6d39315766d03a464c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetGoType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetGoType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" line="116" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" bodystart="116" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a26c52c35a2e9e88e9297bd088245aaf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetGoType</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetGoType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" line="125" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" bodystart="125" bodyend="133"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="namespacemlpack_1_1bindings_1_1go_1a5da63fccac0f8eb8bd6950232c8dd363" compoundref="go_2strip__type_8hpp" startline="30" endline="68">StripType</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a1ae42ae3a989d22b3eb19234afa750aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetGoType</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::enable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetGoType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" line="98" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" bodystart="98" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a0d4f8f9ea239fd6fbceed7521e904196" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetGoType&lt; bool &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; bool, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetGoType&lt; bool &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; bool, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" line="86" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" bodystart="86" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ab96cd368d01c38e140342aaa46357af5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetGoType&lt; double &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; double, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetGoType&lt; double &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; double, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" line="62" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" bodystart="62" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a3ac7e016079757cda5e6ea4e585534ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetGoType&lt; float &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; float &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; float &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; float &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; float, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetGoType&lt; float &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; float &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; float &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; float &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; float, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" line="50" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" bodystart="50" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ac2a8713cf15cb373bced4a4d835d127a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetGoType&lt; int &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; int, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetGoType&lt; int &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; int, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" line="38" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" bodystart="38" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ae0994916ef5017bafd25d796eabdff06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetGoType&lt; std::string &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; std::string, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetGoType&lt; std::string &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; std::string, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" line="74" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_go_type.hpp" bodystart="74" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a1ec8fec2ae7384b5cdd3a3ee2da53f6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mlpack::bindings::go::GetOptions</definition>
        <argsstring>(std::vector&lt; std::tuple&lt; std::string, std::string &gt;&gt; &amp;)</argsstring>
        <name>GetOptions</name>
        <param>
          <type>std::vector&lt; std::tuple&lt; std::string, std::string &gt;&gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="59" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="59" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ae0f373fe77f97d9fec702dd317df5701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::GetOptions</definition>
        <argsstring>(std::vector&lt; std::tuple&lt; std::string, std::string &gt;&gt; &amp;results, const std::string &amp;paramName, const T &amp;value, Args... args)</argsstring>
        <name>GetOptions</name>
        <param>
          <type>std::vector&lt; std::tuple&lt; std::string, std::string &gt;&gt; &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Assemble a vector of string tuples indicating parameter names and what should be printed for them. </para>
        </briefdescription>
        <detaileddescription>
<para>(For output parameters, we just need to print the value.) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="68" column="6" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ab149b92e15ca0bacc6e2da5369f7d694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::GetParam</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *output)</argsstring>
        <name>GetParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>All Go binding types are exactly what is held in the ParamData, so no special handling is necessary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_param.hpp" line="26" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_param.hpp" bodystart="26" bodyend="31"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a2f4fe517829c401305711fe1209b0f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print an option of a simple type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_param.hpp" line="26" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_param.hpp" bodystart="26" bodyend="37"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ab9cdf1f19bd418a517c98c1749b15ff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print a serializable class option (this prints the class name). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_param.hpp" line="75" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_param.hpp" bodystart="75" bodyend="83"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1adf755a15fcede6ad38bc97ba8733083d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print a matrix option (this prints its size). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_param.hpp" line="59" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_param.hpp" bodystart="59" bodyend="69"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a7a936911feb5a9c2c832649f4694fe2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print a combination DatasetInfo/matrix parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_param.hpp" line="89" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_param.hpp" bodystart="89" bodyend="102"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1abde257865ab750e6f70c3ae7f3c9243e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print a vector option, with spaces between it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_param.hpp" line="43" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_param.hpp" bodystart="43" bodyend="53"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a84fbc0ace6b708579de048653a34d7f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const void *, void *output)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Print an option into a std::string. </para>
        </briefdescription>
        <detaileddescription>
<para>This should print a short, one-line representation of the object. The string will be stored in the output pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(input) Unused parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Output storage for the string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_param.hpp" line="114" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_param.hpp" bodystart="114" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a366c97a56f46e1161903851b1176c0c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetPrintableType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" line="24" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" declline="24" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1aabc5da007fd9bda3d617f608102eee1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetPrintableType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" line="76" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" declline="76" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a067dad1b6cd0192a43f4fd35ceeb427d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetPrintableType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" line="83" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" declline="83" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1af5c22138f79098a765306d6b8d9916fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetPrintableType</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" line="89" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" declline="89" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a7cc3c64fcd7d293c959541856e3eb610" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetPrintableType</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::enable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" line="69" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" declline="69" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a577273a6850549249c13276ce291090b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::GetPrintableType</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *output)</argsstring>
        <name>GetPrintableType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" line="97" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" bodystart="97" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1aea07a7b656343aa536856ff5c25b8add" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetPrintableType&lt; bool &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; bool, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetPrintableType&lt; bool &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; bool, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" line="60" column="8" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" declline="60" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a45c326151fabd3b8d61d734247fddf17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetPrintableType&lt; double &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; double, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetPrintableType&lt; double &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; double, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" line="42" column="8" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" declline="42" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a94ed42d56f43e6248acd10b5439e59cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetPrintableType&lt; int &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; int, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetPrintableType&lt; int &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; int, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" line="33" column="8" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" declline="33" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a6db66a523fef2e2fa7e9776ccf7105d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetPrintableType&lt; std::string &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; std::string, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetPrintableType&lt; std::string &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; std::string, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" line="51" column="8" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_printable_type.hpp" declline="51" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ac7cd4a5a87971f8ea03209dc87955958" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" line="25" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" bodystart="25" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a6a0bc6a172a745e35eed847fa9e44965" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" line="93" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" bodystart="93" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a9f8ab0bef325d00d61d1903b62f0ed5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetType</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" line="121" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" bodystart="121" bodyend="127"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a39b56e708543011969bfc982ea055cd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetType</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::enable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" line="85" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a3e5518b9c7482e0a3e99b9cdda263a95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::GetType</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *output)</argsstring>
        <name>GetType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Function is used to generate the type names that are used in calls to functions like gonumToArma&lt;type&gt;() or setParam&lt;type&gt;(), and therefore what&apos;s returned isn&apos;t exactly the Go native type used for that parameter type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(input) Unused parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Output storage for the string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" line="140" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" bodystart="140" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a0b64bcf9f9e9fa9bde51a0e2d1ef499f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetType&lt; bool &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; bool &gt;&gt;::type *)</argsstring>
        <name>GetType&lt; bool &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; bool &gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" line="75" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" bodystart="75" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a9848fcd31fc9af34c5d9b792a5b8102a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetType&lt; double &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; double &gt;&gt;::type *)</argsstring>
        <name>GetType&lt; double &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; double &gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" line="55" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" bodystart="55" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ac3867ba467242b3993d39dcf6da1653d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetType&lt; float &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; float &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; float &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; float &gt;&gt;::type *)</argsstring>
        <name>GetType&lt; float &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; float &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; float &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; float &gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" line="45" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" bodystart="45" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a1e84eefe3d6779ca52229261fd5d00af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetType&lt; int &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; int &gt;&gt;::type *)</argsstring>
        <name>GetType&lt; int &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; int &gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" line="35" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" bodystart="35" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ac699a8f6196ad42654c225fbb6e99d6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::GetType&lt; std::string &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; std::string &gt;&gt;::type *)</argsstring>
        <name>GetType&lt; std::string &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; std::string &gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" line="65" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/get_type.hpp" bodystart="65" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ab2c264f139b314c4d9234f3ade587bbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mlpack::bindings::go::IgnoreCheck</definition>
        <argsstring>(const std::string &amp;paramName)</argsstring>
        <name>IgnoreCheck</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
<para>Print whether or not we should ignore a check on the given parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="131" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="131" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a4e79b412d2648bac8fd653203e26c2d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mlpack::bindings::go::IgnoreCheck</definition>
        <argsstring>(const std::vector&lt; std::pair&lt; std::string, bool &gt;&gt; &amp;constraints, const std::string &amp;paramName)</argsstring>
        <name>IgnoreCheck</name>
        <param>
          <type>const std::vector&lt; std::pair&lt; std::string, bool &gt;&gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
<para>Print whether or not we should ignore a check on the given set of constraints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="143" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="143" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a61524b7b078e3f60fe25090314cdb14d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mlpack::bindings::go::IgnoreCheck</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;constraints)</argsstring>
        <name>IgnoreCheck</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <briefdescription>
<para>Print whether or not we should ignore a check on the given set of constraints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="137" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="137" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1aed42bd588a5336a8e78e8fe1419f9a94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::ParamString</definition>
        <argsstring>(const std::string &amp;paramName)</argsstring>
        <name>ParamString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
<para>Given the parameter name, determine what it would actually be when passed to the command line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="126" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="126" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1adc1087ee6d93deef9c33c777a1b705fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintDataset</definition>
        <argsstring>(const std::string &amp;datasetName)</argsstring>
        <name>PrintDataset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>datasetName</declname>
        </param>
        <briefdescription>
<para>Given the name of a matrix, print it. </para>
        </briefdescription>
        <detaileddescription>
<para>Here we do not need to modify anything. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="120" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="120" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1acac3f93d6ddc9eae7c0cf94881ef1d91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintDefault</definition>
        <argsstring>(const std::string &amp;paramName)</argsstring>
        <name>PrintDefault</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
<para>Given a parameter name, print its corresponding default value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="56" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="56" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a7c05388978bbd1562bd5f855b3be264d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintDefnInput</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintDefnInput</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print input in method definition for a regular parameter type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_input.hpp" line="29" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_input.hpp" bodystart="29" bodyend="41"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a3afeab55fb05ed79fd8b6aeeff28a54b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintDefnInput</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintDefnInput</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print input in method definition for a serializable model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_input.hpp" line="80" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_input.hpp" bodystart="80" bodyend="95"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
        <references refid="namespacemlpack_1_1bindings_1_1go_1a5da63fccac0f8eb8bd6950232c8dd363" compoundref="go_2strip__type_8hpp" startline="30" endline="68">StripType</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a5d84f3226b0710a1dce63c318cb25c44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintDefnInput</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintDefnInput</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print input in method definition for a matrix type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_input.hpp" line="47" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_input.hpp" bodystart="47" bodyend="57"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a9304f847bfab3a206dfbae155e38fb67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintDefnInput</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintDefnInput</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print input in method definition for a matrix with info type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_input.hpp" line="63" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_input.hpp" bodystart="63" bodyend="74"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a731f376817cf55a3f890736273b1c24a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintDefnInput</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *)</argsstring>
        <name>PrintDefnInput</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Given parameter information and the current number of spaces for indentation, print the code to process the output to cout. </para>
        </briefdescription>
        <detaileddescription>
<para>This code assumes that data.input is false, and should not be called when data.input is true. If this is the only output, the results will be different.</para>
<para>The input pointer should be a pointer to a std::tuple&lt;size_t, bool&gt; where the first element is the indentation and the second element is a boolean representing whether or not this is the only output parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(input) Pointer to size_t holding the indentation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(output) Unused parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_input.hpp" line="112" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_input.hpp" bodystart="112" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a5b78d4297a88abf616d234e5c6c67230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintDefnOutput</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintDefnOutput</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print output for a regular parameter type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_output.hpp" line="28" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_output.hpp" bodystart="28" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1aec80a21508c1ef569000d7d43606dd08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintDefnOutput</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintDefnOutput</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print output for a serializable model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_output.hpp" line="67" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_output.hpp" bodystart="67" bodyend="76"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="namespacemlpack_1_1bindings_1_1go_1a5da63fccac0f8eb8bd6950232c8dd363" compoundref="go_2strip__type_8hpp" startline="30" endline="68">StripType</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a9cd1ed48be52e0f2a586cae8513abec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintDefnOutput</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintDefnOutput</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print output for a matrix type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_output.hpp" line="42" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_output.hpp" bodystart="42" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a9e237d7a1046c18cf64760cef778ed2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintDefnOutput</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintDefnOutput</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print output for a matrix with info type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_output.hpp" line="54" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_output.hpp" bodystart="54" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1aef39ef8ed7dbe3a87312c6cfe8dc217d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintDefnOutput</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *)</argsstring>
        <name>PrintDefnOutput</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Given parameter information and the current number of spaces for indentation, print the code to process the output to cout. </para>
        </briefdescription>
        <detaileddescription>
<para>This code assumes that data.input is false, and should not be called when data.input is true. If this is the only output, the results will be different.</para>
<para>The input pointer should be a pointer to a std::tuple&lt;size_t, bool&gt; where the first element is the indentation and the second element is a boolean representing whether or not this is the only output parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(input) Pointer to size_t holding the indentation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(output) Unused parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_output.hpp" line="93" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_defn_output.hpp" bodystart="93" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1adbaa72724d7f6265c12c4d205c1d78a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintDoc</definition>
        <argsstring>(util::ParamData &amp;d, const void *input, void *isLower)</argsstring>
        <name>PrintDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>isLower</declname>
        </param>
        <briefdescription>
<para>Print the docstring documentation for a given parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>You are responsible for setting up the line<mdash/>this does not handle indentation or anything. This is meant to produce a line of documentation describing a single parameter.</para>
<para>The indent parameter (void* input, which should be a pointer to a size_t) should be passed to know how much to indent for a new line.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to size_t containing indent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isLower</parametername>
</parameternamelist>
<parameterdescription>
<para>is pointer to bool if isLower is true then parameter is Output or Required Input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc.hpp" line="39" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc.hpp" bodystart="39" bodyend="70"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a378e4473b8cd1fccf534804887f2bc85" compoundref="param__data_8hpp" startline="58">ParamData::desc</references>
        <references refid="namespacemlpack_1_1util_1a7b8929840f4891a96df1108873e1a1f9" compoundref="hyphenate__string_8hpp" startline="27" endline="73">mlpack::util::HyphenateString</references>
        <references refid="bindings_2go_2CMakeLists_8txt_1a81b53a1ab05b48531c7d8b930ed65ee9" compoundref="bindings_2go_2CMakeLists_8txt" startline="3" endline="16">if</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a3a22bd0b5aa284ae0dc3d7542986df31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintGo</definition>
        <argsstring>(const util::BindingDetails &amp;doc, const std::string &amp;functionName)</argsstring>
        <name>PrintGo</name>
        <param>
          <type>const <ref refid="structmlpack_1_1util_1_1BindingDetails" kindref="compound">util::BindingDetails</ref> &amp;</type>
          <declname>doc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>functionName</declname>
        </param>
        <briefdescription>
<para>Given a list of parameter definition and program documentation, print a generated .go file to stdout. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>Documentation for the program. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>functionName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function (i.e. &quot;pca&quot;). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_go.hpp" line="28" column="6" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_go.hpp" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ae1964063d8654fe8a0ade4b91dbe3d2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintImport</definition>
        <argsstring>()</argsstring>
        <name>PrintImport</name>
        <briefdescription>
<para>Print any import information for the Go binding. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="31" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="31" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1af37ec8ad1c0e6e9d9b5c7f6fe5a7684e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintInputOptionInfo</definition>
        <argsstring>()</argsstring>
        <name>PrintInputOptionInfo</name>
        <briefdescription>
<para>Print any special information about input options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="41" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="41" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ac8c6f7ef60ce51c9fc87ec739661aaba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintInputOptions</definition>
        <argsstring>()</argsstring>
        <name>PrintInputOptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="78" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="78" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a11290b7658f2d7d81771b65ec58204ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintInputOptions</definition>
        <argsstring>(const std::string &amp;paramName, const T &amp;value, Args... args)</argsstring>
        <name>PrintInputOptions</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Print an input option. </para>
        </briefdescription>
        <detaileddescription>
<para>This will throw an exception if the parameter does not exist in <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="94" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="94" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a3866346aeed26609b1a97d962fa6fe32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintInputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintInputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print input processing for a standard option type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like:</para>
<para>// Detect if the parameter was passed; set if so. if param.Name != nil { setParam&lt;d.cppType&gt;(&quot;paramName&quot;, param.Name) setPassed(&quot;paramName&quot;) }</para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_input_processing.hpp" line="29" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_input_processing.hpp" bodystart="29" bodyend="123"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a727ea710755594dcf66893842758914a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintInputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintInputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print input processing for a serializable type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like:</para>
<para>// Detect if the parameter was passed; set if so. if param.Name != nil { set&lt;ModelType&gt;(&quot;paramName&quot;, param.Name) setPassed(&quot;paramName&quot;) }</para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_input_processing.hpp" line="250" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_input_processing.hpp" bodystart="250" bodyend="306"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
        <references refid="namespacemlpack_1_1bindings_1_1go_1a5da63fccac0f8eb8bd6950232c8dd363" compoundref="go_2strip__type_8hpp" startline="30" endline="68">StripType</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a911152b857b829bce01e0f2315469ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintInputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintInputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print input processing for a matrix type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like:</para>
<para>// Detect if the parameter was passed; set if so. if param.Name != nil { gonumToArma&lt;type&gt;(&quot;paramName&quot;, param.Name) setPassed(&quot;paramName&quot;) }</para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_input_processing.hpp" line="129" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_input_processing.hpp" bodystart="129" bodyend="183"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1afb3b41c7acd988435e1247e0b059025c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintInputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintInputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print input processing for a matrix with info type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like:</para>
<para>// Detect if the parameter was passed; set if so. if param.Name != nil { gonumToArmaMatWithInfo&lt;type&gt;(&quot;paramName&quot;, param.Name) setPassed(&quot;paramName&quot;) }</para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_input_processing.hpp" line="189" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_input_processing.hpp" bodystart="189" bodyend="244"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1afd8a8bda79eb0fe9cd05cb1e606e6d3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintInputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const void *input, void *)</argsstring>
        <name>PrintInputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Given parameter information and the current number of spaces for indentation, print the code to process the input to cout. </para>
        </briefdescription>
        <detaileddescription>
<para>This code assumes that data.input is true, and should not be called when data.input is false.</para>
<para>The number of spaces to indent should be passed through the input pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to size_t holding the indentation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(output) Unused parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_input_processing.hpp" line="320" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_input_processing.hpp" bodystart="320" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1af86c61eac4dcbbdd4d677dc8d078da9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintMethodConfig</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintMethodConfig</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print param in configuration struct for a standard option type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_config.hpp" line="29" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_config.hpp" bodystart="29" bodyend="58"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1acca74696bab849f5ec8ed4fdc73a2e7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintMethodConfig</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintMethodConfig</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print param in method configuration struct for a serializable type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_config.hpp" line="129" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_config.hpp" bodystart="129" bodyend="156"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a5b9b2774841764f8a98ab1f9d2a72496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintMethodConfig</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintMethodConfig</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print param in configuration struct for a matrix type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_config.hpp" line="64" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_config.hpp" bodystart="64" bodyend="90"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a0d8063b436cef596ccf11dba0bd69f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintMethodConfig</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintMethodConfig</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print param in configuration struct for a matrix with info type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_config.hpp" line="96" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_config.hpp" bodystart="96" bodyend="123"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a4e3af333092d8d43f5dde75160c4f6f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintMethodConfig</definition>
        <argsstring>(util::ParamData &amp;d, const void *input, void *)</argsstring>
        <name>PrintMethodConfig</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Given parameter information and the current number of spaces for indentation, print the code to process the input to cout. </para>
        </briefdescription>
        <detaileddescription>
<para>This code assumes that data.input is true, and should not be called when data.input is false.</para>
<para>The number of spaces to indent should be passed through the input pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to size_t holding the indentation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(output) Unused parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_config.hpp" line="170" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_config.hpp" bodystart="170" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ae18e5140e357a39e7fd9c171a6cdf5e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintMethodInit</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintMethodInit</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print parameter with it&apos;s default value for a standard option type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_init.hpp" line="29" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_init.hpp" bodystart="29" bodyend="80"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a9eb3901d029907356bc3832465516c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintMethodInit</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintMethodInit</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print parameter with its default value for a serializable type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_init.hpp" line="151" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_init.hpp" bodystart="151" bodyend="178"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1aced0e06495ee82b31245842674a5378b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintMethodInit</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintMethodInit</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print parameter with its default value for a matrix type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_init.hpp" line="86" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_init.hpp" bodystart="86" bodyend="112"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a38ed6119bb2faef89f5b0876d4f575de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintMethodInit</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintMethodInit</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print parameter with its default value for a matrix with info type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_init.hpp" line="118" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_init.hpp" bodystart="118" bodyend="145"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a2259799a668d3ec4aa7c84ace0efc935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintMethodInit</definition>
        <argsstring>(util::ParamData &amp;d, const void *input, void *)</argsstring>
        <name>PrintMethodInit</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Given parameter information and the current number of spaces for indentation, print the code to process the input to cout. </para>
        </briefdescription>
        <detaileddescription>
<para>This code assumes that data.input is true, and should not be called when data.input is false.</para>
<para>The number of spaces to indent should be passed through the input pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to size_t holding the indentation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(output) Unused parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_init.hpp" line="192" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_method_init.hpp" bodystart="192" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a7fd76d12eac32d018b05fde01f61eb02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintModel</definition>
        <argsstring>(const std::string &amp;modelName)</argsstring>
        <name>PrintModel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>modelName</declname>
        </param>
        <briefdescription>
<para>Given the name of a model, print it. </para>
        </briefdescription>
        <detaileddescription>
<para>Here we do not need to modify anything. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="114" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="114" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1aa5201ac1e23b3232018879834e471f52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintOptionalInputs</definition>
        <argsstring>()</argsstring>
        <name>PrintOptionalInputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="75" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="75" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1afd69229c8c9cbddf5ef79d044b9d030f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintOptionalInputs</definition>
        <argsstring>(const std::string &amp;paramName, const T &amp;value, Args... args)</argsstring>
        <name>PrintOptionalInputs</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Print an input option. </para>
        </briefdescription>
        <detaileddescription>
<para>This will throw an exception if the parameter does not exist in <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="85" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="85" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a4b47a4b405b1759842dd55c644d1fbdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintOutputOptionInfo</definition>
        <argsstring>()</argsstring>
        <name>PrintOutputOptionInfo</name>
        <briefdescription>
<para>Print any special information about output options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="36" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="36" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a83cf73f94eb33c6658de366eaff07b88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintOutputOptions</definition>
        <argsstring>()</argsstring>
        <name>PrintOutputOptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="99" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="99" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ac0a4c394df7a5ab7caa9f51a549b51ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintOutputOptions</definition>
        <argsstring>(Args... args)</argsstring>
        <name>PrintOutputOptions</name>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="102" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="102" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a76b2a04be53e39d1b6e87074bcf7a12f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintOutputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintOutputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print output processing for a regular parameter type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like:</para>
<para>&lt;paramName&gt; := GetParam&lt;Type&gt;(&quot;paramName&quot;)</para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_output_processing.hpp" line="29" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_output_processing.hpp" bodystart="29" bodyend="50"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a401bf030afff5dd49b05e053e019fc30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintOutputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintOutputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print output processing for a serializable model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like:</para>
<para>var modelOut &lt;Type&gt; modelOut.get&lt;Type&gt;(&quot;paramName&quot;)</para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_output_processing.hpp" line="109" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_output_processing.hpp" bodystart="109" bodyend="133"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="namespacemlpack_1_1bindings_1_1go_1a5da63fccac0f8eb8bd6950232c8dd363" compoundref="go_2strip__type_8hpp" startline="30" endline="68">StripType</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1add5951094bdc9e48cc57696b0d1915e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintOutputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename std::enable_if&lt;!std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;::value &gt;::type *=0)</argsstring>
        <name>PrintOutputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename std::enable_if&lt;!std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print output processing for a matrix type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like:</para>
<para>var &lt;paramName&gt;Ptr mlpackArma &lt;paramName&gt; := &lt;paramName&gt;<emphasis>ptr.ArmaToGonum</emphasis>&lt;Type&gt;(&quot;paramName&quot;)</para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_output_processing.hpp" line="56" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_output_processing.hpp" bodystart="56" bodyend="78"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a961fc633a0e424d1de53ec3ee94d25c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintOutputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const size_t indent, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintOutputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print output processing for a matrix with info type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like:</para>
<para>var &lt;paramName&gt;_ptr mlpackArma &lt;paramName&gt; := &lt;paramName&gt;Ptr.ArmaToGonumWithInfo&lt;Type&gt;(&quot;paramName&quot;)</para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_output_processing.hpp" line="83" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_output_processing.hpp" bodystart="83" bodyend="103"/>
        <references refid="namespacemlpack_1_1util_1a4b979c0f88a8672aa71202b6e237daa9" compoundref="camel__case_8hpp" startline="26" endline="49">mlpack::util::CamelCase</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a038c56948726207f110343778afe05bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintOutputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *)</argsstring>
        <name>PrintOutputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(input) Unused parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(output) Unused parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_output_processing.hpp" line="141" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_output_processing.hpp" bodystart="141" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a17ed667c655d683a42d3cc2257d26aa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintTypeDoc</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintTypeDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return a string representing the command-line type of an option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_type_doc.hpp" line="26" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_type_doc.hpp" declline="26" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a901b6698f38fe8af3ca38ab0fff6cd44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintTypeDoc</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintTypeDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return a string representing the command-line type of a model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_type_doc.hpp" line="63" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_type_doc.hpp" declline="63" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a255685e61562b5866a91b981b0570c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintTypeDoc</definition>
        <argsstring>(util::ParamData &amp;data, const typename std::enable_if&lt; arma::is_arma_type&lt; T &gt;::value &gt;::type *=0)</argsstring>
        <name>PrintTypeDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename std::enable_if&lt; arma::is_arma_type&lt; T &gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return a string representing the command-line type of a matrix option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_type_doc.hpp" line="46" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_type_doc.hpp" declline="46" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a9c1162e25791cada81c9b62451b01d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintTypeDoc</definition>
        <argsstring>(util::ParamData &amp;data, const typename std::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;::value &gt;::type *=0)</argsstring>
        <name>PrintTypeDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename std::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return a string representing the command-line type of a matrix tuple option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_type_doc.hpp" line="54" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_type_doc.hpp" declline="54" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ac843da709d024507e23107b59566954c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintTypeDoc</definition>
        <argsstring>(util::ParamData &amp;data, const typename std::enable_if&lt; util::IsStdVector&lt; T &gt;::value &gt;::type *=0)</argsstring>
        <name>PrintTypeDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename std::enable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return a string representing the command-line type of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_type_doc.hpp" line="38" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_type_doc.hpp" declline="38" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a7d383dd208dff138425ad289d6bacbbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::go::PrintTypeDoc</definition>
        <argsstring>(util::ParamData &amp;data, const void *, void *output)</argsstring>
        <name>PrintTypeDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Print the command-line type of an option into a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_type_doc.hpp" line="72" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_type_doc.hpp" bodystart="72" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a0d3f81767c3bd2f23324a5a0cf250bce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintValue</definition>
        <argsstring>(const bool &amp;value, bool quotes)</argsstring>
        <name>PrintValue</name>
        <param>
          <type>const bool &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quotes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="51" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="51" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1ad4e4b986fd82228c943776d0f685985b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::PrintValue</definition>
        <argsstring>(const T &amp;value, bool quotes)</argsstring>
        <name>PrintValue</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quotes</declname>
        </param>
        <briefdescription>
<para>Given a parameter type, print the corresponding value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="47" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="47" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a57f9d66c5bd1c6dbacee52c716d15336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::go::ProgramCall</definition>
        <argsstring>(const std::string &amp;programName, Args... args)</argsstring>
        <name>ProgramCall</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>programName</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Given a name of a binding and a variable number of arguments (and their contents), print the corresponding function call. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" line="109" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/go/print_doc_functions.hpp" declline="109" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1go_1a5da63fccac0f8eb8bd6950232c8dd363" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mlpack::bindings::go::StripType</definition>
        <argsstring>(const std::string &amp;inputType, std::string &amp;goStrippedType, std::string &amp;strippedType, std::string &amp;printedType, std::string &amp;defaultsType)</argsstring>
        <name>StripType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>inputType</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>goStrippedType</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>strippedType</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>printedType</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>defaultsType</declname>
        </param>
        <briefdescription>
<para>Given an input type like, e.g., &quot;LogisticRegression&lt;&gt;&quot;, return four types that can be used in Go code. </para>
        </briefdescription>
        <detaileddescription>
<para>goStrippedType will be a type with lower first letter of parameter name so it is of unexported type in GoDoc (e.g. &quot;logisticRegression&quot;), strippedType will be a type with no template parameters (e.g. &quot;LogisticRegression&quot;), printedType will be a printable type with the template parameters (e.g. &quot;LogisticRegression&lt;&gt;&quot;), and defaultsType will be a printable type with a default template parameter (e.g. &quot;LogisticRegression\&lt;T\&gt;&quot;) that can be used for class definitions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/go/strip_type.hpp" line="30" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/go/strip_type.hpp" bodystart="30" bodyend="68"/>
        <referencedby refid="namespacemlpack_1_1bindings_1_1go_1a26c52c35a2e9e88e9297bd088245aaf1" compoundref="get__go__type_8hpp" startline="125" endline="133">GetGoType</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1go_1a3afeab55fb05ed79fd8b6aeeff28a54b" compoundref="print__defn__input_8hpp" startline="80" endline="95">PrintDefnInput</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1go_1aec80a21508c1ef569000d7d43606dd08" compoundref="print__defn__output_8hpp" startline="67" endline="76">PrintDefnOutput</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1go_1a727ea710755594dcf66893842758914a" compoundref="go_2print__input__processing_8hpp" startline="250" endline="306">PrintInputProcessing</referencedby>
        <referencedby refid="namespacemlpack_1_1bindings_1_1go_1a401bf030afff5dd49b05e053e019fc30" compoundref="go_2print__output__processing_8hpp" startline="109" endline="133">PrintOutputProcessing</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/bindings/go/default_param.hpp" line="21" column="1"/>
  </compounddef>
</doxygen>
