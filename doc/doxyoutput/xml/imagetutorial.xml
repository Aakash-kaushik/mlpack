<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="imagetutorial" kind="page">
    <compoundname>imagetutorial</compoundname>
    <title>Image Utilities tutorial</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="imagetutorial_1intro_imagetu">
<title>Introduction</title>
<para>Image datasets are becoming increasingly popular in deep learning.</para>
<para>mlpack&apos;s image saving/loading functionality is based on <ulink url="https://github.com/nothings/stb">stb/</ulink>.</para>
</sect1>
<sect1 id="imagetutorial_1toc_imagetu">
<title>Table of Contents</title>
<para>This tutorial is split into the following sections:</para>
<para><itemizedlist>
<listitem><para><ref refid="imagetutorial_1intro_imagetu" kindref="member">Introduction</ref></para>
</listitem><listitem><para><ref refid="imagetutorial_1toc_imagetu" kindref="member">Table of Contents</ref></para>
</listitem><listitem><para><ref refid="imagetutorial_1model_api_imagetu" kindref="member">Model API</ref></para>
</listitem><listitem><para><ref refid="imagetutorial_1imageinfo_api_imagetu" kindref="member">ImageInfo</ref></para>
</listitem><listitem><para><ref refid="imagetutorial_1load_api_imagetu" kindref="member">Load</ref></para>
</listitem><listitem><para><ref refid="imagetutorial_1save_api_imagetu" kindref="member">Save</ref></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="imagetutorial_1model_api_imagetu">
<title>Model API</title>
<para>Image utilities supports loading and saving of images.</para>
<para>It supports filetypes &quot;jpg&quot;, &quot;png&quot;, &quot;tga&quot;,&quot;bmp&quot;, &quot;psd&quot;, &quot;gif&quot;, &quot;hdr&quot;, &quot;pic&quot;, &quot;pnm&quot; for loading and &quot;jpg&quot;, &quot;png&quot;, &quot;tga&quot;, &quot;bmp&quot;, &quot;hdr&quot; for saving.</para>
<para>The datatype associated is unsigned char to support RGB values in the range 1-255. To feed data into the network typecast of <computeroutput>arma::Mat</computeroutput> may be required. Images are stored in matrix as (width * height * channels, NumberOfImages). Therefore imageMatrix.col(0) would be the first image if images are loaded in imageMatrix.</para>
</sect1>
<sect1 id="imagetutorial_1imageinfo_api_imagetu">
<title>ImageInfo</title>
<para>ImageInfo class contains the metadata of the images. <programlisting><codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Instantiate<sp/>the<sp/>ImageInfo<sp/>object<sp/>with<sp/>the<sp/>image<sp/>width,<sp/>height,<sp/>channels.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>width<sp/>Image<sp/>width.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>height<sp/>Image<sp/>height.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>channels<sp/>number<sp/>of<sp/>channels<sp/>in<sp/>the<sp/>image.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">ImageInfo(const<sp/>size_t<sp/>width,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>size_t<sp/>height,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>size_t<sp/>channels);</highlight></codeline>
</programlisting> Other public memebers include:<itemizedlist>
<listitem><para>quality Compression of the image if saved as jpg (0-100).</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="imagetutorial_1load_api_imagetu">
<title>Load</title>
<para>Standalone loading of images. <programlisting><codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Load<sp/>the<sp/>image<sp/>file<sp/>into<sp/>the<sp/>given<sp/>matrix.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>filename<sp/>Name<sp/>of<sp/>the<sp/>image<sp/>file.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>matrix<sp/>Matrix<sp/>to<sp/>load<sp/>the<sp/>image<sp/>into.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>info<sp/>An<sp/>object<sp/>of<sp/>ImageInfo<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>fatal<sp/>If<sp/>an<sp/>error<sp/>should<sp/>be<sp/>reported<sp/>as<sp/>fatal<sp/>(default<sp/>false).</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>transpose<sp/>If<sp/>true,<sp/>flips<sp/>the<sp/>image,<sp/>same<sp/>as<sp/>transposing<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>matrix<sp/>after<sp/>loading.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@return<sp/>Boolean<sp/>value<sp/>indicating<sp/>success<sp/>or<sp/>failure<sp/>of<sp/>load.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/>template&lt;typename<sp/>eT&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/>bool<sp/>Load(const<sp/>std::string&amp;<sp/>filename,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::Mat&lt;eT&gt;&amp;<sp/>matrix,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImageInfo&amp;<sp/>info,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>fatal,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>transpose);</highlight></codeline>
</programlisting></para>
<para>Loading a test image. It also fills up the ImageInfo class object. <programlisting><codeline><highlight class="normal">data::ImageInfo<sp/>info;</highlight></codeline>
<codeline><highlight class="normal">data::Load(&quot;test_image.png&quot;,<sp/>matrix,<sp/>info,<sp/>false,<sp/>true);</highlight></codeline>
</programlisting></para>
<para>ImageInfo requires height, width, number of channels of the image.</para>
<para><programlisting><codeline><highlight class="normal">size_t<sp/>height<sp/>=<sp/>64,<sp/>width<sp/>=<sp/>64,<sp/>channels<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">data::ImageInfo<sp/>info(width,<sp/>height,<sp/>channels);</highlight></codeline>
</programlisting></para>
<para>More than one image can be loaded into the same matrix.</para>
<para>Loading multiple images:</para>
<para><programlisting><codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Load<sp/>the<sp/>image<sp/>file<sp/>into<sp/>the<sp/>given<sp/>matrix.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>files<sp/>A<sp/>vector<sp/>consisting<sp/>of<sp/>filenames.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>matrix<sp/>Matrix<sp/>to<sp/>save<sp/>the<sp/>image<sp/>from.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>info<sp/>An<sp/>object<sp/>of<sp/>ImageInfo<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>fatal<sp/>If<sp/>an<sp/>error<sp/>should<sp/>be<sp/>reported<sp/>as<sp/>fatal<sp/>(default<sp/>false).</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>transpose<sp/>If<sp/>true,<sp/>flips<sp/>the<sp/>image,<sp/>same<sp/>as<sp/>transposing<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>matrix<sp/>after<sp/>loading.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@return<sp/>Boolean<sp/>value<sp/>indicating<sp/>success<sp/>or<sp/>failure<sp/>of<sp/>load.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/>template&lt;typename<sp/>eT&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/>bool<sp/>Load(const<sp/>std::vector&lt;std::string&gt;&amp;<sp/>files,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::Mat&lt;eT&gt;&amp;<sp/>matrix,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImageInfo&amp;<sp/>info,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>fatal,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>transpose);</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">data::ImageInfo<sp/>info;</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;std::string&gt;&gt;<sp/>files{&quot;test_image1.bmp&quot;,&quot;test_image2.bmp&quot;};</highlight></codeline>
<codeline><highlight class="normal">data::load(files,<sp/>matrix,<sp/>info,<sp/>false,<sp/>true);</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="imagetutorial_1save_api_imagetu">
<title>Save</title>
<para>Save images expects a matrix of type unsigned char in the form (width * height * channels, NumberOfImages). Just like load it can be used to save one image or multiple images. Besides image data it also expects the shape of the image as input (width, height, channels).</para>
<para>Saving one image:</para>
<para><programlisting><codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Save<sp/>the<sp/>image<sp/>file<sp/>from<sp/>the<sp/>given<sp/>matrix.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>filename<sp/>Name<sp/>of<sp/>the<sp/>image<sp/>file.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>matrix<sp/>Matrix<sp/>to<sp/>save<sp/>the<sp/>image<sp/>from.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>info<sp/>An<sp/>object<sp/>of<sp/>ImageInfo<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>fatal<sp/>If<sp/>an<sp/>error<sp/>should<sp/>be<sp/>reported<sp/>as<sp/>fatal<sp/>(default<sp/>false).</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>transpose<sp/>If<sp/>true,<sp/>flips<sp/>the<sp/>image,<sp/>same<sp/>as<sp/>transposing<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>matrix<sp/>after<sp/>loading.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@return<sp/>Boolean<sp/>value<sp/>indicating<sp/>success<sp/>or<sp/>failure<sp/>of<sp/>load.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/>template&lt;typename<sp/>eT&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/>bool<sp/>Save(const<sp/>std::string&amp;<sp/>filename,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::Mat&lt;eT&gt;&amp;<sp/>matrix,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImageInfo&amp;<sp/>info,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>fatal,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>transpose);</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">data::ImageInfo<sp/>info;</highlight></codeline>
<codeline><highlight class="normal">info.width<sp/>=<sp/>info.height<sp/>=<sp/>25;</highlight></codeline>
<codeline><highlight class="normal">info.channels<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal">info.quality<sp/>=<sp/>90;</highlight></codeline>
<codeline><highlight class="normal">data::Save(&quot;test_image.bmp&quot;,<sp/>matrix,<sp/>info,<sp/>false,<sp/>true);</highlight></codeline>
</programlisting></para>
<para>If the matrix contains more than one image, only the first one is saved.</para>
<para>Saving multiple images:</para>
<para><programlisting><codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Save<sp/>the<sp/>image<sp/>file<sp/>from<sp/>the<sp/>given<sp/>matrix.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>files<sp/>A<sp/>vector<sp/>consisting<sp/>of<sp/>filenames.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>matrix<sp/>Matrix<sp/>to<sp/>save<sp/>the<sp/>image<sp/>from.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>info<sp/>An<sp/>object<sp/>of<sp/>ImageInfo<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>fatal<sp/>If<sp/>an<sp/>error<sp/>should<sp/>be<sp/>reported<sp/>as<sp/>fatal<sp/>(default<sp/>false).</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@param<sp/>transpose<sp/>If<sp/>true,<sp/>Flips<sp/>the<sp/>image,<sp/>same<sp/>as<sp/>transposing<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>matrix<sp/>after<sp/>loading.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@return<sp/>Boolean<sp/>value<sp/>indicating<sp/>success<sp/>or<sp/>failure<sp/>of<sp/>load.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/>template&lt;typename<sp/>eT&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/>bool<sp/>Save(const<sp/>std::vector&lt;std::string&gt;&amp;<sp/>files,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::Mat&lt;eT&gt;&amp;<sp/>matrix,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImageInfo&amp;<sp/>info,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>fatal,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>transpose);</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">data::ImageInfo<sp/>info;</highlight></codeline>
<codeline><highlight class="normal">info.width<sp/>=<sp/>info.height<sp/>=<sp/>25;</highlight></codeline>
<codeline><highlight class="normal">info.channels<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal">info.quality<sp/>=<sp/>90;</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;std::string&gt;&gt;<sp/>files{&quot;test_image1.bmp&quot;,<sp/>&quot;test_image2.bmp&quot;};</highlight></codeline>
<codeline><highlight class="normal">data::Save(files,<sp/>matrix,<sp/>info,<sp/>false,<sp/>true);</highlight></codeline>
</programlisting></para>
<para>Multiple images are saved according to the vector of filenames specified. </para>
</sect1>
    </detaileddescription>
    <location file="/home/aakash/mlpack/doc/tutorials/image/image.txt"/>
  </compounddef>
</doxygen>
