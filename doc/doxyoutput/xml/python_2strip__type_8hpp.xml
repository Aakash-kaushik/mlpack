<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="python_2strip__type_8hpp" kind="file" language="C++">
    <compoundname>strip_type.hpp</compoundname>
    <includedby refid="import__decl_8hpp" local="yes">/home/aakash/mlpack/src/mlpack/bindings/python/import_decl.hpp</includedby>
    <includedby refid="print__class__defn_8hpp" local="yes">/home/aakash/mlpack/src/mlpack/bindings/python/print_class_defn.hpp</includedby>
    <includedby refid="python_2print__input__processing_8hpp" local="yes">/home/aakash/mlpack/src/mlpack/bindings/python/print_input_processing.hpp</includedby>
    <invincdepgraph>
      <node id="5">
        <label>/home/aakash/mlpack/src/mlpack/bindings/python/print_input_processing.hpp</label>
        <link refid="python_2print__input__processing_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/aakash/mlpack/src/mlpack/bindings/python/py_option.hpp</label>
        <link refid="py__option_8hpp"/>
      </node>
      <node id="4">
        <label>/home/aakash/mlpack/src/mlpack/bindings/python/print_class_defn.hpp</label>
        <link refid="print__class__defn_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/aakash/mlpack/src/mlpack/bindings/python/import_decl.hpp</label>
        <link refid="import__decl_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/aakash/mlpack/src/mlpack/bindings/python/strip_type.hpp</label>
        <link refid="python_2strip__type_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1bindings">mlpack::bindings</innernamespace>
    <innernamespace refid="namespacemlpack_1_1bindings_1_1python">mlpack::bindings::python</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Ryan Curtin</para>
</simplesect>
Given a C++ typename that may have template parameters, return stripped and printable versions to be used in Python bindings.</para>
<para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MLPACK_BINDINGS_PYTHON_STRIP_TYPE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_BINDINGS_PYTHON_STRIP_TYPE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bindings<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="methods_2nmf_2CMakeLists_8txt_1a4164342adb31720de63a384fd5b2845a" kindref="member">python</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="namespacemlpack_1_1bindings_1_1python_1ad9aef93ac2450f69e902b2bae75296fa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemlpack_1_1bindings_1_1python_1ad9aef93ac2450f69e902b2bae75296fa" kindref="member">StripType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>inputType,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&amp;<sp/>strippedType,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&amp;<sp/>printedType,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&amp;<sp/>defaultsType)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>we<sp/>have<sp/>to<sp/>parse<sp/>the<sp/>type.<sp/><sp/>If<sp/>we<sp/>have<sp/>something<sp/>like,<sp/>e.g.,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;LogisticRegression&lt;&gt;&apos;,<sp/>we<sp/>must<sp/>convert<sp/>this<sp/>to<sp/>&apos;LogisticRegression[T=*].&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>printedType<sp/>=<sp/>inputType;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>strippedType<sp/>=<sp/>inputType;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>defaultsType<sp/>=<sp/>inputType;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printedType.find(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Are<sp/>there<sp/>any<sp/>template<sp/>parameters?<sp/><sp/>Or<sp/>is<sp/>it<sp/>the<sp/>default?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>loc<sp/>=<sp/>printedType.find(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(loc<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>it<sp/>from<sp/>&quot;&lt;&gt;&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strippedType.replace(loc,<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printedType.replace(loc,<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>defaultsType.replace(loc,<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;[T=*]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>bindings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/bindings/python/strip_type.hpp"/>
  </compounddef>
</doxygen>
