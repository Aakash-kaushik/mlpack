<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="rstutorial" kind="page">
    <compoundname>rstutorial</compoundname>
    <title>RangeSearch tutorial (mlpack_range_search)</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="rstutorial_1intro_rstut">
<title>Introduction</title>
<para>Range search is a simple machine learning task which aims to find all the neighbors of a point that fall into a certain range of distances. In this setting, we have a <bold>query</bold> and a <bold>reference</bold> dataset. Given a certain range, for each point in the <bold>query</bold> dataset, we wish to know all points in the <bold>reference</bold> dataset which have distances within that given range to the given query point.</para>
<para>Alternately, if the query and reference datasets are the same, the problem can be stated more simply: for each point in the dataset, we wish to know all points which have distance in the given range to that point.</para>
<para><bold>mlpack</bold> provides:</para>
<para><itemizedlist>
<listitem><para>a <ref refid="rstutorial_1cli_rstut" kindref="member">simple command-line executable</ref> to run range search</para>
</listitem><listitem><para>a <ref refid="rstutorial_1rs_rstut" kindref="member">simple C++ interface</ref> to perform range search</para>
</listitem><listitem><para>a <ref refid="rstutorial_1rs_ext_rstut" kindref="member">generic, extensible, and powerful C++ class (RangeSearch)</ref> for complex usage</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="rstutorial_1toc_rstut">
<title>Table of Contents</title>
<para>A list of all the sections this tutorial contains.</para>
<para><itemizedlist>
<listitem><para><ref refid="rstutorial_1intro_rstut" kindref="member">Introduction</ref></para>
</listitem><listitem><para><ref refid="rstutorial_1toc_rstut" kindref="member">Table of Contents</ref></para>
</listitem><listitem><para><ref refid="rstutorial_1cli_rstut" kindref="member">The &apos;mlpack_range_search&apos; command-line executable</ref><itemizedlist>
<listitem><para><ref refid="rstutorial_1cli_ex1_rstut" kindref="member">One dataset, points with distance &lt;= 0.01</ref></para>
</listitem><listitem><para><ref refid="rstutorial_1cli_ex2_rstut" kindref="member">Query and reference dataset, range [1.0, 1.5]</ref></para>
</listitem><listitem><para><ref refid="rstutorial_1cli_ex3_rstut" kindref="member">One dataset, range [0.7 0.8], leaf size of 15 points</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="rstutorial_1rs_rstut" kindref="member">The &apos;RangeSearch&apos; class</ref><itemizedlist>
<listitem><para><ref refid="rstutorial_1rs_ex1_rstut" kindref="member">Distance less than 2.0 on a single dataset</ref></para>
</listitem><listitem><para><ref refid="rstutorial_1rs_ex2_rstut" kindref="member">Range [3.0, 4.0] on a query and reference dataset</ref></para>
</listitem><listitem><para><ref refid="rstutorial_1rs_ex3_rstut" kindref="member">Naive (exhaustive) search for distance greater than 5.0 on one dataset</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="rstutorial_1rs_ext_rstut" kindref="member">The extensible &apos;RangeSearch&apos; class</ref><itemizedlist>
<listitem><para><ref refid="rstutorial_1metric_type_doc_rstut" kindref="member">MetricType policy class</ref></para>
</listitem><listitem><para><ref refid="rstutorial_1mat_type_doc_rstut" kindref="member">MatType policy class</ref></para>
</listitem><listitem><para><ref refid="rstutorial_1tree_type_doc_rstut" kindref="member">TreeType policy class</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="rstutorial_1further_doc_rstut" kindref="member">Further documentation</ref></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="rstutorial_1cli_rstut">
<title>The &apos;mlpack_range_search&apos; command-line executable</title>
<para><bold>mlpack</bold> provides an executable, <computeroutput>mlpack_range_search</computeroutput>, which can be used to perform range searches quickly and simply from the command-line. This program will perform the range search and place the resulting neighbor index list into one file and their corresponding distances into another file. These files are organized such that the first row corresponds to the neighbors (or distances) of the first query point, and the second row corresponds to the neighbors (or distances) of the second query point, and so forth. The neighbors of a specific point are not arranged in any specific order.</para>
<para>Because a range search may return different numbers of points (including zero), the output file is technically not a valid CSV and may not be loadable by other programs. Therefore, if you need the results in a certain format, it may be better to use the <ref refid="rstutorial_1rs_rstut" kindref="member">C++ interface</ref> to manually export the data in the preferred format.</para>
<para>Below are several examples of simple usage (and the resultant output). The &apos;-v&apos; option is used so that output is given. Further documentation on each individual option can be found by typing</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_range_search<sp/>--help</highlight></codeline>
</programlisting></para>
<sect2 id="rstutorial_1cli_ex1_rstut">
<title>One dataset, points with distance &lt;= 0.01</title>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_range_search<sp/>-r<sp/>dataset.csv<sp/>-n<sp/>neighbors_out.csv<sp/>-d<sp/>distances_out.csv<sp/>\</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>-U<sp/>0.076<sp/>-v</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;dataset.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loaded<sp/>reference<sp/>data<sp/>from<sp/>&apos;dataset.csv&apos;<sp/>(3x1000).</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>reference<sp/>tree...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Tree<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>for<sp/>points<sp/>in<sp/>the<sp/>range<sp/>[0,<sp/>0.076]<sp/>with<sp/>dual-tree<sp/>kd-tree</highlight></codeline>
<codeline><highlight class="normal">search...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>distances_out.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>leaf_size:<sp/>20</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>max:<sp/>0.01</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>min:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>naive:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>neighbors_out.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>random_basis:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>dataset.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>seed:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>single_mode:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_type:<sp/>kd</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.005201s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>range_search/computing_neighbors:<sp/>0.017110s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.033313s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_building:<sp/>0.002500s</highlight></codeline>
</programlisting></para>
<para>Convenient program timers are given for different parts of the calculation at the bottom of the output, as well as the parameters the simulation was run with. Now, if we look at the output files:</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>head<sp/>neighbors_out.csv</highlight></codeline>
<codeline><highlight class="normal">862</highlight></codeline>
<codeline><highlight class="normal">703</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">397,<sp/>277,<sp/>319</highlight></codeline>
<codeline><highlight class="normal">840</highlight></codeline>
<codeline><highlight class="normal">732</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">361</highlight></codeline>
<codeline><highlight class="normal">547,<sp/>695</highlight></codeline>
<codeline><highlight class="normal">113,<sp/>982,<sp/>689</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>head<sp/>distances_out.csv</highlight></codeline>
<codeline><highlight class="normal">0.0598608</highlight></codeline>
<codeline><highlight class="normal">0.0753264</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">0.0207941,<sp/>0.0759762,<sp/>0.0471072</highlight></codeline>
<codeline><highlight class="normal">0.0708221</highlight></codeline>
<codeline><highlight class="normal">0.0568806</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">0.0700532</highlight></codeline>
<codeline><highlight class="normal">0.0529565,<sp/>0.0550988</highlight></codeline>
<codeline><highlight class="normal">0.0447142,<sp/>0.0399286,<sp/>0.0734605</highlight></codeline>
</programlisting></para>
<para>We can see that only point 862 is within distance 0.076 of point 0. We can also see that point 2 has no points within a distance of 0.076 <ndash/> that line is empty.</para>
</sect2>
<sect2 id="rstutorial_1cli_ex2_rstut">
<title>Query and reference dataset, range [1.0, 1.5]</title>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_range_search<sp/>-q<sp/>query_dataset.csv<sp/>-r<sp/>reference_dataset.csv<sp/>-n<sp/>\</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>neighbors_out.csv<sp/>-d<sp/>distances_out.csv<sp/>-L<sp/>1.0<sp/>-U<sp/>1.5<sp/>-v</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;reference_dataset.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loaded<sp/>reference<sp/>data<sp/>from<sp/>&apos;reference_dataset.csv&apos;<sp/>(3x1000).</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>reference<sp/>tree...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Tree<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;query_dataset.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>50.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loaded<sp/>query<sp/>data<sp/>from<sp/>&apos;query_dataset.csv&apos;<sp/>(3x50).</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>for<sp/>points<sp/>in<sp/>the<sp/>range<sp/>[1,<sp/>1.5]<sp/>with<sp/>dual-tree<sp/>kd-tree<sp/>search...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>query<sp/>tree...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Tree<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>distances_out.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>leaf_size:<sp/>20</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>max:<sp/>1.5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>min:<sp/>1</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>naive:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>neighbors_out.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>query_dataset.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>random_basis:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>reference_dataset.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>seed:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>single_mode:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_type:<sp/>kd</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.006199s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>range_search/computing_neighbors:<sp/>0.024427s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.045403s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_building:<sp/>0.003979s</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="rstutorial_1cli_ex3_rstut">
<title>One dataset, range [0.7 0.8], leaf size of 15 points</title>
<para>The <bold>mlpack</bold> implementation of range search is a dual-tree algorithm; when <formula id="193">$kd$</formula>-trees are used, the leaf size of the tree can be changed. Depending on the characteristics of the dataset, a larger or smaller leaf size can provide faster computation. The leaf size is modifiable through the command-line interface, as shown below.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_range_search<sp/>-r<sp/>dataset.csv<sp/>-n<sp/>neighbors_out.csv<sp/>-d<sp/>distances_out.csv<sp/>\</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>-L<sp/>0.7<sp/>-U<sp/>0.8<sp/>-l<sp/>15<sp/>-v</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;dataset.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loaded<sp/>reference<sp/>data<sp/>from<sp/>&apos;dataset.csv&apos;<sp/>(3x1000).</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>reference<sp/>tree...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Tree<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>for<sp/>points<sp/>in<sp/>the<sp/>range<sp/>[0.7,<sp/>0.8]<sp/>with<sp/>dual-tree<sp/>kd-tree</highlight></codeline>
<codeline><highlight class="normal">search...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>distances_out.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>leaf_size:<sp/>15</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>max:<sp/>0.8</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>min:<sp/>0.7</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>naive:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>neighbors_out.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>random_basis:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>dataset.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>seed:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>single_mode:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_type:<sp/>kd</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.006298s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>range_search/computing_neighbors:<sp/>0.411041s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.539931s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_building:<sp/>0.004695s</highlight></codeline>
</programlisting></para>
<para>Further documentation on options should be found by using the <ndash/>help option.</para>
</sect2>
</sect1>
<sect1 id="rstutorial_1rs_rstut">
<title>The &apos;RangeSearch&apos; class</title>
<para>The &apos;RangeSearch&apos; class is an extensible template class which allows a high level of flexibility. However, all of the template arguments have default parameters, allowing a user to simply use &apos;RangeSearch&lt;&gt;&apos; for simple usage without worrying about the exact necessary template parameters.</para>
<para>The class bears many similarities to the <ref refid="nstutorial" kindref="compound">NeighborSearch</ref> class; usage generally consists of calling the constructor with one or two datasets, and then calling the &apos;Search()&apos; method to perform the actual range search.</para>
<para>The &apos;Search()&apos; method stores the results in two vector-of-vector objects. This is necessary because each query point may have a different number of neighbors in the specified distance range. The structure of those two objects is very similar to the output files <ndash/>neighbors_file and <ndash/>distances_file for the CLI interface (see above). A handful of examples of simple usage of the RangeSearch class are given below.</para>
<sect2 id="rstutorial_1rs_ex1_rstut">
<title>Distance less than 2.0 on a single dataset</title>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/range_search/range_search.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::range;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Our<sp/>dataset<sp/>matrix,<sp/>which<sp/>is<sp/>column-major.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>data;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RangeSearch&lt;&gt;<sp/>a(data);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>vector-of-vector<sp/>objects<sp/>we<sp/>will<sp/>store<sp/>output<sp/>in.</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;std::vector&lt;size_t&gt;<sp/>&gt;<sp/>resultingNeighbors;</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;<sp/>resultingDistances;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>range<sp/>we<sp/>will<sp/>use.</highlight></codeline>
<codeline><highlight class="normal">math::Range<sp/>r(0.0,<sp/>2.0);<sp/>//<sp/>[0.0,<sp/>2.0].</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">a.Search(r,<sp/>resultingNeighbors,<sp/>resultingDistances);</highlight></codeline>
</programlisting></para>
<para>The output of the search is stored in resultingNeighbors and resultingDistances.</para>
</sect2>
<sect2 id="rstutorial_1rs_ex2_rstut">
<title>Range [3.0, 4.0] on a query and reference dataset</title>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/range_search/range_search.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::range;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Our<sp/>dataset<sp/>matrices,<sp/>which<sp/>are<sp/>column-major.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>queryData,<sp/>referenceData;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RangeSearch&lt;&gt;<sp/>a(referenceData);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>vector-of-vector<sp/>objects<sp/>we<sp/>will<sp/>store<sp/>output<sp/>in.</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;std::vector&lt;size_t&gt;<sp/>&gt;<sp/>resultingNeighbors;</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;<sp/>resultingDistances;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>range<sp/>we<sp/>will<sp/>use.</highlight></codeline>
<codeline><highlight class="normal">math::Range<sp/>r(3.0,<sp/>4.0);<sp/>//<sp/>[3.0,<sp/>4.0].</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">a.Search(queryData,<sp/>r,<sp/>resultingNeighbors,<sp/>resultingDistances);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="rstutorial_1rs_ex3_rstut">
<title>Naive (exhaustive) search for distance greater than 5.0 on one dataset</title>
<para>This example uses the O(n^2) naive search (not the tree-based search).</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/range_search/range_search.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::range;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Our<sp/>dataset<sp/>matrix,<sp/>which<sp/>is<sp/>column-major.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>dataset;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>&apos;true&apos;<sp/>option<sp/>indicates<sp/>that<sp/>we<sp/>will<sp/>use<sp/>naive<sp/>calculation.</highlight></codeline>
<codeline><highlight class="normal">RangeSearch&lt;&gt;<sp/>a(dataset,<sp/>true);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>vector-of-vector<sp/>objects<sp/>we<sp/>will<sp/>store<sp/>output<sp/>in.</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;std::vector&lt;size_t&gt;<sp/>&gt;<sp/>resultingNeighbors;</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;<sp/>resultingDistances;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>range<sp/>we<sp/>will<sp/>use.<sp/><sp/>The<sp/>upper<sp/>bound<sp/>is<sp/>DBL_MAX.</highlight></codeline>
<codeline><highlight class="normal">math::Range<sp/>r(5.0,<sp/>DBL_MAX);<sp/>//<sp/>[5.0,<sp/>inf).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">a.Search(r,<sp/>resultingNeighbors,<sp/>resultingDistances);</highlight></codeline>
</programlisting></para>
<para>Needless to say, naive search can be very slow...</para>
</sect2>
</sect1>
<sect1 id="rstutorial_1rs_ext_rstut">
<title>The extensible &apos;RangeSearch&apos; class</title>
<para>Similar to the <ref refid="nstutorial" kindref="compound">NeighborSearch class</ref>, the RangeSearch class is very extensible, having the following template arguments:</para>
<para><programlisting><codeline><highlight class="normal">template&lt;typename<sp/>MetricType<sp/>=<sp/>metric::EuclideanDistance,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>MatType<sp/>=<sp/>arma::mat,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>TreeMetricType,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>TreeStatType,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>TreeMatType&gt;<sp/>class<sp/>TreeType<sp/>=<sp/>tree::KDTree&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>RangeSearch;</highlight></codeline>
</programlisting></para>
<para>By choosing different components for each of these template classes, a very arbitrary range searching object can be constructed.</para>
<sect2 id="rstutorial_1metric_type_doc_rstut">
<title>MetricType policy class</title>
<para>The MetricType policy class allows the range search to take place in any arbitrary metric space. The <ref refid="classmlpack_1_1metric_1_1LMetric" kindref="compound">mlpack::metric::LMetric</ref> class is a good example implementation. A MetricType class must provide the following functions:</para>
<para><programlisting><codeline><highlight class="normal">//<sp/>Empty<sp/>constructor<sp/>is<sp/>required.</highlight></codeline>
<codeline><highlight class="normal">MetricType();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Compute<sp/>the<sp/>distance<sp/>between<sp/>two<sp/>points.</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>VecType&gt;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>Evaluate(const<sp/>VecType&amp;<sp/>a,<sp/>const<sp/>VecType&amp;<sp/>b);</highlight></codeline>
</programlisting></para>
<para>Internally, the RangeSearch class keeps an instantiated MetricType class (which can be given in the constructor). This is useful for a metric like the Mahalanobis distance (<ref refid="classmlpack_1_1metric_1_1MahalanobisDistance" kindref="compound">mlpack::metric::MahalanobisDistance</ref>), which must store state (the covariance matrix). Therefore, you can write a non-static MetricType class and use it seamlessly with RangeSearch.</para>
</sect2>
<sect2 id="rstutorial_1mat_type_doc_rstut">
<title>MatType policy class</title>
<para>The MatType template parameter specifies the type of data matrix used. This type must implement the same operations as an Armadillo matrix, and so standard choices are <computeroutput>arma::mat</computeroutput> and <computeroutput>arma::sp_mat</computeroutput>.</para>
</sect2>
<sect2 id="rstutorial_1tree_type_doc_rstut">
<title>TreeType policy class</title>
<para>The RangeSearch class also allows a custom tree to be used. The TreeType policy is also used elsewhere in mlpack and is documented more thoroughly <ref refid="trees" kindref="compound">here</ref>.</para>
<para>Typical choices might include <ref refid="namespacemlpack_1_1tree_1a73c2146f8d1da65d927c7746bfe7e750" kindref="member">mlpack::tree::KDTree</ref> (the default), <ref refid="namespacemlpack_1_1tree_1a9d4905444011bbd045122cc985638b32" kindref="member">mlpack::tree::BallTree</ref>, <ref refid="namespacemlpack_1_1tree_1ae4af35641769744ba680cc934e1c1f0e" kindref="member">mlpack::tree::RTree</ref>, <ref refid="namespacemlpack_1_1tree_1a879db9c5c88d62f13f4a1667bc5adf5c" kindref="member">mlpack::tree::RStarTree</ref>, or <ref refid="namespacemlpack_1_1tree_1a6ed9d585969e7837af0d41e0c3975602" kindref="member">mlpack::tree::StandardCoverTree</ref>. Below is an example that uses the RangeSearch class with an R-tree:</para>
<para><programlisting><codeline><highlight class="normal">//<sp/>Construct<sp/>a<sp/>RangeSearch<sp/>object<sp/>with<sp/>ball<sp/>bounds.</highlight></codeline>
<codeline><highlight class="normal">RangeSearch&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>metric::EuclideanDistance,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arma::mat,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tree::RTree</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>rangeSearch(dataset);</highlight></codeline>
</programlisting></para>
<para>For further information on trees, including how to write your own tree for use with RangeSearch and other mlpack methods, see the <ref refid="trees" kindref="compound">TreeType policy documentation</ref>.</para>
</sect2>
</sect1>
<sect1 id="rstutorial_1further_doc_rstut">
<title>Further documentation</title>
<para>For further documentation on the RangeSearch class, consult the <ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">complete API documentation</ref>. </para>
</sect1>
    </detaileddescription>
    <location file="/home/aakash/mlpack/doc/tutorials/range_search/range_search.txt"/>
  </compounddef>
</doxygen>
