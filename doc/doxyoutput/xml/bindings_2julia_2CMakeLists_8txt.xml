<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="bindings_2julia_2CMakeLists_8txt" kind="file" language="C++">
    <compoundname>CMakeLists.txt</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="bindings_2julia_2CMakeLists_8txt_1ad6d0eb7ab1ee4b4fd200da5b6970baba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cannot build Julia bindings</type>
        <definition>n testthat endif</definition>
        <argsstring>() else() find_package(Julia 0.7.0) if(NOT JULIA_FOUND) unset(BUILD_JULIA_BINDINGS CACHE) endif() endif() if(NOT JULIA_FOUND) not_found_return(&quot;Julia not found</argsstring>
        <name>endif</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/julia/CMakeLists.txt" line="45" column="3" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/julia/CMakeLists.txt" bodystart="45" bodyend="50" declfile="/home/aakash/mlpack/src/mlpack/bindings/julia/CMakeLists.txt" declline="35" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="bindings_2julia_2CMakeLists_8txt_1ae3c78318430973e75c1cfd2581eef149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>macro</definition>
        <argsstring>(add_julia_binding name) endmacro() return() endmacro() macro(post_julia_setup) if(BUILD_JULIA_BINDINGS) file(APPEND &quot;$</argsstring>
        <name>macro</name>
        <param>
          <type><ref refid="bindings_2julia_2tests_2CMakeLists_8txt_1ae685258df021a14510fa0ed9764a5cbc" kindref="member">add_julia_binding</ref></type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/julia/CMakeLists.txt" line="3" column="3" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/julia/CMakeLists.txt" bodystart="3" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="bindings_2julia_2CMakeLists_8txt_1a9119971a8d6df98dd1edabc89b0107f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>macro</definition>
        <argsstring>(not_found_return message) message(STATUS &quot;$</argsstring>
        <name>macro</name>
        <param>
          <type>not_found_return</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/julia/CMakeLists.txt" line="1" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/julia/CMakeLists.txt" bodystart="1" bodyend="2"/>
      </memberdef>
      <memberdef kind="function" id="bindings_2julia_2CMakeLists_8txt_1a3bdbbc68efdd23ade8fce5ca24e2ed3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>src mlpack bindings <ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref> mlpack src mlpack jl nend</type>
        <definition>src mlpack bindings julia mlpack src mlpack jl nend ninclude</definition>
        <argsstring>(\&quot;functions.jl\&quot;)\ninclude(\&quot;serialization.jl\&quot;)\nend\n&quot;) endif() endmacro() if(NOT BUILD_JULIA_BINDINGS) not_found_return(&quot;Not building Julia bindings.&quot;) endif() if(BUILD_JULIA_BINDINGS) if(FORCE_BUILD_JULIA_BINDINGS) find_package(Julia 0.7.0) if(NOT JULIA_FOUND) unset(BUILD_JULIA_BINDINGS CACHE) message(FATAL_ERROR &quot;Julia not found</argsstring>
        <name>ninclude</name>
        <param>
          <type>\&quot;functions.jl\&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/julia/CMakeLists.txt" line="16" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/julia/CMakeLists.txt" declline="16" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="bindings_2julia_2CMakeLists_8txt_1a9119971a8d6df98dd1edabc89b0107f5" refkind="member"><highlight class="normal"><ref refid="bindings_2go_2CMakeLists_8txt_1a9119971a8d6df98dd1edabc89b0107f5" kindref="member">macro</ref><sp/>(not_found_return<sp/>message)</highlight></codeline>
<codeline lineno="2"><highlight class="normal"><sp/><sp/>message(STATUS<sp/></highlight><highlight class="stringliteral">&quot;${message}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3" refid="bindings_2julia_2CMakeLists_8txt_1ae3c78318430973e75c1cfd2581eef149" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="bindings_2go_2CMakeLists_8txt_1a9119971a8d6df98dd1edabc89b0107f5" kindref="member">macro</ref><sp/>(<ref refid="bindings_2julia_2tests_2CMakeLists_8txt_1ae685258df021a14510fa0ed9764a5cbc" kindref="member">add_julia_binding</ref><sp/>name)</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#<sp/>Do<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/>endmacro<sp/>()</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/>return()</highlight></codeline>
<codeline lineno="8"><highlight class="normal">endmacro<sp/>()</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><ref refid="bindings_2go_2CMakeLists_8txt_1a9119971a8d6df98dd1edabc89b0107f5" kindref="member">macro</ref><sp/>(post_julia_setup)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#<sp/>If<sp/>we<sp/>are<sp/>building<sp/>Julia<sp/>bindings,<sp/>we<sp/>have<sp/>to<sp/>end<sp/>the<sp/>&apos;module&apos;<sp/>declaration<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/>mlpack.jl.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BUILD_JULIA_BINDINGS)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>file(APPEND</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/src/mlpack.jl&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="bindings_2julia_2CMakeLists_8txt_1a3bdbbc68efdd23ade8fce5ca24e2ed3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\nend\ninclude(\&quot;functions.jl\&quot;)\ninclude(\&quot;serialization.jl\&quot;)\nend\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><ref refid="bindings_2julia_2CMakeLists_8txt_1ad6d0eb7ab1ee4b4fd200da5b6970baba" kindref="member">endif</ref><sp/>()</highlight></codeline>
<codeline lineno="18"><highlight class="normal">endmacro<sp/>()</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>If<sp/>we<sp/>are<sp/>not<sp/>supposed<sp/>to<sp/>make<sp/>Julia<sp/>bindings,<sp/>define<sp/>the<sp/>macro<sp/>so<sp/>it<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>nothing<sp/>and<sp/>leave<sp/>this<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NOT<sp/>BUILD_JULIA_BINDINGS)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>not_found_return(</highlight><highlight class="stringliteral">&quot;Not<sp/>building<sp/>Julia<sp/>bindings.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="bindings_2julia_2CMakeLists_8txt_1ad6d0eb7ab1ee4b4fd200da5b6970baba" kindref="member">endif</ref><sp/>()</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><ref refid="bindings_2go_2CMakeLists_8txt_1a81b53a1ab05b48531c7d8b930ed65ee9" kindref="member">if</ref><sp/>(BUILD_JULIA_BINDINGS)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">##<sp/>We<sp/>need<sp/>to<sp/>check<sp/>here<sp/>if<sp/>Julia<sp/>is<sp/>even<sp/>available.<sp/><sp/>Although<sp/>actually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>##<sp/>technically,<sp/>I&apos;m<sp/>not<sp/>sure<sp/>if<sp/>we<sp/>even<sp/>need<sp/>to<sp/>know!<sp/><sp/>For<sp/>the<sp/>tests<sp/>though<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>##<sp/>do.<sp/><sp/>So<sp/>it&apos;s<sp/>probably<sp/>a<sp/>good<sp/>idea<sp/>to<sp/>check.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FORCE_BUILD_JULIA_BINDINGS)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>find_package(Julia<sp/>0.7.0)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NOT<sp/>JULIA_FOUND)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unset(BUILD_JULIA_BINDINGS<sp/>CACHE)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message(FATAL_ERROR<sp/></highlight><highlight class="stringliteral">&quot;Julia<sp/>not<sp/>found;<sp/>cannot<sp/>build<sp/>Julia<sp/>bindings!&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bindings_2julia_2CMakeLists_8txt_1ad6d0eb7ab1ee4b4fd200da5b6970baba" kindref="member">endif</ref>()</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>else<sp/>()</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>find_package(Julia<sp/>0.7.0)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bindings_2go_2CMakeLists_8txt_1a81b53a1ab05b48531c7d8b930ed65ee9" kindref="member">if</ref><sp/>(NOT<sp/>JULIA_FOUND)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unset(BUILD_JULIA_BINDINGS<sp/>CACHE)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bindings_2julia_2CMakeLists_8txt_1ad6d0eb7ab1ee4b4fd200da5b6970baba" kindref="member">endif</ref>()</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="bindings_2julia_2CMakeLists_8txt_1ad6d0eb7ab1ee4b4fd200da5b6970baba" kindref="member">endif</ref><sp/>()</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="bindings_2go_2CMakeLists_8txt_1a81b53a1ab05b48531c7d8b930ed65ee9" kindref="member">if</ref><sp/>(NOT<sp/>JULIA_FOUND)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>not_found_return(&quot;Julia<sp/>not<sp/>found;<sp/>not<sp/>building<sp/>Julia<sp/>bindings.&quot;)</highlight></codeline>
<codeline lineno="45" refid="bindings_2julia_2CMakeLists_8txt_1ad6d0eb7ab1ee4b4fd200da5b6970baba" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="bindings_2julia_2CMakeLists_8txt_1ad6d0eb7ab1ee4b4fd200da5b6970baba" kindref="member">endif</ref><sp/>()</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="bindings_2python_2CMakeLists_8txt_1a5b4074bc3828c30b7aacd91ad914c7ba" kindref="member">add_custom_target</ref>(<ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref><sp/>ALL)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>add_custom_command(TARGET<sp/><ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref><sp/>PRE_BUILD</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>COMMAND<sp/>${CMAKE_COMMAND}<sp/>-E<sp/>make_directory</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_BINARY_DIR}/src/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/bindings/<ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref>/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/src/)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>add_library(mlpack_julia_util</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>julia_util.h</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>julia_util.cpp)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>target_link_libraries(mlpack_julia_util<sp/><ref refid="namespacemlpack" kindref="compound">mlpack</ref>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>set_target_properties(mlpack_julia_util<sp/>PROPERTIES</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LIBRARY_OUTPUT_DIRECTORY<sp/></highlight><highlight class="stringliteral">&quot;${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/src/&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>add_dependencies(<ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref><sp/>mlpack_julia_util)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#<sp/>Now<sp/>configure<sp/>Project.toml.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>file(READ<sp/></highlight><highlight class="stringliteral">&quot;${CMAKE_SOURCE_DIR}/src/mlpack/core/util/version.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VERSION_HPP_CONTENTS)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>string(REGEX<sp/>REPLACE<sp/></highlight><highlight class="stringliteral">&quot;.*#define<sp/>MLPACK_VERSION_MAJOR<sp/>([0-9]+).*&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\\1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="src_2mlpack_2core_2util_2version_8hpp_1a567633158089daf2701fa92e4a61412d" kindref="member">MLPACK_VERSION_MAJOR</ref><sp/></highlight><highlight class="stringliteral">&quot;${VERSION_HPP_CONTENTS}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>string(REGEX<sp/>REPLACE<sp/></highlight><highlight class="stringliteral">&quot;.*#define<sp/>MLPACK_VERSION_MINOR<sp/>([0-9]+).*&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\\1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="src_2mlpack_2core_2util_2version_8hpp_1af78b6f6b98b2da5018980e12d3f6a071" kindref="member">MLPACK_VERSION_MINOR</ref><sp/></highlight><highlight class="stringliteral">&quot;${VERSION_HPP_CONTENTS}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>string(REGEX<sp/>REPLACE<sp/></highlight><highlight class="stringliteral">&quot;.*#define<sp/>MLPACK_VERSION_PATCH<sp/>[\&quot;]?([0-9x]+)[\&quot;]?.*&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\\1&quot;</highlight><highlight class="normal"><sp/><ref refid="src_2mlpack_2core_2util_2version_8hpp_1a15e1dc931a5bfb5a7d389aea99df4972" kindref="member">MLPACK_VERSION_PATCH</ref><sp/></highlight><highlight class="stringliteral">&quot;${VERSION_HPP_CONTENTS}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="bindings_2cli_2CMakeLists_8txt_1a6cb7600e385afaebaa9cd3321e336597" kindref="member">set</ref>(PACKAGE_VERSION</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;${MLPACK_VERSION_MAJOR}.${MLPACK_VERSION_MINOR}.${MLPACK_VERSION_PATCH}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="bindings_2go_2CMakeLists_8txt_1a8fd9689bcd710a0fb5deb9e3bdbbd0b5" kindref="member">get_property</ref>(CYTHON_INCLUDE_DIRECTORIES<sp/>DIRECTORY<sp/>${CMAKE_CURRENT_SOURCE_DIR}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PROPERTY<sp/>INCLUDE_DIRECTORIES)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>configure_file(${CMAKE_SOURCE_DIR}/src/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/bindings/<ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref>/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/Project.toml.in</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_BINARY_DIR}/src/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/bindings/<ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref>/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/Project.toml)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>#<sp/>Configure<sp/>io.jl.in<sp/>with<sp/>the<sp/>right<sp/>suffix<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>libraries.</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>configure_file(${CMAKE_SOURCE_DIR}/src/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/bindings/<ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref>/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/io.jl.in</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_BINARY_DIR}/src/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/bindings/<ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref>/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/src/io.jl)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>#<sp/>Create<sp/>the<sp/>empty<sp/><ref refid="namespacemlpack" kindref="compound">mlpack</ref>.jl<sp/>file<sp/>that<sp/>we<sp/>will<sp/>fill<sp/>with<sp/>includes<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>the</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>#<sp/>exsiting<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">.<sp/><sp/>Unfortunately<sp/>COPY<sp/>doesn</highlight><highlight class="stringliteral">&apos;t<sp/>let<sp/>us<sp/>change<sp/>the<sp/>extension</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"><sp/><sp/>#<sp/>so<sp/>we<sp/>need<sp/>a<sp/>follow-up<sp/>RENAME<sp/>command.</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/>file(COPY</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;${CMAKE_CURRENT_SOURCE_DIR}/mlpack/mlpack.jl.in&quot;</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DESTINATION</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/src/&quot;)</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/>file(RENAME</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/src/mlpack.jl.in&quot;</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/src/mlpack.jl&quot;)</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/>file(WRITE</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/src/functions.jl&quot;</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#<sp/>This<sp/>file<sp/>imports<sp/>all<sp/>of<sp/>the<sp/>mlpack<sp/>functions<sp/>into<sp/>the<sp/>mlpack<sp/>module.&quot;</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\n\n&quot;)</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/>file(WRITE</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/src/types.jl&quot;</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#<sp/>This<sp/>file<sp/>defines<sp/>all<sp/>of<sp/>the<sp/>mlpack<sp/>types.&quot;</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\n\n&quot;)</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/>file(WRITE</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/src/serialization.jl&quot;</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#<sp/>This<sp/>file<sp/>imports<sp/>all<sp/>serialization<sp/>and<sp/>deserialization<sp/>functions\n&quot;</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#<sp/>from<sp/>internal<sp/>modules.\n&quot;</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;import<sp/>Serialization\n&quot;</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\n&quot;</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\&quot;\&quot;\&quot;\n&quot;</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/><sp/><sp/><sp/>serialize_bin(stream::IO,<sp/>model)\n&quot;</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\n&quot;</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Serialize<sp/>an<sp/>mlpack<sp/>model<sp/>`model`<sp/>in<sp/>the<sp/>binary<sp/>cereal<sp/>format<sp/>to<sp/>the<sp/>\n&quot;</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;given<sp/>`stream`.<sp/><sp/>Example:\n&quot;</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\n&quot;</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;```julia\n&quot;</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;_,<sp/>model,<sp/>_,<sp/>_<sp/>=<sp/>mlpack.logistic_regression(training=x,<sp/>labels=y)\n&quot;</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;mlpack.serialize_bin(open(\&quot;model.bin\&quot;,<sp/>\&quot;w\&quot;),<sp/>model)\n&quot;</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;```\n&quot;</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\n&quot;</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;The<sp/>model<sp/>can<sp/>later<sp/>be<sp/>loaded<sp/>with<sp/>`mlpack.deserialize_bin()`,<sp/>or<sp/>even\n&quot;</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;from<sp/>mlpack<sp/>bindings<sp/>in<sp/>other<sp/>languages.<sp/><sp/>However,<sp/>the<sp/>format<sp/>used\n&quot;</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;here<sp/>will<sp/>*not*<sp/>work<sp/>with<sp/>Julia&apos;</highlight><highlight class="normal">s<sp/>`Serialization`<sp/>package!<sp/><sp/>Use\n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">`Serialization.serialize()`<sp/>instead.\n</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">\</highlight><highlight class="stringliteral">&quot;\&quot;\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;function<sp/>serialize_bin(stream::IO,<sp/>model)<sp/>end\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;\&quot;\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>deserialize_bin(stream::IO,<sp/>model_type::Type)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Deserialize<sp/>an<sp/>mlpack<sp/>model<sp/>type<sp/>from<sp/>an<sp/>input<sp/>stream.<sp/><sp/>Specify<sp/>the<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;type<sp/>of<sp/>the<sp/>model<sp/>manually<sp/>with<sp/>the<sp/>`t`<sp/>argument.<sp/><sp/>Example<sp/>usage:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;```julia\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;lr_model<sp/>=<sp/>mlpack.deserialize_bin(stream,<sp/>LogisticRegression)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;```\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>use<sp/>this<sp/>if<sp/>you<sp/>have<sp/>saved<sp/>the<sp/>model<sp/>in<sp/>the<sp/>cereal<sp/>binary<sp/>format<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;using<sp/>`serialize_bin()`<sp/>or<sp/>an<sp/>mlpack<sp/>binding<sp/>in<sp/>another<sp/>language!<sp/><sp/>If<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;you<sp/>used<sp/>`Serialization.serialize()`<sp/>to<sp/>serialize<sp/>your<sp/>model,<sp/>then<sp/>use\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;`Serialization.deserialize()`<sp/>to<sp/>deserialize<sp/>it.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Then,<sp/>the<sp/>returned<sp/>model<sp/>can<sp/>be<sp/>passed<sp/>to<sp/>appropriate<sp/>mlpack<sp/>functions\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;for<sp/>machine<sp/>learning<sp/>tasks.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;\&quot;\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;function<sp/>deserialize_bin(stream::IO,<sp/>t::Type)<sp/>end&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><ref refid="bindings_2julia_2CMakeLists_8txt_1ad6d0eb7ab1ee4b4fd200da5b6970baba" kindref="member">endif</ref><sp/>()</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><ref refid="bindings_2R_2CMakeLists_8txt_1a45548f086df473757b6a7c11f719387c" kindref="member">include</ref>(</highlight><highlight class="stringliteral">&quot;${CMAKE_SOURCE_DIR}/CMake/julia/AppendType.cmake&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="bindings_2R_2CMakeLists_8txt_1a45548f086df473757b6a7c11f719387c" kindref="member">include</ref>(&quot;${CMAKE_SOURCE_DIR}/CMake/<ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref>/AppendSerialization.cmake</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral">macro<sp/>(add_julia_binding<sp/>name)</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral">if<sp/>(BUILD_JULIA_BINDINGS)</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/>#<sp/>We<sp/>have<sp/>to<sp/>take<sp/>multiple<sp/>steps.</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/>#<sp/>1.<sp/>Generate<sp/>julia_${name}.h<sp/>and<sp/>julia_${name}.cpp.</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/>add_custom_command(OUTPUT</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/build/julia_${name}.h</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/build/julia_${name}.cpp</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMMAND<sp/>${CMAKE_COMMAND}</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DPROGRAM_NAME=${name}</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DPROGRAM_MAIN_FILE=${CMAKE_CURRENT_SOURCE_DIR}/${name}_main.cpp</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DSOURCE_DIR=${CMAKE_SOURCE_DIR}</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DJULIA_H_IN=${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/julia_method.h.in</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DJULIA_H_OUT=${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/build/julia_${name}.h</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DJULIA_CPP_IN=${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/julia_method.cpp.in</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DJULIA_CPP_OUT=${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/build/julia_${name}.cpp</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-P<sp/>${CMAKE_SOURCE_DIR}/CMake/julia/ConfigureJuliaHCPP.cmake</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>DEPENDS<sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/julia_method.h.in</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/julia_method.cpp.in</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/CMake/julia/ConfigureJuliaHCPP.cmake)</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"><sp/><sp/>#<sp/>2.<sp/>Append<sp/>any<sp/>types<sp/>to<sp/>the<sp/>list<sp/>of<sp/>types<sp/>and<sp/>serialization<sp/>imports<sp/>(this<sp/>is</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/>#<sp/>done<sp/>immediately,<sp/>not<sp/>as<sp/>a<sp/>separate<sp/>target).</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"><sp/><sp/>append_type(</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">${CMAKE_BINARY_DIR}/src/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/bindings/<ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref>/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/src/types.jl</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">${name}</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">${CMAKE_CURRENT_SOURCE_DIR}/${name}_main.cpp</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/>append_serialization(</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">${CMAKE_BINARY_DIR}/src/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/bindings/<ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref>/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/src/serialization.jl</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">${name}</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">${CMAKE_CURRENT_SOURCE_DIR}/${name}_main.cpp</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/>#<sp/>3.<sp/>Build<sp/>libmlpack_julia_${name}.so.</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/>add_library(mlpack_julia_${name}</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/build/julia_${name}.h</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/build/julia_${name}.cpp)</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/>target_link_libraries(mlpack_julia_${name}<sp/>mlpack<sp/>mlpack_julia_util)</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/>set_target_properties(mlpack_julia_${name}<sp/>PROPERTIES</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>LIBRARY_OUTPUT_DIRECTORY<sp/>&quot;</highlight><highlight class="normal">${CMAKE_BINARY_DIR}/src/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/bindings/<ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref>/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/src/</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/>#<sp/>4.<sp/>Generate<sp/>${name}.jl.</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/>add_custom_command(OUTPUT<sp/>${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/build/generate_jl_${name}.cpp</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMMAND<sp/>${CMAKE_COMMAND}</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DNAME=${name}</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DGENERATE_CPP_IN=${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/generate_jl.cpp.in</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DGENERATE_CPP_OUT=${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/build/generate_jl_${name}.cpp</highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DPROGRAM_MAIN_FILE=${CMAKE_CURRENT_SOURCE_DIR}/${name}_main.cpp</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DMLPACK_JL_LIB_SUFFIX=${CMAKE_SHARED_LIBRARY_SUFFIX}</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-P<sp/>${CMAKE_SOURCE_DIR}/CMake/ConfigureFile.cmake</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>DEPENDS<sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/generate_jl.cpp.in</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/CMake/ConfigureFile.cmake)</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"><sp/><sp/>add_executable(generate_jl_${name}</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/build/generate_jl_${name}.cpp</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/print_jl.hpp</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/print_jl.cpp</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/get_julia_type.hpp</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/get_param.hpp</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/get_printable_param.hpp</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/julia_option.hpp</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/print_doc_functions.hpp</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/print_doc_functions_impl.hpp</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/print_input_param.hpp</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/print_input_processing.hpp</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/print_input_processing_impl.hpp</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/print_output_processing.hpp</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/print_output_processing_impl.hpp</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/print_param_defn.hpp</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/print_type_doc.hpp</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/print_type_doc_impl.hpp</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/print_model_type_import.hpp</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/default_param.hpp</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/src/mlpack/bindings/julia/default_param_impl.hpp)</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/>target_link_libraries(generate_jl_${name}<sp/>mlpack<sp/>${MLPACK_LIBRARIES})</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/>set_target_properties(generate_jl_${name}<sp/>PROPERTIES</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMPILE_FLAGS<sp/>&quot;</highlight><highlight class="normal">-DBINDING_TYPE=<ref refid="mlpack__main_8hpp_1a2d8bab3de14f4ce546816c38be1dadf2" kindref="member">BINDING_TYPE_JL</ref></highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>RUNTIME_OUTPUT_DIRECTORY<sp/>&quot;</highlight><highlight class="normal">${CMAKE_BINARY_DIR}/src/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/bindings/<ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref>/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/build/bin/</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/>add_custom_command(TARGET<sp/>generate_jl_${name}<sp/>POST_BUILD</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMMAND<sp/>${CMAKE_COMMAND}</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DGENERATE_BINDING_PROGRAM=${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/build/bin/generate_jl_${name}</highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DBINDING_OUTPUT_FILE=${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/src/${name}.jl</highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-P<sp/>${CMAKE_SOURCE_DIR}/CMake/GenerateBinding.cmake)</highlight></codeline>
<codeline lineno="234"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral"><sp/><sp/>#<sp/>Add<sp/>the<sp/>generate_jl_${name}<sp/>target<sp/>to<sp/>the<sp/>list<sp/>of<sp/>targets<sp/>that<sp/>are<sp/>built</highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral"><sp/><sp/>#<sp/>when<sp/>&apos;make<sp/>julia&apos;<sp/>is<sp/>typed.</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"><sp/><sp/>add_dependencies(julia<sp/>mlpack_julia_${name})</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"><sp/><sp/>add_dependencies(julia<sp/>generate_jl_${name})</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/>#<sp/>Append<sp/>the<sp/>binding<sp/>to<sp/>the<sp/>mlpack.jl<sp/>file.<sp/><sp/>(Note<sp/>that<sp/>this<sp/>is<sp/>done<sp/>at</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"><sp/><sp/>#<sp/>configuration<sp/>time.)</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/>file(APPEND</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">${CMAKE_BINARY_DIR}/src/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/bindings/<ref refid="methods_2nmf_2CMakeLists_8txt_1a24991bea13cdec9759e0db813306fe5f" kindref="member">julia</ref>/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>/src/<ref refid="namespacemlpack" kindref="compound">mlpack</ref>.jl</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><ref refid="bindings_2R_2CMakeLists_8txt_1a45548f086df473757b6a7c11f719387c" kindref="member">include</ref>(\</highlight><highlight class="stringliteral">&quot;${name}.jl\&quot;)\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#<sp/>Append<sp/>the<sp/>code<sp/>to<sp/>define<sp/>the<sp/>function<sp/>in<sp/>the<sp/>module.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>file(APPEND</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;${CMAKE_BINARY_DIR}/src/mlpack/bindings/julia/mlpack/src/functions.jl&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;${name}<sp/>=<sp/>_Internal.${name}\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><ref refid="bindings_2julia_2CMakeLists_8txt_1ad6d0eb7ab1ee4b4fd200da5b6970baba" kindref="member">endif</ref><sp/>()</highlight></codeline>
<codeline lineno="251"><highlight class="normal">endmacro<sp/>()</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><ref refid="bindings_2go_2CMakeLists_8txt_1a81b53a1ab05b48531c7d8b930ed65ee9" kindref="member">if</ref><sp/>(BUILD_TESTS<sp/>AND<sp/>BUILD_JULIA_BINDINGS)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><ref refid="bindings_2CMakeLists_8txt_1a2dd21fa7c63bb562d3816a9953ff1594" kindref="member">add_subdirectory</ref>(tests)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><ref refid="bindings_2julia_2CMakeLists_8txt_1ad6d0eb7ab1ee4b4fd200da5b6970baba" kindref="member">endif</ref><sp/>()</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/bindings/julia/CMakeLists.txt"/>
  </compounddef>
</doxygen>
