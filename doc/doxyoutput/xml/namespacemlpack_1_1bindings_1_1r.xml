<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacemlpack_1_1bindings_1_1r" kind="namespace" language="C++">
    <compoundname>mlpack::bindings::r</compoundname>
    <innerclass refid="classmlpack_1_1bindings_1_1r_1_1ROption" prot="public">mlpack::bindings::r::ROption</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a60b48cbfcab8cd0d8cf3fb24ce42cc2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::DefaultParam</definition>
        <argsstring>(util::ParamData &amp;data, const void *, void *output)</argsstring>
        <name>DefaultParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Return the default value of an option. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the function that will be placed into the <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> functionMap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/default_param.hpp" line="80" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/default_param.hpp" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ac456242613c2898472096ce725d8e9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::DefaultParamImpl</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::string &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; mlpack::data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>DefaultParamImpl</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::string &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">mlpack::data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the default value of an option. </para>
        </briefdescription>
        <detaileddescription>
<para>This is for regular types. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/default_param.hpp" line="27" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/default_param.hpp" declline="27" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ae74807c312f36179f863f09e9b525b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::DefaultParamImpl</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>DefaultParamImpl</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the default value of a model option (this returns the default filename, or &apos;&apos; if the default is no file). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/default_param.hpp" line="70" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/default_param.hpp" declline="70" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a3f035ce98131e1a11f2242f861f8b244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::DefaultParamImpl</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; std::is_same&lt; T, std::string &gt;&gt;::type *=0)</argsstring>
        <name>DefaultParamImpl</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::string &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the default value of a string option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/default_param.hpp" line="48" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/default_param.hpp" declline="48" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a6b5c1451baee904265c07e8c25d2cb9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::DefaultParamImpl</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>DefaultParamImpl</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the default value of a vector option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/default_param.hpp" line="40" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/default_param.hpp" declline="40" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1aca4452a09cb627104777ff8487509a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::DefaultParamImpl</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if_c&lt; arma::is_arma_type&lt; T &gt;::value||std::is_same&lt; T, std::tuple&lt; mlpack::data::DatasetInfo, arma::mat &gt;&gt;::value &gt;::type *=0)</argsstring>
        <name>DefaultParamImpl</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if_c&lt; arma::is_arma_type&lt; T &gt;::value||std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">mlpack::data::DatasetInfo</ref>, arma::mat &gt;&gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the default value of a matrix option, a tuple option, a serializable option, or a string option (this returns the default filename, or &apos;&apos; if the default is no file). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/default_param.hpp" line="58" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/default_param.hpp" declline="58" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a6b49a2adbbcd41e406784ca9c216da92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetBindingName</definition>
        <argsstring>(const std::string &amp;bindingName)</argsstring>
        <name>GetBindingName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bindingName</declname>
        </param>
        <briefdescription>
<para>Given the name of a binding, print its R name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="25" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="25" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a82f1f31d6d8f5831904f0de8b18fa9e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::GetParam</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *output)</argsstring>
        <name>GetParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>All R binding types are exactly what is held in the ParamData, so no special handling is necessary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_param.hpp" line="26" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_param.hpp" bodystart="26" bodyend="31"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a5631e53497794fca1a1b42b73bd629d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print an option of a simple type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_param.hpp" line="26" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_param.hpp" bodystart="26" bodyend="37"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a323f3f95fd169fd91f70851005ad599f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print a serializable class option (this prints the class name). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_param.hpp" line="75" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_param.hpp" bodystart="75" bodyend="83"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ab817dd4415d7a543385435500b0bc2aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print a matrix option (this prints its size). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_param.hpp" line="59" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_param.hpp" bodystart="59" bodyend="69"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a9517c5fcfcb6b298d1a51667fc162387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print a combination DatasetInfo/matrix parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_param.hpp" line="89" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_param.hpp" bodystart="89" bodyend="102"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a4493f104d9542018fbce6baea8ef9208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::enable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print a vector option, with spaces between it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_param.hpp" line="43" column="13" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_param.hpp" bodystart="43" bodyend="53"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a52e4712e3e9a26a913be87635f430e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::GetPrintableParam</definition>
        <argsstring>(util::ParamData &amp;data, const void *, void *output)</argsstring>
        <name>GetPrintableParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Print an option into a std::string. </para>
        </briefdescription>
        <detaileddescription>
<para>This should print a short, one-line representation of the object. The string will be stored in the output pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(input) Unused parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Output storage for the string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_param.hpp" line="114" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_param.hpp" bodystart="114" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a6d745f299b5efade5bf040f1f48dcfb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" line="24" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" declline="24" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ab17146d00613cb7f6525f4fb0ca557bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" line="85" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" declline="85" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1abeaa1f0fac00fc9c3b875c18fb6de04c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" line="92" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" declline="92" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a99f759b31c110574a572345aa0c2c8f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableType</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" line="98" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" declline="98" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ac5ab8731e5aa33f96e3da403567b2de4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableType</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::enable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetPrintableType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" line="78" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" declline="78" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1aefd22c9c4987eaebed12bd7309723b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::GetPrintableType</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *output)</argsstring>
        <name>GetPrintableType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" line="106" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" bodystart="106" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a904be5ad6a2925c9bbebd70169ad60f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableType&lt; bool &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; bool, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetPrintableType&lt; bool &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; bool, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" line="69" column="8" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" declline="69" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a1d8258435d8732dc06eb707df901b4e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableType&lt; double &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; double, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetPrintableType&lt; double &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; double, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" line="42" column="8" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" declline="42" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a3c5c752fef2705bf481e3bc241c7f6cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableType&lt; int &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; int, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetPrintableType&lt; int &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; int, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" line="33" column="8" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" declline="33" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1abd529ea2647effe4f28dad6a298a16c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableType&lt; size_t &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; size_t &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; size_t &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; size_t &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; size_t, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetPrintableType&lt; size_t &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; size_t &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; size_t &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; size_t &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; size_t, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" line="60" column="8" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" declline="60" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1aa1c1d6dfc0a8dafd300c542ae9f242cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetPrintableType&lt; std::string &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; std::string, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetPrintableType&lt; std::string &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; std::string, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" line="51" column="8" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_printable_type.hpp" declline="51" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ab6531e3b1e2469bc20013d695f70f91c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetRType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetRType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" line="24" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" bodystart="24" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a83c0e5a39f2defa15eb489bcc9f2e7dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetRType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetRType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" line="121" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" bodystart="121" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1aec8bb71884c43046e6187c272200d0be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetRType</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetRType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" line="130" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" bodystart="130" bodyend="136"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="namespacemlpack_1_1util_1a7eb84b8e75a14594bd8b89733112378d" compoundref="util_2strip__type_8hpp" startline="27" endline="42">mlpack::util::StripType</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a3f4b5c8fa83a36a646882dba8bbf4e2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetRType</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetRType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" line="104" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" bodystart="104" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1aebea0c84a2dd1b292dd632336b77eddb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetRType</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::enable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetRType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" line="96" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" bodystart="96" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ab1fa40df4821ddd5121a1c136261241f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetRType&lt; bool &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; bool, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetRType&lt; bool &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; bool, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" line="36" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" bodystart="36" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a0da4ea3c9c67b383f4dab4d12c9cf588" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetRType&lt; double &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; double, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetRType&lt; double &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; double, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" line="72" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" bodystart="72" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a55bfbf19a87f67b1b8d556f00c8cb4d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetRType&lt; int &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; int, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetRType&lt; int &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; int, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" line="48" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" bodystart="48" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ad5b19dd6ee3690eed34f7612ecf02036" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetRType&lt; size_t &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; size_t &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; size_t &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; size_t &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; size_t, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetRType&lt; size_t &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; size_t &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; size_t &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; size_t &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; size_t, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" line="60" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" bodystart="60" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a2c512d01161e204d511b7cac6cfd8f64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetRType&lt; std::string &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; std::string, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetRType&lt; std::string &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; std::string, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" line="84" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_r_type.hpp" bodystart="84" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a7325d0bdbe096fc2bede57cded74ba7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" line="25" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" bodystart="25" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a69892479f6cd19fc81196dc94962bb9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" line="107" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" bodystart="107" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1af4ada6677c0211647c87206167c253b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetType</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" line="137" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" bodystart="137" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a4d76df033b4bf6ada31210404131e647" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetType</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>GetType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" line="146" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" bodystart="146" bodyend="152"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a96d01a05e1335c3058b32d0213f5202e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetType</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::enable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>GetType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" line="97" column="20" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" bodystart="97" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a6b92759da3690f6365505d6e668f8811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::GetType</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *output)</argsstring>
        <name>GetType</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Function is used to generate the type names that are used in calls to functions like IO_SetParam&lt;type&gt;() or setParam&lt;type&gt;(), and therefore what&apos;s returned isn&apos;t exactly the R native type used for that parameter type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(input) Unused parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Output storage for the string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" line="165" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" bodystart="165" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1afb3d3cf517eceeb69b87b10b93a7eaf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetType&lt; bool &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; bool &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; bool, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetType&lt; bool &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; bool &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; bool, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" line="85" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" bodystart="85" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ab55d2664c4b168b17b914b0d90ba52bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetType&lt; double &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; double &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; double, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetType&lt; double &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; double &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; double, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" line="61" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" bodystart="61" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ad382d71f08d41f1cd5878e56d49e9882" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetType&lt; float &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; float &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; float &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; float &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; float, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetType&lt; float &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; float &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; float &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; float &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; float, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" line="49" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" bodystart="49" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a52b0f14ae78bf707b66b3678434395ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetType&lt; int &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; int &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; int, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetType&lt; int &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; int &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; int, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" line="37" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" bodystart="37" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a78981a0295615f67b6a0cc40534cbfce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::GetType&lt; std::string &gt;</definition>
        <argsstring>(util::ParamData &amp;, const typename boost::disable_if&lt; util::IsStdVector&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; data::HasSerialize&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; arma::is_arma_type&lt; std::string &gt;&gt;::type *, const typename boost::disable_if&lt; std::is_same&lt; std::string, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *)</argsstring>
        <name>GetType&lt; std::string &gt;</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; std::string &gt;&gt;::type *</type>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; std::string, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" line="73" column="8" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/get_type.hpp" bodystart="73" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ac1f913db71701ae166576f3ecb9c2f15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mlpack::bindings::r::IgnoreCheck</definition>
        <argsstring>(const std::string &amp;paramName)</argsstring>
        <name>IgnoreCheck</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
<para>Print whether or not we should ignore a check on the given parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="119" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="119" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a45c55be23b65b000e4ad48918b82727e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mlpack::bindings::r::IgnoreCheck</definition>
        <argsstring>(const std::vector&lt; std::pair&lt; std::string, bool &gt;&gt; &amp;constraints, const std::string &amp;paramName)</argsstring>
        <name>IgnoreCheck</name>
        <param>
          <type>const std::vector&lt; std::pair&lt; std::string, bool &gt;&gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
<para>Print whether or not we should ignore a check on the given set of constraints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="131" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="131" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1aa1fafc76127c0f3274ab44aba5e7457b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mlpack::bindings::r::IgnoreCheck</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;constraints)</argsstring>
        <name>IgnoreCheck</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <briefdescription>
<para>Print whether or not we should ignore a check on the given set of constraints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="125" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="125" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a389aac3ea69ce80a583af53338d6b710" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::ParamString</definition>
        <argsstring>(const std::string &amp;paramName)</argsstring>
        <name>ParamString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
<para>Given the parameter name, determine what it would actually be when passed to the command line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="114" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="114" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1acf455e659195a2f7e72570d6e256de73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintDataset</definition>
        <argsstring>(const std::string &amp;datasetName)</argsstring>
        <name>PrintDataset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>datasetName</declname>
        </param>
        <briefdescription>
<para>Given the name of a matrix, print it. </para>
        </briefdescription>
        <detaileddescription>
<para>Here we do not need to modify anything. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="108" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="108" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a9679ac271579f85d3f1d21fe2101409e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintDefault</definition>
        <argsstring>(const std::string &amp;paramName)</argsstring>
        <name>PrintDefault</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
<para>Given a parameter name, print its corresponding default value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="57" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="57" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a9cbe53faf744ce5439cd284796375c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintDoc</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *output)</argsstring>
        <name>PrintDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Print the docstring documentation for a given parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>You are responsible for setting up the line<mdash/>this does not handle indentation or anything. This is meant to produce a line of documentation describing a single parameter.</para>
<para>The indent parameter (void* input, which should be a pointer to a size_t) should be passed to know how much to indent for a new line.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(input) Pointer to size_t containing indent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Unused parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc.hpp" line="36" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc.hpp" bodystart="36" bodyend="82"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a378e4473b8cd1fccf534804887f2bc85" compoundref="param__data_8hpp" startline="58">ParamData::desc</references>
        <references refid="namespacemlpack_1_1util_1a7b8929840f4891a96df1108873e1a1f9" compoundref="hyphenate__string_8hpp" startline="27" endline="73">mlpack::util::HyphenateString</references>
        <references refid="prereqs_8hpp_1a5971beeefae501e4761dd6e1cad457b1" compoundref="prereqs_8hpp" startline="45">MLPACK_COUT_STREAM</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1aff198996c9c6ce5cbbe21d8aaad07d42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintImport</definition>
        <argsstring>()</argsstring>
        <name>PrintImport</name>
        <briefdescription>
<para>Print any import information for the R binding. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="30" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="30" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ae470d9cee45e044255fd4150cb11f144" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintInputOptionInfo</definition>
        <argsstring>()</argsstring>
        <name>PrintInputOptionInfo</name>
        <briefdescription>
<para>Print any special information about input options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="35" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="35" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ad39e71fa76b4da1db0cc0af50cb0940d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintInputOptions</definition>
        <argsstring>()</argsstring>
        <name>PrintInputOptions</name>
        <briefdescription>
<para>Recursion base case. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="62" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="62" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a05875eeb5bcf3f2db4c1f035fcd8886c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintInputOptions</definition>
        <argsstring>(const std::string &amp;paramName, const T &amp;value, Args... args)</argsstring>
        <name>PrintInputOptions</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Print an input option. </para>
        </briefdescription>
        <detaileddescription>
<para>This will throw an exception if the parameter does not exist in <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="69" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="69" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1abd04a6088ee20daa81772554f9db0075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintInputParam</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *)</argsstring>
        <name>PrintInputParam</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Print the declaration of an input parameter as part of a line in a R function definition. </para>
        </briefdescription>
        <detaileddescription>
<para>This doesn&apos;t include any commas or anything. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_input_param.hpp" line="27" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_input_param.hpp" bodystart="27" bodyend="36"/>
        <references refid="prereqs_8hpp_1a5971beeefae501e4761dd6e1cad457b1" compoundref="prereqs_8hpp" startline="45">MLPACK_COUT_STREAM</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a9956ff799780136c3bf4b23cfb966b2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintInputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintInputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print input processing for a standard option type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like: <verbatim>if (!identical(&lt;param_name&gt;, NA)) {
   IO_SetParam&lt;type&gt;(&quot;&lt;param_name&gt;&quot;, &lt;param_name&gt;)
}
</verbatim></para>
<para>This gives us code like: <verbatim>IO_SetParam&lt;type&gt;(&quot;&lt;param_name&gt;&quot;, &lt;param_name&gt;)
</verbatim></para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_input_processing.hpp" line="27" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_input_processing.hpp" bodystart="27" bodyend="67"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="prereqs_8hpp_1a5971beeefae501e4761dd6e1cad457b1" compoundref="prereqs_8hpp" startline="45">MLPACK_COUT_STREAM</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ac27fea289c602b0e9df55fbf038fe6b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintInputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintInputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print input processing for a serializable type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like: <verbatim>if (!identical(&lt;param_name&gt;, NA)) {
   IO_SetParam&lt;ModelType&gt;Ptr(&quot;&lt;param_name&gt;&quot;, &lt;param_name&gt;)
}
</verbatim></para>
<para>This gives us code like: <verbatim>IO_SetParam&lt;ModelType&gt;Ptr(&quot;&lt;param_name&gt;&quot;, &lt;param_name&gt;)
</verbatim></para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_input_processing.hpp" line="156" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_input_processing.hpp" bodystart="156" bodyend="187"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="prereqs_8hpp_1a5971beeefae501e4761dd6e1cad457b1" compoundref="prereqs_8hpp" startline="45">MLPACK_COUT_STREAM</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
        <references refid="namespacemlpack_1_1util_1a7eb84b8e75a14594bd8b89733112378d" compoundref="util_2strip__type_8hpp" startline="27" endline="42">mlpack::util::StripType</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a4b2e46accffc077a020a44fe67f4087e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintInputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintInputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print input processing for a matrix type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like: <verbatim>if (!identical(&lt;param_name&gt;, NA)) {
   IO_SetParam&lt;type&gt;(&quot;&lt;param_name&gt;&quot;, to_matrix(&lt;param_name&gt;))
}
</verbatim></para>
<para>This gives us code like: <verbatim>IO_SetParam&lt;type&gt;(&quot;&lt;param_name&gt;&quot;, to_matrix(&lt;param_name&gt;))
</verbatim></para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_input_processing.hpp" line="73" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_input_processing.hpp" bodystart="73" bodyend="103"/>
        <references refid="prereqs_8hpp_1a5971beeefae501e4761dd6e1cad457b1" compoundref="prereqs_8hpp" startline="45">MLPACK_COUT_STREAM</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ab9b7227621d38bf6029b9386662c5d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintInputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintInputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print input processing for a matrix with info type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like: <verbatim>if (!identical(&lt;param_name&gt;, NA)) {
   &lt;param_name&gt; = to_matrix_with_info(&lt;param_name&gt;)
   IO_SetParam&lt;type&gt;(&quot;&lt;param_name&gt;&quot;, &lt;param_name&gt;$info,
                       &lt;param_name&gt;$data)
}
</verbatim></para>
<para>This gives us code like: <verbatim>&lt;param_name&gt; = to_matrix_with_info(&lt;param_name&gt;)
IO_SetParam&lt;type&gt;(&quot;&lt;param_name&gt;&quot;, &lt;param_name&gt;$info,
                    &lt;param_name&gt;$data)
</verbatim></para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_input_processing.hpp" line="109" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_input_processing.hpp" bodystart="109" bodyend="150"/>
        <references refid="prereqs_8hpp_1a5971beeefae501e4761dd6e1cad457b1" compoundref="prereqs_8hpp" startline="45">MLPACK_COUT_STREAM</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a46235d9f2d7b597d7b29f018ae7ee3a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintInputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *)</argsstring>
        <name>PrintInputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(input) Unused parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(output) Unused parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_input_processing.hpp" line="195" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_input_processing.hpp" bodystart="195" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a9dcd69f688c04daa0be2778b4e7c1a43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintModel</definition>
        <argsstring>(const std::string &amp;modelName)</argsstring>
        <name>PrintModel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>modelName</declname>
        </param>
        <briefdescription>
<para>Given the name of a model, print it. </para>
        </briefdescription>
        <detaileddescription>
<para>Here we do not need to modify anything. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="102" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="102" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a2d046b647ff99b98e9a6e89b4aeb0ce3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintOutputOptionInfo</definition>
        <argsstring>()</argsstring>
        <name>PrintOutputOptionInfo</name>
        <briefdescription>
<para>Print any special information about output options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="40" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="40" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a8cb4cf05bce5323880019bf8355c7f70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintOutputOptions</definition>
        <argsstring>(const bool markdown, const std::string &amp;paramName, const T &amp;value, Args... args)</argsstring>
        <name>PrintOutputOptions</name>
        <param>
          <type>const bool</type>
          <declname>markdown</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>paramName</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="79" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="79" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a2cc5a5f810369dec4fd01564fc819e4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintOutputOptions</definition>
        <argsstring>(const bool)</argsstring>
        <name>PrintOutputOptions</name>
        <param>
          <type>const bool</type>
        </param>
        <briefdescription>
<para>Recursion base case. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="76" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="76" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a321bdda915f34ddfd7ce21134cc9be5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintOutputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintOutputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print output processing for a regular parameter type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like: <verbatim>&quot;&lt;param_name&gt;&quot; = IO_GetParam&lt;Type&gt;(&quot;param_name&quot;)
</verbatim></para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_output_processing.hpp" line="27" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_output_processing.hpp" bodystart="27" bodyend="43"/>
        <references refid="prereqs_8hpp_1a5971beeefae501e4761dd6e1cad457b1" compoundref="prereqs_8hpp" startline="45">MLPACK_COUT_STREAM</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a797ceea51979ea18ff855bfcac47f20a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintOutputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintOutputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print output processing for a serializable model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like: <verbatim>&quot;&lt;param_name&gt;&quot; = &lt;param_name&gt;
</verbatim></para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_output_processing.hpp" line="90" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_output_processing.hpp" bodystart="90" bodyend="103"/>
        <references refid="prereqs_8hpp_1a5971beeefae501e4761dd6e1cad457b1" compoundref="prereqs_8hpp" startline="45">MLPACK_COUT_STREAM</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1acea785724683c00bf3878213265b240b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintOutputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename std::enable_if&lt;!std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;::value &gt;::type *=0)</argsstring>
        <name>PrintOutputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename std::enable_if&lt;!std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print output processing for a matrix type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like: <verbatim>&quot;&lt;param_name&gt;&quot; = IO_GetParam&lt;Type&gt;(&quot;param_name&quot;)
</verbatim></para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_output_processing.hpp" line="49" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_output_processing.hpp" bodystart="49" bodyend="64"/>
        <references refid="prereqs_8hpp_1a5971beeefae501e4761dd6e1cad457b1" compoundref="prereqs_8hpp" startline="45">MLPACK_COUT_STREAM</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a298d5177cf1b1b7f8c6ba9ee4d78535e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintOutputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintOutputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Print output processing for a matrix with info type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like: <verbatim>&quot;&lt;param_name&gt;&quot; = IO_GetParam&lt;Type&gt;(&quot;param_name&quot;)
</verbatim></para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_output_processing.hpp" line="70" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_output_processing.hpp" bodystart="70" bodyend="84"/>
        <references refid="prereqs_8hpp_1a5971beeefae501e4761dd6e1cad457b1" compoundref="prereqs_8hpp" startline="45">MLPACK_COUT_STREAM</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ac99f01549741d73839ed0fbe8957a0fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintOutputProcessing</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *)</argsstring>
        <name>PrintOutputProcessing</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(input) Unused parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(output) Unused parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_output_processing.hpp" line="111" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_output_processing.hpp" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a0c037e0d4c235234072f4ed45005f5e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintR</definition>
        <argsstring>(const util::BindingDetails &amp;doc, const std::string &amp;functionName)</argsstring>
        <name>PrintR</name>
        <param>
          <type>const <ref refid="structmlpack_1_1util_1_1BindingDetails" kindref="compound">util::BindingDetails</ref> &amp;</type>
          <declname>doc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>functionName</declname>
        </param>
        <briefdescription>
<para>Print the code for a .R binding for an mlpack program to stdout. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>Documentation for the binding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>functionName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function (i.e. &quot;pca&quot;). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_R.hpp" line="27" column="6" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_R.hpp" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1af936aeb99c473be5b56367bd4722addc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintSerializeUtil</definition>
        <argsstring>(util::ParamData &amp;, const typename std::enable_if&lt; arma::is_arma_type&lt; T &gt;::value &gt;::type *=0)</argsstring>
        <name>PrintSerializeUtil</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename std::enable_if&lt; arma::is_arma_type&lt; T &gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Matrices are serializable but here we also print nothing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_serialize_util.hpp" line="38" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_serialize_util.hpp" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a3d7b0931393483d5c7d6c6c4970965e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintSerializeUtil</definition>
        <argsstring>(util::ParamData &amp;, const typename std::enable_if&lt;!arma::is_arma_type&lt; T &gt;::value &gt;::type *=0, const typename std::enable_if&lt;!data::HasSerialize&lt; T &gt;::value &gt;::type *=0)</argsstring>
        <name>PrintSerializeUtil</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
        </param>
        <param>
          <type>const typename std::enable_if&lt;!arma::is_arma_type&lt; T &gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename std::enable_if&lt;!<ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>If the type is not serializable, print nothing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_serialize_util.hpp" line="26" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_serialize_util.hpp" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ac9dfc0f41352071820158a5a4eb77748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintSerializeUtil</definition>
        <argsstring>(util::ParamData &amp;d, const typename std::enable_if&lt;!arma::is_arma_type&lt; T &gt;::value &gt;::type *=0, const typename std::enable_if&lt; data::HasSerialize&lt; T &gt;::value &gt;::type *=0)</argsstring>
        <name>PrintSerializeUtil</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const typename std::enable_if&lt;!arma::is_arma_type&lt; T &gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename std::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>For non-matrix serializable types we need to print something. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This gives us code like: <verbatim>&lt;param_name&gt; &lt;- IO_GetParam&lt;ModelType&gt;Ptr(&quot;&lt;param_name&gt;&quot;)
attr(&lt;param_name&gt;, &quot;type&quot;) &lt;- &quot;&lt;ModelType&gt;&quot;
</verbatim></para>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_serialize_util.hpp" line="49" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_serialize_util.hpp" bodystart="49" bodyend="67"/>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="prereqs_8hpp_1a5971beeefae501e4761dd6e1cad457b1" compoundref="prereqs_8hpp" startline="45">MLPACK_COUT_STREAM</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="namespacemlpack_1_1util_1a7eb84b8e75a14594bd8b89733112378d" compoundref="util_2strip__type_8hpp" startline="27" endline="42">mlpack::util::StripType</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a7c0738a96bd71243efc6b92152ccfd23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintSerializeUtil</definition>
        <argsstring>(util::ParamData &amp;d, const void *, void *)</argsstring>
        <name>PrintSerializeUtil</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter data struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(input) Unused parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(output) Unused parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_serialize_util.hpp" line="75" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_serialize_util.hpp" bodystart="75" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ae06448d0dbd4b6c43acc841cca5f7014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintTypeDoc</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; util::IsStdVector&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0, const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;&gt;::type *=0)</argsstring>
        <name>PrintTypeDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return a string representing the command-line type of an option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_type_doc.hpp" line="26" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_type_doc.hpp" declline="26" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a9c44a394718d0fc8067504c620f0139b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintTypeDoc</definition>
        <argsstring>(util::ParamData &amp;data, const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *=0, const typename boost::enable_if&lt; data::HasSerialize&lt; T &gt;&gt;::type *=0)</argsstring>
        <name>PrintTypeDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename boost::disable_if&lt; arma::is_arma_type&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <param>
          <type>const typename boost::enable_if&lt; <ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize</ref>&lt; T &gt;&gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return a string representing the command-line type of a model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_type_doc.hpp" line="63" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_type_doc.hpp" declline="63" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a7dcf29f4e381305eab03c18b70127825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintTypeDoc</definition>
        <argsstring>(util::ParamData &amp;data, const typename std::enable_if&lt; arma::is_arma_type&lt; T &gt;::value &gt;::type *=0)</argsstring>
        <name>PrintTypeDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename std::enable_if&lt; arma::is_arma_type&lt; T &gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return a string representing the command-line type of a matrix option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_type_doc.hpp" line="46" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_type_doc.hpp" declline="46" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1add19c5c4f0fb82511c373a7a19c99bea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintTypeDoc</definition>
        <argsstring>(util::ParamData &amp;data, const typename std::enable_if&lt; std::is_same&lt; T, std::tuple&lt; data::DatasetInfo, arma::mat &gt;&gt;::value &gt;::type *=0)</argsstring>
        <name>PrintTypeDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename std::enable_if&lt; std::is_same&lt; T, std::tuple&lt; <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref>, arma::mat &gt;&gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return a string representing the command-line type of a matrix tuple option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_type_doc.hpp" line="54" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_type_doc.hpp" declline="54" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ac830311fc430722d7ea0b13128fbb3f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintTypeDoc</definition>
        <argsstring>(util::ParamData &amp;data, const typename std::enable_if&lt; util::IsStdVector&lt; T &gt;::value &gt;::type *=0)</argsstring>
        <name>PrintTypeDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const typename std::enable_if&lt; <ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector</ref>&lt; T &gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return a string representing the command-line type of a vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_type_doc.hpp" line="38" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_type_doc.hpp" declline="38" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1ac84c9dec5a4cc9e7adf78389899c0d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::bindings::r::PrintTypeDoc</definition>
        <argsstring>(util::ParamData &amp;data, const void *, void *output)</argsstring>
        <name>PrintTypeDoc</name>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Print the command-line type of an option into a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_type_doc.hpp" line="72" column="6" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_type_doc.hpp" bodystart="72" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a1802987f990a2968a3348d884ec665fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintValue</definition>
        <argsstring>(const bool &amp;value, bool quotes)</argsstring>
        <name>PrintValue</name>
        <param>
          <type>const bool &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quotes</declname>
        </param>
        <briefdescription>
<para>Special overload for booleans. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="52" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="52" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a2a98e625ee2e5294ff1fffcb329143b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::PrintValue</definition>
        <argsstring>(const T &amp;value, bool quotes)</argsstring>
        <name>PrintValue</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quotes</declname>
        </param>
        <briefdescription>
<para>Given a parameter type, print the corresponding value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="46" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="46" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1aec3cc6e45887ab2b60f5adca87ca508d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::ProgramCall</definition>
        <argsstring>(const bool markdown, const std::string &amp;programName, Args... args)</argsstring>
        <name>ProgramCall</name>
        <param>
          <type>const bool</type>
          <declname>markdown</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>programName</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Given a name of a binding and a variable number of arguments (and their contents), print the corresponding function call. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="89" column="13" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="89" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1bindings_1_1r_1a8e875c191ac4c5f5d4cb050389de4d1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mlpack::bindings::r::ProgramCall</definition>
        <argsstring>(const std::string &amp;programName)</argsstring>
        <name>ProgramCall</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>programName</declname>
        </param>
        <briefdescription>
<para>Given the name of a binding, print a program call assuming that all options are specified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" line="97" column="20" declfile="/home/aakash/mlpack/src/mlpack/bindings/R/print_doc_functions.hpp" declline="97" declcolumn="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/bindings/R/default_param.hpp" line="21" column="1"/>
  </compounddef>
</doxygen>
