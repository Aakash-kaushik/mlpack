<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="get__cython__type_8hpp" kind="file" language="C++">
    <compoundname>get_cython_type.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <includes refid="is__std__vector_8hpp" local="no">mlpack/core/util/is_std_vector.hpp</includes>
    <includedby refid="python_2print__input__processing_8hpp" local="yes">/home/aakash/mlpack/src/mlpack/bindings/python/print_input_processing.hpp</includedby>
    <includedby refid="python_2print__output__processing_8hpp" local="yes">/home/aakash/mlpack/src/mlpack/bindings/python/print_output_processing.hpp</includedby>
    <incdepgraph>
      <node id="59">
        <label>list</label>
      </node>
      <node id="56">
        <label>atomic</label>
      </node>
      <node id="39">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="15">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="58">
        <label>iomanip</label>
      </node>
      <node id="24">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cstdint</label>
      </node>
      <node id="16">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="23">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="49">
        <label>mlpack/mlpack_export.hpp</label>
      </node>
      <node id="46">
        <label>arma_config.hpp</label>
      </node>
      <node id="47">
        <label>mlpack/core/util/log.hpp</label>
        <link refid="log_8hpp"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="22">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="11">
        <label>stdexcept</label>
      </node>
      <node id="31">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>string</label>
      </node>
      <node id="43">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>map</label>
      </node>
      <node id="5">
        <label>cfloat</label>
      </node>
      <node id="35">
        <label>boost/variant.hpp</label>
      </node>
      <node id="51">
        <label>prefixedoutstream_impl.hpp</label>
      </node>
      <node id="63">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="19">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="42">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="52">
        <label>nulloutstream.hpp</label>
        <link refid="nulloutstream_8hpp"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="41">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>mlpack/core/util/is_std_vector.hpp</label>
        <link refid="is__std__vector_8hpp"/>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cstdio</label>
      </node>
      <node id="12">
        <label>tuple</label>
      </node>
      <node id="1">
        <label>/home/aakash/mlpack/src/mlpack/bindings/python/get_cython_type.hpp</label>
        <link refid="get__cython__type_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="34">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>prefixedoutstream.hpp</label>
        <link refid="prefixedoutstream_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>vector</label>
      </node>
      <node id="54">
        <label>streambuf</label>
      </node>
      <node id="13">
        <label>utility</label>
      </node>
      <node id="37">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="28">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="25">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="40">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cstdlib</label>
      </node>
      <node id="4">
        <label>cctype</label>
      </node>
      <node id="53">
        <label>iostream</label>
      </node>
      <node id="27">
        <label>unordered_map</label>
      </node>
      <node id="6">
        <label>climits</label>
      </node>
      <node id="61">
        <label>mutex</label>
      </node>
      <node id="57">
        <label>chrono</label>
      </node>
      <node id="64">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="62">
        <label>thread</label>
      </node>
      <node id="44">
        <label>type_traits</label>
      </node>
      <node id="20">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="14">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="38">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cstring</label>
      </node>
      <node id="29">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="18">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/aakash/mlpack/src/mlpack/bindings/python/print_input_processing.hpp</label>
        <link refid="python_2print__input__processing_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/aakash/mlpack/src/mlpack/bindings/python/print_output_processing.hpp</label>
        <link refid="python_2print__output__processing_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/aakash/mlpack/src/mlpack/bindings/python/get_cython_type.hpp</label>
        <link refid="get__cython__type_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/aakash/mlpack/src/mlpack/bindings/python/py_option.hpp</label>
        <link refid="py__option_8hpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1bindings">mlpack::bindings</innernamespace>
    <innernamespace refid="namespacemlpack_1_1bindings_1_1python">mlpack::bindings::python</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Ryan Curtin</para>
</simplesect>
Template metaprogramming to return the string representation of the Cython type for a given Cython binding parameter.</para>
<para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MLPACK_BINDINGS_PYTHON_GET_CYTHON_TYPE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_BINDINGS_PYTHON_GET_CYTHON_TYPE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="is__std__vector_8hpp" kindref="compound">mlpack/core/util/is_std_vector.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bindings<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="methods_2nmf_2CMakeLists_8txt_1a4164342adb31720de63a384fd5b2845a" kindref="member">python</ref><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="24" refid="namespacemlpack_1_1bindings_1_1python_1aae1b43223a82e87c26dda721ffe1b64c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacemlpack_1_1bindings_1_1python_1aae1b43223a82e87c26dda721ffe1b64c" kindref="member">GetCythonType</ref>(</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>d<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;<ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector&lt;T&gt;</ref>&gt;::type*<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;<ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize&lt;T&gt;</ref>&gt;::type*<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;arma::is_arma_type&lt;T&gt;&gt;::type*<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="34" refid="namespacemlpack_1_1bindings_1_1python_1aaf9f486764e2a7d4780b3b865a42976c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacemlpack_1_1bindings_1_1python_1aaf9f486764e2a7d4780b3b865a42976c" kindref="member">GetCythonType&lt;int&gt;</ref>(</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>d<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;<ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector&lt;int&gt;</ref>&gt;::type*,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;<ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize&lt;int&gt;</ref>&gt;::type*,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;arma::is_arma_type&lt;int&gt;&gt;::type*)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="44" refid="namespacemlpack_1_1bindings_1_1python_1a376a58b3162f01312a81b83504f568ce" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacemlpack_1_1bindings_1_1python_1a376a58b3162f01312a81b83504f568ce" kindref="member">GetCythonType&lt;double&gt;</ref>(</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>d<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;<ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector&lt;double&gt;</ref>&gt;::type*,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;<ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize&lt;double&gt;</ref>&gt;::type*,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;arma::is_arma_type&lt;double&gt;&gt;::type*)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="54" refid="namespacemlpack_1_1bindings_1_1python_1a61ad87233086dfafe8ea8e4e34e231c2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>GetCythonType&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>d<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;<ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector&lt;std::string&gt;</ref>&gt;::type*,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;<ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize&lt;std::string&gt;</ref>&gt;::type*,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;arma::is_arma_type&lt;std::string&gt;&gt;::type*)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="64" refid="namespacemlpack_1_1bindings_1_1python_1a7081081aa4247623e8d1db6136102d94" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacemlpack_1_1bindings_1_1python_1a7081081aa4247623e8d1db6136102d94" kindref="member">GetCythonType&lt;size_t&gt;</ref>(</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>d<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;<ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector&lt;size_t&gt;</ref>&gt;::type*,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;<ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize&lt;size_t&gt;</ref>&gt;::type*,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;arma::is_arma_type&lt;size_t&gt;&gt;::type*)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;size_t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="74" refid="namespacemlpack_1_1bindings_1_1python_1a3eb6211ac8ddac3acc284d57c44e20de" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacemlpack_1_1bindings_1_1python_1a3eb6211ac8ddac3acc284d57c44e20de" kindref="member">GetCythonType&lt;bool&gt;</ref>(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>d<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;<ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector&lt;bool&gt;</ref>&gt;::type*,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;<ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize&lt;bool&gt;</ref>&gt;::type*,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;arma::is_arma_type&lt;bool&gt;&gt;::type*)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;cbool&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="84" refid="namespacemlpack_1_1bindings_1_1python_1a5b7ef19eb1efae59337f8ca8a68c8bc7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacemlpack_1_1bindings_1_1python_1aae1b43223a82e87c26dda721ffe1b64c" kindref="member">GetCythonType</ref>(</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref>&amp;<sp/>d,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::enable_if&lt;<ref refid="structmlpack_1_1util_1_1IsStdVector" kindref="compound">util::IsStdVector&lt;T&gt;</ref>&gt;::type*<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;vector[&quot;</highlight><highlight class="normal"><sp/>+<sp/>GetCythonType&lt;typename<sp/>T::value_type&gt;(d)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="92" refid="namespacemlpack_1_1bindings_1_1python_1a3a7c26c01db5e577f3d40870d5b9fd30" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacemlpack_1_1bindings_1_1python_1aae1b43223a82e87c26dda721ffe1b64c" kindref="member">GetCythonType</ref>(</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref>&amp;<sp/>d,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::enable_if&lt;arma::is_arma_type&lt;T&gt;&gt;::type*<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>std::string<sp/>type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Mat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(T::is_row)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Row&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(T::is_col)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Col&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;arma.&quot;</highlight><highlight class="normal"><sp/>+<sp/>type<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>GetCythonType&lt;typename<sp/>T::elem_type&gt;(d)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="106" refid="namespacemlpack_1_1bindings_1_1python_1a01a87ad978f242a7b6c889690ce55a1d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacemlpack_1_1bindings_1_1python_1aae1b43223a82e87c26dda721ffe1b64c" kindref="member">GetCythonType</ref>(</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref>&amp;<sp/>d,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if&lt;arma::is_arma_type&lt;T&gt;&gt;::type*<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::enable_if&lt;<ref refid="structmlpack_1_1data_1_1HasSerialize" kindref="compound">data::HasSerialize&lt;T&gt;</ref>&gt;::type*<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d.<ref refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" kindref="member">cppType</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>bindings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/bindings/python/get_cython_type.hpp"/>
  </compounddef>
</doxygen>
