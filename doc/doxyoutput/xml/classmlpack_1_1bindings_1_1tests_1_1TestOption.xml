<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmlpack_1_1bindings_1_1tests_1_1TestOption" kind="class" language="C++" prot="public">
    <compoundname>mlpack::bindings::tests::TestOption</compoundname>
    <includes refid="test__option_8hpp" local="no">test_option.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename N</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1bindings_1_1tests_1_1TestOption_1a10bcdfca4bfb433ccbe8ee7a97e5379a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TestOption</definition>
        <argsstring>(const N defaultValue, const std::string &amp;identifier, const std::string &amp;description, const std::string &amp;alias, const std::string &amp;cppName, const bool required=false, const bool input=true, const bool noTranspose=false, const std::string &amp;testName=&quot;&quot;)</argsstring>
        <name>TestOption</name>
        <param>
          <type>const N</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>alias</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>cppName</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>required</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>input</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>noTranspose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>testName</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Construct an Option object. </para>
        </briefdescription>
        <detaileddescription>
<para>When constructed, it will register itself with <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Default value this parameter will be initialized to (for flags, this should be false, for instance). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the option (no dashes in front; for <ndash/>help, we would pass &quot;help&quot;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>A short string describing the option. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>Short name of the parameter. &quot;&quot; for no alias. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cppName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the C++ type of this parameter (i.e. &quot;int&quot;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>required</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the option is required at runtime. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the option is an input option. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noTranspose</parametername>
</parameternamelist>
<parameterdescription>
<para>If the parameter is a matrix and this is true, then the matrix will not be transposed on loading. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>testName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the test (used for identifiying which binding test this option belongs to) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/bindings/tests/test_option.hpp" line="61" column="3" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/tests/test_option.hpp" bodystart="61" bodyend="108"/>
        <references refid="classmlpack_1_1IO_1adc908d81414046d89563fd0571d55cac">IO::Add</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a367d2c852ad5beb11758c57d8ece7316" compoundref="param__data_8hpp" startline="63">ParamData::alias</references>
        <references refid="classmlpack_1_1IO_1a311c68c417bf994e4bf952dcce4a874d">IO::ClearSettings</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" compoundref="param__data_8hpp" startline="84">ParamData::cppType</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a378e4473b8cd1fccf534804887f2bc85" compoundref="param__data_8hpp" startline="58">ParamData::desc</references>
        <references refid="classmlpack_1_1IO_1a1a6b843f1c06bc4c23630d76510b491e" compoundref="io_8hpp" startline="313">IO::functionMap</references>
        <references refid="classmlpack_1_1IO_1aacf8da2c1644e932b3cbd46703a3d889">IO::GetSingleton</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a8ababadb8dc64acf8792317844e562ba" compoundref="param__data_8hpp" startline="73">ParamData::input</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a992c70a16169035bc9e2e8f9953d91ed" compoundref="param__data_8hpp" startline="76">ParamData::loaded</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" compoundref="param__data_8hpp" startline="56">ParamData::name</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a203e71e5671737f2e7d33147dd19f391" compoundref="param__data_8hpp" startline="69">ParamData::noTranspose</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1aea39f2c5cb5ec83de4d1f81b1a74f0cc" compoundref="param__data_8hpp" startline="79">ParamData::persistent</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" compoundref="param__data_8hpp" startline="71">ParamData::required</references>
        <references refid="classmlpack_1_1IO_1a6de90cea213fa99eaa5d5f354fabfaa0">IO::RestoreSettings</references>
        <references refid="classmlpack_1_1IO_1a12aa08b1280e9b33864a9845706e0e59">IO::SetPassed</references>
        <references refid="classmlpack_1_1IO_1ad30747ed34d1dcf57dad194ff8d09138">IO::StoreSettings</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a87a03c93b016f6878e3a0609835b426e" compoundref="param__data_8hpp" startline="61">ParamData::tname</references>
        <references refid="param__data_8hpp_1ac909d914008cce49fa42ddd10b9b36c5" compoundref="param__data_8hpp" startline="22">TYPENAME</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" compoundref="param__data_8hpp" startline="82">ParamData::value</references>
        <references refid="structmlpack_1_1util_1_1ParamData_1a5afa034ef66e23047379bcba2eb70b8d" compoundref="param__data_8hpp" startline="66">ParamData::wasPassed</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A static object whose constructor registers a parameter with the <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> class. </para>
    </briefdescription>
    <detaileddescription>
<para>This should not be used outside of <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> itself, and you should use the <ref refid="param_8hpp_1a59a38dfe16c56a278bd89817216a3739" kindref="member">PARAM_FLAG()</ref>, PARAM_DOUBLE(), PARAM_INT(), PARAM_STRING(), or other similar macros to declare these objects instead of declaring them directly.</para>
<para><simplesect kind="see"><para><ref refid="io_8hpp" kindref="compound">core/util/io.hpp</ref>, <ref refid="classmlpack_1_1IO" kindref="compound">mlpack::IO</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/bindings/tests/test_option.hpp" line="40" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/bindings/tests/test_option.hpp" bodystart="41" bodyend="109"/>
    <listofallmembers>
      <member refid="classmlpack_1_1bindings_1_1tests_1_1TestOption_1a10bcdfca4bfb433ccbe8ee7a97e5379a" prot="public" virt="non-virtual"><scope>mlpack::bindings::tests::TestOption</scope><name>TestOption</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
