<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="anntutorial" kind="page">
    <compoundname>anntutorial</compoundname>
    <title>Neural Network tutorial</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="anntutorial_1intro_anntut">
<title>Introduction</title>
<para>There is vast literature on neural networks and their uses, as well as strategies for choosing initial points effectively, keeping the algorithm from converging in local minima, choosing the best model structure, choosing the best optimizers, and so forth. mlpack implements many of these building blocks, making it very easy to create different neural networks in a modular way.</para>
<para>mlpack currently implements two easy-to-use forms of neural networks: <bold>Feed-Forward</bold> <bold>Networks</bold> (this includes convolutional neural networks) and <bold>Recurrent</bold> <bold>Neural</bold> <bold>Networks</bold>.</para>
</sect1>
<sect1 id="anntutorial_1toc_anntut">
<title>Table of Contents</title>
<para>This tutorial is split into the following sections:</para>
<para><itemizedlist>
<listitem><para><ref refid="anntutorial_1intro_anntut" kindref="member">Introduction</ref></para>
</listitem><listitem><para><ref refid="anntutorial_1toc_anntut" kindref="member">Table of Contents</ref></para>
</listitem><listitem><para><ref refid="anntutorial_1model_api_anntut" kindref="member">Model API</ref></para>
</listitem><listitem><para><ref refid="anntutorial_1layer_api_anntut" kindref="member">Layer API</ref></para>
</listitem><listitem><para><ref refid="anntutorial_1model_setup_training_anntut" kindref="member">Model Setup &amp; Training</ref></para>
</listitem><listitem><para><ref refid="anntutorial_1model_saving_loading_anntut" kindref="member">Saving &amp; Loading</ref></para>
</listitem><listitem><para><ref refid="anntutorial_1extracting_parameters_anntut" kindref="member">Extracting Parameters</ref></para>
</listitem><listitem><para><ref refid="anntutorial_1further_anntut" kindref="member">Further documentation</ref></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="anntutorial_1model_api_anntut">
<title>Model API</title>
<para>There are two main neural network classes that are meant to be used as container for neural network layers that <bold>mlpack</bold> implements; each class is suited to a different setting:</para>
<para><itemizedlist>
<listitem><para><computeroutput>FFN:</computeroutput> the Feed Forward Network model provides a means to plug layers together in a feed-forward fully connected manner. This is the &apos;standard&apos; type of deep learning model, and includes convolutional neural networks (CNNs).</para>
</listitem><listitem><para><computeroutput>RNN:</computeroutput> the Recurrent Neural Network model provides a means to consider successive calls to forward as different time-steps in a sequence. This is often used for time sequence modeling tasks, such as predicting the next character in a sequence.</para>
</listitem></itemizedlist>
</para>
<para>Below is some basic guidance on what should be used. Note that the question of &quot;which algorithm should be used&quot; is a very difficult question to answer, so the guidance below is just that<mdash/>guidance<mdash/>and may not be right for a particular problem.</para>
<para><itemizedlist>
<listitem><para><bold>Feed-forward</bold> <bold>Networks</bold> allow signals or inputs to travel one way only. There is no feedback within the network; for instance, the output of any layer does only affect the upcoming layer. That makes Feed-Forward Networks straightforward and very effective. They are extensively used in pattern recognition and are ideally suitable for modeling relationships between a set of input and one or more output variables.</para>
</listitem><listitem><para><bold>Recurrent</bold> <bold>Networks</bold> allow signals or inputs to travel in both directions by introducing loops in the network. Computations derived from earlier inputs are fed back into the network, which gives the recurrent network some kind of memory. RNNs are currently being used for all kinds of sequential tasks; for instance, time series prediction, sequence labeling, and sequence classification.</para>
</listitem></itemizedlist>
</para>
<para>In order to facilitate consistent implementations, the <computeroutput>FFN</computeroutput> and <computeroutput>RNN</computeroutput> classes have a number of methods in common:</para>
<para><itemizedlist>
<listitem><para><computeroutput>Train()</computeroutput>: trains the initialized model on the given input data. Optionally an optimizer object can be passed to control the optimization process.</para>
</listitem><listitem><para><computeroutput>Predict()</computeroutput>: predicts the responses to a given set of predictors. Note the responses will reflect the output of the specified output layer.</para>
</listitem><listitem><para><computeroutput>Add()</computeroutput>: this method can be used to add a layer to the model.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>To be able to optimize the network, both classes implement the OptimizerFunction API. In short, the <computeroutput>FNN</computeroutput> and <computeroutput>RNN</computeroutput> class implement two methods: <computeroutput>Evaluate()</computeroutput> and <computeroutput>Gradient()</computeroutput>. This enables the optimization given some learner and some performance measure.</para>
</simplesect>
Similar to the existing layer infrastructure, the <computeroutput>FFN</computeroutput> and <computeroutput>RNN</computeroutput> classes are very extensible, having the following template arguments; which can be modified to change the behavior of the network:</para>
<para><itemizedlist>
<listitem><para><computeroutput>OutputLayerType:</computeroutput> this type defines the output layer used to evaluate the network; by default, <computeroutput>NegativeLogLikelihood</computeroutput> is used.</para>
</listitem><listitem><para><computeroutput>InitializationRuleType:</computeroutput> this type defines the method by which initial parameters are set; by default, <computeroutput>RandomInitialization</computeroutput> is used.</para>
</listitem></itemizedlist>
</para>
<para><programlisting><codeline><highlight class="normal">template&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>typename<sp/>OutputLayerType<sp/>=<sp/>NegativeLogLikelihood&lt;&gt;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>typename<sp/>InitializationRuleType<sp/>=<sp/>RandomInitialization</highlight></codeline>
<codeline><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FNN;</highlight></codeline>
</programlisting></para>
<para>Internally, the <computeroutput>FFN</computeroutput> and <computeroutput>RNN</computeroutput> class keeps an instantiated <computeroutput>OutputLayerType</computeroutput> class (which can be given in the constructor). This is useful for using different loss functions like the Negative-Log-Likelihood function or the <computeroutput>VRClassReward</computeroutput> function, which takes an optional score parameter. Therefore, you can write a non-static OutputLayerType class and use it seamlessly in combination with the <computeroutput>FNN</computeroutput> and <computeroutput>RNN</computeroutput> class. The same applies to the <computeroutput>InitializationRuleType</computeroutput> template parameter.</para>
<para>By choosing different components for each of these template classes in conjunction with the <computeroutput>Add()</computeroutput> method, a very arbitrary network object can be constructed.</para>
<para>Below are several examples of how the <computeroutput>FNN</computeroutput> and <computeroutput>RNN</computeroutput> classes might be used. The first examples focus on the <computeroutput>FNN</computeroutput> class, and the last shows how the <computeroutput>RNN</computeroutput> class can be used.</para>
<para>The simplest way to use the FNN&lt;&gt; class is to pass in a dataset with the corresponding labels, and receive the classification in return. Note that the dataset must be column-major â€“ that is, one column corresponds to one point. See the <ref refid="matrices" kindref="compound">matrices guide</ref> for more information.</para>
<para>The code below builds a simple feed-forward network with the default options, then queries for the assignments for every point in the <computeroutput>queries</computeroutput> matrix.</para>
<para><dot>
digraph G {
  fontname = &quot;Hilda 10&quot;
  rankdir=LR
  splines=line
  nodesep=.08;
  ranksep=1;
  edge [color=black, arrowsize=.5];
  node [fixedsize=true,label=&quot;&quot;,style=filled,color=none,fillcolor=gray,shape=circle]

  subgraph cluster_0 {
    color=none;
    node [style=filled, color=white, penwidth=15,fillcolor=black shape=circle];
    l10  l11  l12  l13  l14  l15  ;
    label = Input;
  }

  subgraph cluster_1 {
    color=none;
    node [style=filled, color=white, penwidth=15,fillcolor=gray shape=circle];
    l20  l21  l22  l23  l24  l25  l26  l27  ;
    label = Linear;
  }

  subgraph cluster_2 {
    color=none;
    node [style=filled, color=white, penwidth=15,fillcolor=gray shape=circle];
    l30  l31  l32  l33  l34  l35  l36  l37  ;
    label = Linear;
  }

  subgraph cluster_3 {
    color=none;
    node [style=filled, color=white, penwidth=15,fillcolor=black shape=circle];
    l40  l41  l42  ;
    label = LogSoftMax;
  }

  l10 -&gt; l20   l10 -&gt; l21   l10 -&gt; l22   l10 -&gt; l23   l10 -&gt; l24   l10 -&gt; l25
  l10 -&gt; l26   l10 -&gt; l27   l11 -&gt; l20   l11 -&gt; l21   l11 -&gt; l22   l11 -&gt; l23
  l11 -&gt; l24   l11 -&gt; l25   l11 -&gt; l26   l11 -&gt; l27   l12 -&gt; l20   l12 -&gt; l21
  l12 -&gt; l22   l12 -&gt; l23   l12 -&gt; l24   l12 -&gt; l25   l12 -&gt; l26   l12 -&gt; l27
  l13 -&gt; l20   l13 -&gt; l21   l13 -&gt; l22   l13 -&gt; l23   l13 -&gt; l24   l13 -&gt; l25
  l13 -&gt; l26   l13 -&gt; l27   l14 -&gt; l20   l14 -&gt; l21   l14 -&gt; l22   l14 -&gt; l23
  l14 -&gt; l24   l14 -&gt; l25   l14 -&gt; l26   l14 -&gt; l27   l15 -&gt; l20   l15 -&gt; l21
  l15 -&gt; l22   l15 -&gt; l23   l15 -&gt; l24   l15 -&gt; l25   l15 -&gt; l26   l15 -&gt; l27
  l20 -&gt; l30   l20 -&gt; l31   l20 -&gt; l32   l20 -&gt; l33   l20 -&gt; l34   l20 -&gt; l35
  l20 -&gt; l36   l20 -&gt; l37   l21 -&gt; l30   l21 -&gt; l31   l21 -&gt; l32   l21 -&gt; l33
  l21 -&gt; l34   l21 -&gt; l35   l21 -&gt; l36   l21 -&gt; l37   l22 -&gt; l30   l22 -&gt; l31
  l22 -&gt; l32   l22 -&gt; l33   l22 -&gt; l34   l22 -&gt; l35   l22 -&gt; l36   l22 -&gt; l37
  l23 -&gt; l30   l23 -&gt; l31   l23 -&gt; l32   l23 -&gt; l33   l23 -&gt; l34   l23 -&gt; l35
  l23 -&gt; l36   l23 -&gt; l37   l24 -&gt; l30   l24 -&gt; l31   l24 -&gt; l32   l24 -&gt; l33
  l24 -&gt; l34   l24 -&gt; l35   l24 -&gt; l36   l24 -&gt; l37   l25 -&gt; l30   l25 -&gt; l31
  l25 -&gt; l32   l25 -&gt; l33   l25 -&gt; l34   l25 -&gt; l35   l25 -&gt; l36   l25 -&gt; l37
  l26 -&gt; l30   l26 -&gt; l31   l26 -&gt; l32   l26 -&gt; l33   l26 -&gt; l34   l26 -&gt; l35
  l26 -&gt; l36   l26 -&gt; l37   l27 -&gt; l30   l27 -&gt; l31   l27 -&gt; l32   l27 -&gt; l33
  l27 -&gt; l34   l27 -&gt; l35   l27 -&gt; l36   l27 -&gt; l37   l30 -&gt; l40   l30 -&gt; l41
  l30 -&gt; l42   l31 -&gt; l40   l31 -&gt; l41   l31 -&gt; l42   l32 -&gt; l40   l32 -&gt; l41
  l32 -&gt; l42   l33 -&gt; l40   l33 -&gt; l41   l33 -&gt; l42   l34 -&gt; l40   l34 -&gt; l41
  l34 -&gt; l42   l35 -&gt; l40   l35 -&gt; l41   l35 -&gt; l42   l36 -&gt; l40   l36 -&gt; l41
  l36 -&gt; l42   l37 -&gt; l40   l37 -&gt; l41   l37 -&gt; l42
}
</dot>
 <simplesect kind="note"><para>The number of inputs in the above graph doesn&apos;t match with the real number of features in the thyroid dataset and are just used as an abstract representation.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/core.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/ann/layer/layer.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/ann/ffn.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::ann;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Load<sp/>the<sp/>training<sp/>set<sp/>and<sp/>testing<sp/>set.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arma::mat<sp/>trainData;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data::Load(&quot;thyroid_train.csv&quot;,<sp/>trainData,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arma::mat<sp/>testData;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>data::Load(&quot;thyroid_test.csv&quot;,<sp/>testData,<sp/>true);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Split<sp/>the<sp/>labels<sp/>from<sp/>the<sp/>training<sp/>set<sp/>and<sp/>testing<sp/>set<sp/>respectively.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Decrement<sp/>the<sp/>labels<sp/>by<sp/>1,<sp/>so<sp/>they<sp/>are<sp/>in<sp/>the<sp/>range<sp/>0<sp/>to<sp/>(numClasses<sp/>-<sp/>1).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arma::mat<sp/>trainLabels<sp/>=<sp/>trainData.row(trainData.n_rows<sp/>-<sp/>1)<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arma::mat<sp/>testLabels<sp/>=<sp/>testData.row(testData.n_rows<sp/>-<sp/>1)<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>trainData.shed_row(trainData.n_rows<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>testData.shed_row(testData.n_rows<sp/>-<sp/>1);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>network.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>FFN&lt;&gt;<sp/>model;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>model.Add&lt;Linear&lt;&gt;<sp/>&gt;(trainData.n_rows,<sp/>8);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>model.Add&lt;SigmoidLayer&lt;&gt;<sp/>&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>model.Add&lt;Linear&lt;&gt;<sp/>&gt;(8,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>model.Add&lt;LogSoftMax&lt;&gt;<sp/>&gt;();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Train<sp/>the<sp/>model.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>model.Train(trainData,<sp/>trainLabels);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Use<sp/>the<sp/>Predict<sp/>method<sp/>to<sp/>get<sp/>the<sp/>predictions.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arma::mat<sp/>predictionTemp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>model.Predict(testData,<sp/>predictionTemp);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Since<sp/>the<sp/>predictionsTemp<sp/>is<sp/>of<sp/>dimensions<sp/>(3<sp/>x<sp/>number_of_data_points)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>continuous<sp/>values,<sp/>we<sp/>first<sp/>need<sp/>to<sp/>reduce<sp/>it<sp/>to<sp/>a<sp/>dimension<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(1<sp/>x<sp/>number_of_data_points)<sp/>with<sp/>scalar<sp/>values,<sp/>to<sp/>be<sp/>able<sp/>to<sp/>compare<sp/>with</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>testLabels.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>The<sp/>first<sp/>step<sp/>towards<sp/>doing<sp/>this<sp/>is<sp/>to<sp/>create<sp/>a<sp/>matrix<sp/>of<sp/>zeros<sp/>with<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>desired<sp/>dimensions<sp/>(1<sp/>x<sp/>number_of_data_points).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>In<sp/>predictionsTemp,<sp/>the<sp/>3<sp/>dimensions<sp/>for<sp/>each<sp/>data<sp/>point<sp/>correspond<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>probabilities<sp/>of<sp/>belonging<sp/>to<sp/>the<sp/>three<sp/>possible<sp/>classes.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arma::mat<sp/>prediction<sp/>=<sp/>arma::zeros&lt;arma::mat&gt;(1,<sp/>predictionTemp.n_cols);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Find<sp/>index<sp/>of<sp/>max<sp/>prediction<sp/>for<sp/>each<sp/>data<sp/>point<sp/>and<sp/>store<sp/>in<sp/>&quot;prediction&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>predictionTemp.n_cols;<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>prediction(i)<sp/>=<sp/>arma::as_scalar(arma::find(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::max(predictionTemp.col(i))<sp/>==<sp/>predictionTemp.col(i),<sp/>1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>error<sp/>between<sp/>predictions<sp/>and<sp/>testLabels,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>now<sp/>that<sp/>we<sp/>have<sp/>the<sp/>desired<sp/>predictions.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>correct<sp/>=<sp/>arma::accu(prediction<sp/>==<sp/>testLabels);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>classificationError<sp/>=<sp/>1<sp/>-<sp/>double(correct)<sp/>/<sp/>testData.n_cols;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Print<sp/>out<sp/>the<sp/>classification<sp/>error<sp/>for<sp/>the<sp/>testing<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Classification<sp/>Error<sp/>for<sp/>the<sp/>Test<sp/>set:<sp/>&quot;<sp/>&lt;&lt;<sp/>classificationError<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Now, the matrix prediction holds the classification of each point in the dataset. Subsequently, we find the classification error by comparing it with testLabels.</para>
<para>In the next example, we create simple noisy sine sequences, which are trained later on, using the RNN class in the <computeroutput>RNNModel()</computeroutput> method.</para>
<para><programlisting><codeline><highlight class="normal">void<sp/>GenerateNoisySines(arma::mat&amp;<sp/>data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::mat&amp;<sp/>labels,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>size_t<sp/>points,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>size_t<sp/>sequences,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>noise<sp/>=<sp/>0.3)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arma::colvec<sp/>x<sp/>=<sp/><sp/>arma::linspace&lt;arma::Col&lt;double&gt;&gt;(0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>points<sp/>-<sp/>1,<sp/>points)<sp/>/<sp/>points<sp/>*<sp/>20.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arma::colvec<sp/>y1<sp/>=<sp/>arma::sin(x<sp/>+<sp/>arma::as_scalar(arma::randu(1))<sp/>*<sp/>3.0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arma::colvec<sp/>y2<sp/>=<sp/>arma::sin(x<sp/>/<sp/>2.0<sp/>+<sp/>arma::as_scalar(arma::randu(1))<sp/>*<sp/>3.0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>data<sp/>=<sp/>arma::zeros(points,<sp/>sequences<sp/>*<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>labels<sp/>=<sp/>arma::zeros(2,<sp/>sequences<sp/>*<sp/>2);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(size_t<sp/>seq<sp/>=<sp/>0;<sp/>seq<sp/>&lt;<sp/>sequences;<sp/>seq++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>data.col(seq)<sp/>=<sp/>arma::randu(points)<sp/>*<sp/>noise<sp/>+<sp/>y1<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::as_scalar(arma::randu(1)<sp/>-<sp/>0.5)<sp/>*<sp/>noise;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>labels(0,<sp/>seq)<sp/>=<sp/>1;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>data.col(sequences<sp/>+<sp/>seq)<sp/>=<sp/>arma::randu(points)<sp/>*<sp/>noise<sp/>+<sp/>y2<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::as_scalar(arma::randu(1)<sp/>-<sp/>0.5)<sp/>*<sp/>noise;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>labels(1,<sp/>sequences<sp/>+<sp/>seq)<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>RNNModel()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>size_t<sp/>rho<sp/>=<sp/>10;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Generate<sp/>12<sp/>(2<sp/>*<sp/>6)<sp/>noisy<sp/>sines.<sp/>A<sp/>single<sp/>sine<sp/>contains<sp/>rho</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>points/features.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arma::mat<sp/>input,<sp/>labelsTemp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GenerateNoisySines(input,<sp/>labelsTemp,<sp/>rho,<sp/>6);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>arma::mat<sp/>labels<sp/>=<sp/>arma::zeros&lt;arma::mat&gt;(rho,<sp/>labelsTemp.n_cols);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>labelsTemp.n_cols;<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>int<sp/>value<sp/>=<sp/>arma::as_scalar(arma::find(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::max(labelsTemp.col(i))<sp/>==<sp/>labelsTemp.col(i),<sp/>1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>labels.col(i).fill(value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Construct<sp/>a<sp/>network<sp/>with<sp/>1<sp/>input<sp/>unit,<sp/>4<sp/>hidden<sp/>units<sp/>and<sp/>10<sp/>output</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>units.<sp/>The<sp/>hidden<sp/>layer<sp/>is<sp/>connected<sp/>to<sp/>itself.<sp/>The<sp/>network<sp/>structure</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>looks<sp/>like:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/>Input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hidden<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Layer(1)<sp/><sp/><sp/><sp/><sp/><sp/>Layer(4)<sp/><sp/><sp/><sp/><sp/><sp/>Layer(10)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>+-----+<sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-----+<sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-----+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>|<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>|<sp/><sp/><sp/><sp/><sp/>+------&gt;|<sp/><sp/><sp/><sp/><sp/>+------&gt;|<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>|<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>..&gt;|<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>+-----+<sp/><sp/><sp/><sp/>.<sp/><sp/>+--+--+<sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-----+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.......</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Add&lt;&gt;<sp/>add(4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Linear&lt;&gt;<sp/>lookup(1,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SigmoidLayer&lt;&gt;<sp/>sigmoidLayer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Linear&lt;&gt;<sp/>linear(4,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Recurrent&lt;&gt;<sp/>recurrent(add,<sp/>lookup,<sp/>linear,<sp/>sigmoidLayer,<sp/>rho);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>RNN&lt;&gt;<sp/>model(rho);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>model.Add&lt;IdentityLayer&lt;&gt;<sp/>&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>model.Add(recurrent);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>model.Add&lt;Linear&lt;&gt;<sp/>&gt;(4,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>model.Add&lt;LogSoftMax&lt;&gt;<sp/>&gt;();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>StandardSGD<sp/>opt(0.1,<sp/>1,<sp/>input.n_cols<sp/>/*<sp/>1<sp/>epoch<sp/>*/,<sp/>-100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>model.Train(input,<sp/>labels,<sp/>opt);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>For further examples on the usage of the ann classes, see <ulink url="https://github.com/mlpack/models">mlpack models</ulink>.</para>
</sect1>
<sect1 id="anntutorial_1layer_api_anntut">
<title>Layer API</title>
<para>In order to facilitate consistent implementations, we have defined a LayerType API that describes all the methods that a <computeroutput>layer</computeroutput> may implement. mlpack offers a few variations of this API, each designed to cover some of the model characteristics mentioned in the previous section. Any <computeroutput>layer</computeroutput> requires the implementation of a <computeroutput>Forward()</computeroutput> method. The interface looks like:</para>
<para><programlisting><codeline><highlight class="normal">template&lt;typename<sp/>eT&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Forward(const<sp/>arma::Mat&lt;eT&gt;&amp;<sp/>input,<sp/>arma::Mat&lt;eT&gt;&amp;<sp/>output);</highlight></codeline>
</programlisting></para>
<para>The method should calculate the output of the layer given the input matrix and store the result in the given output matrix. Next, any <computeroutput>layer</computeroutput> must implement the Backward() method, which uses certain computations obtained during the forward pass and should calculate the function f(x) by propagating x backward through f:</para>
<para><programlisting><codeline><highlight class="normal">template&lt;typename<sp/>eT&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Backward(const<sp/>arma::Mat&lt;eT&gt;&amp;<sp/>input,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>arma::Mat&lt;eT&gt;&amp;<sp/>gy,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::Mat&lt;eT&gt;&amp;<sp/>g);</highlight></codeline>
</programlisting></para>
<para>Finally, if the layer is differentiable, the layer must also implement a Gradient() method:</para>
<para><programlisting><codeline><highlight class="normal">template&lt;typename<sp/>eT&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Gradient(const<sp/>arma::Mat&lt;eT&gt;&amp;<sp/>input,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>arma::Mat&lt;eT&gt;&amp;<sp/>error,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::Mat&lt;eT&gt;&amp;<sp/>gradient);</highlight></codeline>
</programlisting></para>
<para>The Gradient function should calculate the gradient with respect to the input activations <computeroutput>input</computeroutput> and calculated errors <computeroutput>error</computeroutput> and place the results into the gradient matrix object <computeroutput>gradient</computeroutput> that is passed as an argument.</para>
<para><simplesect kind="note"><para>Note that each method accepts a template parameter InputType, OutputType or GradientType, which may be arma::mat (dense Armadillo matrix) or arma::sp_mat (sparse Armadillo matrix). This allows support for both sparse-supporting and non-sparse-supporting <computeroutput>layer</computeroutput> without explicitly passing the type.</para>
</simplesect>
In addition, each layer must implement the Parameters(), InputParameter(), OutputParameter(), Delta() methods, differentiable layer should also provide access to the gradient by implementing the Gradient(), Parameters() member function. Note each function is a single line that looks like:</para>
<para><programlisting><codeline><highlight class="normal">OutputDataType<sp/>const&amp;<sp/>Parameters()<sp/>const<sp/>{<sp/>return<sp/>weights;<sp/>}</highlight></codeline>
</programlisting></para>
<para>Below is an example that shows each function with some additional boilerplate code.</para>
<para><simplesect kind="note"><para>Note this is not an actual layer but instead an example that exists to show and document all the functions that mlpack layer must implement. For a better overview of the various layers, see <ref refid="namespacemlpack_1_1ann" kindref="compound">mlpack::ann</ref>. Also be aware that the implementations of each of the methods in this example are entirely fake and do not work; this example exists for its API, not its implementation.</para>
</simplesect>
Note that layer sometimes have different properties. These properties are known at compile-time through the <ref refid="classmlpack_1_1ann_1_1LayerTraits" kindref="compound">mlpack::ann::LayerTraits</ref> class, and some properties may imply the existence (or non-existence) of certain functions. Refer to the LayerTraits <ref refid="layer__traits_8hpp" kindref="compound">layer_traits.hpp</ref> for more documentation on that.</para>
<para>The two template parameters below must be template parameters to the layer, in the order given below. More template parameters are fine, but they must come after the first two.</para>
<para><itemizedlist>
<listitem><para><computeroutput>InputDataType:</computeroutput> this defines the internally used input type for example to store the parameter matrix. Note, a layer could be built on a dense matrix or a sparse matrix. All mlpack trees should be able to support any Armadillo- compatible matrix type. When the layer is written it should be assumed that MatType has the same functionality as arma::mat. Note that</para>
</listitem><listitem><para><computeroutput>OutputDataType:</computeroutput> this defines the internally used input type for example to store the parameter matrix. Note, a layer could be built on a dense matrix or a sparse matrix. All mlpack trees should be able to support any Armadillo- compatible matrix type. When the layer is written it should be assumed that MatType has the same functionality as arma::mat.</para>
</listitem></itemizedlist>
</para>
<para><programlisting><codeline><highlight class="normal">template&lt;typename<sp/>InputDataType<sp/>=<sp/>arma::mat,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>OutputDataType<sp/>=<sp/>arma::mat&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>ExampleLayer</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ExampleLayer(const<sp/>size_t<sp/>inSize,<sp/>const<sp/>size_t<sp/>outSize)<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inputSize(inSize),<sp/>outputSize(outSize)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>Nothing<sp/>to<sp/>do<sp/>here<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The constructor for <computeroutput>ExampleLayer</computeroutput> will build the layer given the input and output size. Note that, if the input or output size information isn&apos;t used internally it&apos;s not necessary to provide a specific constructor. Also, one could add additional or other information that are necessary for the layer construction. One example could be:</para>
<para><programlisting><codeline><highlight class="normal">ExampleLayer(const<sp/>double<sp/>ratio<sp/>=<sp/>0.5)<sp/>:<sp/>ratio(ratio)<sp/>{/*<sp/>Nothing<sp/>to<sp/>do<sp/>here*/}</highlight></codeline>
</programlisting></para>
<para>When this constructor is finished, the entire layer will be built and is ready to be used. Next, as pointed out above, each layer has to follow the LayerType API, so we must implement some additional functions.</para>
<para><programlisting><codeline><highlight class="normal">template&lt;typename<sp/>InputType,<sp/>typename<sp/>OutputType&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Forward(const<sp/>InputType&amp;<sp/>input,<sp/>OutputType&amp;<sp/>output)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output<sp/>=<sp/>arma::ones(input.n_rows,<sp/>input.n_cols);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>InputType,<sp/>typename<sp/>ErrorType,<sp/>typename<sp/>GradientType&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Backward(const<sp/>InputType&amp;<sp/>input,<sp/>const<sp/>ErrorType&amp;<sp/>gy,<sp/>GradientType&amp;<sp/>g)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>g<sp/>=<sp/>arma::zeros(gy.n_rows,<sp/>gy.n_cols)<sp/>+<sp/>gy;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>InputType,<sp/>typename<sp/>ErrorType,<sp/>typename<sp/>GradientType&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Gradient(const<sp/>InputType&amp;<sp/>input,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorType&amp;<sp/>error,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GradientType&amp;<sp/>gradient)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gradient<sp/>=<sp/>arma::zeros(input.n_rows,<sp/>input.n_cols)<sp/>*<sp/>error;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The three functions <computeroutput>Forward()</computeroutput>, <computeroutput>Backward()</computeroutput> and <computeroutput>Gradient()</computeroutput> (which is needed for a differentiable layer) contain the main logic of the layer. The following functions are just to access and manipulate the different layer parameters.</para>
<para><programlisting><codeline><highlight class="normal">OutputDataType&amp;<sp/>Parameters()<sp/>{<sp/>return<sp/>weights;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">InputDataType&amp;<sp/>InputParameter()<sp/>{<sp/>return<sp/>inputParameter;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">OutputDataType&amp;<sp/>OutputParameter()<sp/>{<sp/>return<sp/>outputParameter;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">OutputDataType&amp;<sp/>Delta()<sp/>{<sp/>return<sp/>delta;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">OutputDataType&amp;<sp/>Gradient()<sp/>{<sp/>return<sp/>gradient;<sp/>}</highlight></codeline>
</programlisting></para>
<para>Since some of this methods return internal class members we have to define them.</para>
<para><programlisting><codeline><highlight class="normal">private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>inSize,<sp/>outSize;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OutputDataType<sp/>weights,<sp/>delta,<sp/>gradient,<sp/>outputParameter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>InputDataType<sp/>inputParameter;</highlight></codeline>
</programlisting></para>
<para>Note some members are just here so <computeroutput>ExampleLayer</computeroutput> compiles without warning. For instance, <computeroutput>inputSize</computeroutput> is not required to be a member of every type of layer.</para>
<para>There is one last method that is especially interesting for a layer that shares parameter. Since the layer weights are set once the complete model is defined, it&apos;s not possible to split the weights during the construction time. To solve this issue, a layer can implement the <computeroutput>Reset()</computeroutput> method which is called once the layer parameter is set.</para>
</sect1>
<sect1 id="anntutorial_1model_setup_training_anntut">
<title>Model Setup &amp; Training</title>
<para>Once the base container is selected (<computeroutput>FNN</computeroutput> or <computeroutput>RNN</computeroutput>), the <computeroutput>Add</computeroutput> method can be used to add layers to the model. The code below adds two linear layers to the model<mdash/>the first takes 512 units as input and gives 256 output units, and the second takes 256 units as input and gives 128 output units.</para>
<para><programlisting><codeline><highlight class="normal">FFN&lt;&gt;<sp/>model;</highlight></codeline>
<codeline><highlight class="normal">model.Add&lt;Linear&lt;&gt;<sp/>&gt;(512,<sp/>256);</highlight></codeline>
<codeline><highlight class="normal">model.Add&lt;Linear&lt;&gt;<sp/>&gt;(256,<sp/>128);</highlight></codeline>
</programlisting></para>
<para>The model is trained on Armadillo matrices. For training a model, you will typically use the <computeroutput>Train()</computeroutput> function:</para>
<para><programlisting><codeline><highlight class="normal">arma::mat<sp/>trainingSet,<sp/>trainingLabels;</highlight></codeline>
<codeline><highlight class="normal">model.Train(trainingSet,<sp/>trainingLabels);</highlight></codeline>
</programlisting></para>
<para>You can use mlpack&apos;s <computeroutput><ref refid="namespacemlpack_1_1data_1abbff2a667bf247e00b1fc09b7ca5f831" kindref="member">Load()</ref></computeroutput> function to load a dataset like this:</para>
<para><programlisting><codeline><highlight class="normal">arma::mat<sp/>trainingSet;</highlight></codeline>
<codeline><highlight class="normal">data::Load(&quot;dataset.csv&quot;,<sp/>dataset,<sp/>true);</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">$<sp/>cat<sp/>dataset.csv</highlight></codeline>
<codeline><highlight class="normal">0,<sp/>1,<sp/>4</highlight></codeline>
<codeline><highlight class="normal">1,<sp/>0,<sp/>5</highlight></codeline>
<codeline><highlight class="normal">1,<sp/>1,<sp/>1</highlight></codeline>
<codeline><highlight class="normal">2,<sp/>0,<sp/>2</highlight></codeline>
</programlisting></para>
<para>The type does not necessarily need to be a CSV; it can be any supported storage format, assuming that it is a coordinate-format file in the format specified above. For more information on mlpack file formats, see the documentation for <ref refid="namespacemlpack_1_1data_1abbff2a667bf247e00b1fc09b7ca5f831" kindref="member">mlpack::data::Load()</ref>.</para>
<para><simplesect kind="note"><para>Itâ€™s often a good idea to normalize or standardize your data, for example using:</para>
</simplesect>
<programlisting><codeline><highlight class="normal">for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dataset.n_cols;<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dataset.col(i)<sp/>/=<sp/>norm(dataset.col(i),<sp/>2);</highlight></codeline>
</programlisting></para>
<para>Also, it is possible to retrain a model with new parameters or with a new reference set. This is functionally equivalent to creating a new model.</para>
</sect1>
<sect1 id="anntutorial_1model_saving_loading_anntut">
<title>Saving &amp; Loading</title>
<para>Using <computeroutput>cereal</computeroutput> (for more information about the internals see <ulink url="http://uscilab.github.io/cereal/">the Cereal website</ulink>), mlpack is able to load and save machine learning models with ease. To save a trained neural network to disk. The example below builds a model on the <computeroutput>thyroid</computeroutput> dataset and then saves the model to the file <computeroutput>model.xml</computeroutput> for later use.</para>
<para><programlisting><codeline><highlight class="normal">//<sp/>Load<sp/>the<sp/>training<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>dataset;</highlight></codeline>
<codeline><highlight class="normal">data::Load(&quot;thyroid_train.csv&quot;,<sp/>dataset,<sp/>true);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Split<sp/>the<sp/>labels<sp/>from<sp/>the<sp/>training<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>trainData<sp/>=<sp/>dataset.submat(0,<sp/>0,<sp/>dataset.n_rows<sp/>-<sp/>4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dataset.n_cols<sp/>-<sp/>1);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Split<sp/>the<sp/>data<sp/>from<sp/>the<sp/>training<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Subtract<sp/>1<sp/>so<sp/>the<sp/>labels<sp/>are<sp/>the<sp/>range<sp/>from<sp/>0<sp/>to<sp/>(numClasses<sp/>-<sp/>1).</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>trainLabels<sp/>=<sp/>dataset.submat(dataset.n_rows<sp/>-<sp/>3,<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dataset.n_rows<sp/>-<sp/>1,<sp/>dataset.n_cols<sp/>-<sp/>1)<sp/>-<sp/>1;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>network.</highlight></codeline>
<codeline><highlight class="normal">FFN&lt;&gt;<sp/>model;</highlight></codeline>
<codeline><highlight class="normal">model.Add&lt;Linear&lt;&gt;<sp/>&gt;(trainData.n_rows,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">model.Add&lt;SigmoidLayer&lt;&gt;<sp/>&gt;();</highlight></codeline>
<codeline><highlight class="normal">model.Add&lt;LogSoftMax&lt;&gt;<sp/>&gt;();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Train<sp/>the<sp/>model.</highlight></codeline>
<codeline><highlight class="normal">model.Train(trainData,<sp/>trainLabels);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Use<sp/>the<sp/>Predict<sp/>method<sp/>to<sp/>get<sp/>the<sp/>assignments.</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>assignments;</highlight></codeline>
<codeline><highlight class="normal">model.Predict(trainData,<sp/>assignments);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">data::Save(&quot;model.xml&quot;,<sp/>&quot;model&quot;,<sp/>model,<sp/>false);</highlight></codeline>
</programlisting></para>
<para>After this, the file model.xml will be available in the current working directory.</para>
<para>Now, we can look at the output model file, <computeroutput>model.xml:</computeroutput> </para>
<para><programlisting><codeline><highlight class="normal">$<sp/>cat<sp/>model.xml</highlight></codeline>
<codeline><highlight class="normal">&lt;?xml<sp/>version=&quot;1.0&quot;<sp/>encoding=&quot;utf-8&quot;?&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;cereal&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;model&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;cereal_class_version&gt;0&lt;/cereal_class_version&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;parameter&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;n_rows&gt;60&lt;/n_rows&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;n_cols&gt;1&lt;/n_cols&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;vec_state&gt;0&lt;/vec_state&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;10.461979353567767&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;-10.040855482151116&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;0.18048901768535316&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;4.8989495084787169&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;-4.4381643782652276&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;0.049477846402230616&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;2.5271808924795987&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;-3.96993488526287&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/parameter&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;width&gt;0&lt;/width&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;height&gt;0&lt;/height&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;reset&gt;true&lt;/reset&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;value0&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;vecSize&gt;3&lt;/vecSize&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;value0&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;which&gt;30&lt;/which&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;value0&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;cereal_class_version&gt;0&lt;/cereal_class_version&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;smartPointer&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;ptr_wrapper&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;valid&gt;1&lt;/valid&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;data&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;cereal_class_version&gt;0&lt;/cereal_class_version&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;inSize&gt;19&lt;/inSize&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;outSize&gt;3&lt;/outSize&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/data&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/ptr_wrapper&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/smartPointer&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/value0&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/value0&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;value1&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;which&gt;6&lt;/which&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;value0&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;cereal_class_version&gt;0&lt;/cereal_class_version&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;smartPointer&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;ptr_wrapper&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;valid&gt;1&lt;/valid&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;data&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;cereal_class_version&gt;0&lt;/cereal_class_version&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/data&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/ptr_wrapper&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/smartPointer&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/value0&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/value1&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;value2&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;which&gt;32&lt;/which&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;value0&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;cereal_class_version&gt;0&lt;/cereal_class_version&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;smartPointer&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;ptr_wrapper&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;valid&gt;1&lt;/valid&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;data&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;cereal_class_version&gt;0&lt;/cereal_class_version&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/data&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/ptr_wrapper&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/smartPointer&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/value0&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/value2&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/value0&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/model&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/cereal&gt;</highlight></codeline>
</programlisting></para>
<para>As you can see, the <computeroutput>&lt;parameter&gt;</computeroutput> section of <computeroutput>model.xml</computeroutput> contains the trained network weights. We can see that this section also contains the network input size, which is 66 rows and 1 column. Note that in this example, we used three different layers, as can be seen by looking at the <computeroutput>&lt;network&gt;</computeroutput> section. Each node has a unique id that is used to reconstruct the model when loading.</para>
<para>The models can also be saved as <computeroutput></computeroutput>.bin or <computeroutput></computeroutput>.txt; the <computeroutput></computeroutput>.xml format provides a human-inspectable format (though the models tend to be quite complex and may be difficult to read). These models can then be re-used to be used for classification or other tasks.</para>
<para>So, instead of saving or training a network, mlpack can also load a pre-trained model. For instance, the example below will load the model from <computeroutput>model.xml</computeroutput> and then generate the class predictions for the <computeroutput>thyroid</computeroutput> test dataset.</para>
<para><programlisting><codeline><highlight class="normal">data::Load(&quot;thyroid_test.csv&quot;,<sp/>dataset,<sp/>true);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">arma::mat<sp/>testData<sp/>=<sp/>dataset.submat(0,<sp/>0,<sp/>dataset.n_rows<sp/>-<sp/>4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dataset.n_cols<sp/>-<sp/>1);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">data::Load(&quot;model.xml&quot;,<sp/>&quot;model&quot;,<sp/>model);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">arma::mat<sp/>predictions;</highlight></codeline>
<codeline><highlight class="normal">model.Predict(testData,<sp/>predictions);</highlight></codeline>
</programlisting></para>
<para>This enables the possibility to distribute a model without having to train it first or simply to save a model for later use. Note that loading will also work on different machines.</para>
</sect1>
<sect1 id="anntutorial_1extracting_parameters_anntut">
<title>Extracting Parameters</title>
<para>To access the weights from the neural network layers, you can call the following function on any initialized network:</para>
<para><programlisting><codeline><highlight class="normal">model.Parameters();</highlight></codeline>
</programlisting></para>
<para>which will return the complete model parameters as an armadillo matrix object; however often it is useful to not only have the parameters for the complete network, but the parameters of a specific layer. Another method, <computeroutput>Model()</computeroutput>, makes this easily possible:</para>
<para><programlisting><codeline><highlight class="normal">model.Model()[1].Parameters();</highlight></codeline>
</programlisting></para>
<para>In the example above, we get the weights of the second layer.</para>
</sect1>
<sect1 id="anntutorial_1further_anntut">
<title>Further documentation</title>
<para>For further documentation on the ann classes, consult the <ref refid="namespacemlpack_1_1ann" kindref="compound">complete API documentation</ref>. </para>
</sect1>
    </detaileddescription>
    <location file="/home/aakash/mlpack/doc/tutorials/ann/ann.txt"/>
  </compounddef>
</doxygen>
