<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="akfntutorial" kind="page">
    <compoundname>akfntutorial</compoundname>
    <title>Approximate furthest neighbor search (mlpack_approx_kfn) tutorial</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="akfntutorial_1intro_akfntut">
<title>Introduction</title>
<para><bold>mlpack</bold> implements multiple strategies for approximate furthest neighbor search in its <computeroutput>mlpack_approx_kfn</computeroutput> and <computeroutput>mlpack_kfn</computeroutput> programs (each program corresponds to different techniques). This tutorial discusses what problems these algorithms solve and how to use each of the techniques that <bold>mlpack</bold> implements.</para>
<para><bold>mlpack</bold> implements five approximate furthest neighbor search algorithms:</para>
<para><itemizedlist>
<listitem><para>brute-force search (in <computeroutput>mlpack_kfn</computeroutput>)</para>
</listitem><listitem><para>single-tree search (in <computeroutput>mlpack_kfn</computeroutput>)</para>
</listitem><listitem><para>dual-tree search (in <computeroutput>mlpack_kfn</computeroutput>)</para>
</listitem><listitem><para>query-dependent approximate furthest neighbor (QDAFN) (in <computeroutput>mlpack_approx_kfn</computeroutput>)</para>
</listitem><listitem><para>DrusillaSelect (in <computeroutput>mlpack_approx_kfn</computeroutput>)</para>
</listitem></itemizedlist>
</para>
<para>These methods are described in the following papers:</para>
<para><programlisting><codeline><highlight class="normal">@inproceedings{curtin2013tree,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title={Tree-Independent<sp/>Dual-Tree<sp/>Algorithms},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author={Curtin,<sp/>Ryan<sp/>R.<sp/>and<sp/>March,<sp/>William<sp/>B.<sp/>and<sp/>Ram,<sp/>Parikshit<sp/>and<sp/>Anderson,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>David<sp/>V.<sp/>and<sp/>Gray,<sp/>Alexander<sp/>G.<sp/>and<sp/>Isbell<sp/>Jr.,<sp/>Charles<sp/>L.},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>booktitle={Proceedings<sp/>of<sp/>The<sp/>30th<sp/>International<sp/>Conference<sp/>on<sp/>Machine</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Learning<sp/>(ICML<sp/>&apos;13)},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pages={1435--1443},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year={2013}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">@incollection{pagh2015approximate,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title={Approximate<sp/>furthest<sp/>neighbor<sp/>in<sp/>high<sp/>dimensions},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author={Pagh,<sp/>Rasmus<sp/>and<sp/>Silvestri,<sp/>Francesco<sp/>and<sp/>Sivertsen,<sp/>Johan<sp/>and<sp/>Skala,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Matthew},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>booktitle={Similarity<sp/>Search<sp/>and<sp/>Applications},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pages={3--14},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year={2015},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>publisher={Springer}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">@incollection{curtin2016fast,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title={Fast<sp/>approximate<sp/>furthest<sp/>neighbors<sp/>with<sp/>data-dependent<sp/>candidate</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>selection},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author={Curtin,<sp/>Ryan<sp/>R.,<sp/>and<sp/>Gardner,<sp/>Andrew<sp/>B.},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>booktitle={Similarity<sp/>Search<sp/>and<sp/>Applications},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pages={221--235},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year={2016},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>publisher={Springer}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">@article{curtin2018exploiting,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title={Exploiting<sp/>the<sp/>structure<sp/>of<sp/>furthest<sp/>neighbor<sp/>search<sp/>for<sp/>fast</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>approximate<sp/>results},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author={Curtin,<sp/>Ryan<sp/>R.,<sp/>and<sp/>Echauz,<sp/>Javier,<sp/>and<sp/>Gardner,<sp/>Andrew<sp/>B.},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>journal={Information<sp/>Systems},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year={2018},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>publisher={Elsevier}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The problem of furthest neighbor search is simple, and is the opposite of the much-more-studied nearest neighbor search problem. Given a set of reference points <formula id="177">$R$</formula> (the set in which we are searching), and a set of query points <formula id="178">$Q$</formula> (the set of points for which we want the furthest neighbor), our goal is to return the <formula id="174">$k$</formula> furthest neighbors for each query point in <formula id="178">$Q$</formula>:</para>
<para><formula id="179">\[ \operatorname{k-argmax}_{p_r \in R} d(p_q, p_r). \]</formula></para>
<para>In order to solve this problem, <bold>mlpack</bold> provides a number of interfaces.</para>
<para><itemizedlist>
<listitem><para>two <ref refid="akfntutorial_1cli_akfntut" kindref="member">simple command-line executables</ref> to calculate approximate furthest neighbors</para>
</listitem><listitem><para>a simple <ref refid="akfntutorial_1cpp_qdafn_akfntut" kindref="member">C++ class for QDAFN</ref></para>
</listitem><listitem><para>a simple <ref refid="akfntutorial_1cpp_ds_akfntut" kindref="member">C++ class for DrusillaSelect</ref></para>
</listitem><listitem><para>a simple <ref refid="akfntutorial_1cpp_ns_akfntut" kindref="member">C++ class for tree-based and brute-force</ref> search</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="akfntutorial_1toc_akfntut">
<title>Table of Contents</title>
<para>A list of all the sections this tutorial contains.</para>
<para><itemizedlist>
<listitem><para><ref refid="akfntutorial_1intro_akfntut" kindref="member">Introduction</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1toc_akfntut" kindref="member">Table of Contents</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1which_akfntut" kindref="member">Which algorithm should be used?</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cli_akfntut" kindref="member">Command-line &apos;mlpack_approx_kfn&apos; and &apos;mlpack_kfn&apos;</ref><itemizedlist>
<listitem><para><ref refid="akfntutorial_1cli_ex1_akfntut" kindref="member">Calculate 5 furthest neighbors with default options</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cli_ex2_akfntut" kindref="member">Specifying algorithm parameters for DrusillaSelect</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cli_ex3_akfntut" kindref="member">Using QDAFN instead of DrusillaSelect</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cli_ex4_akfntut" kindref="member">Printing results quality with exact distances</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cli_ex5_akfntut" kindref="member">Using cached exact distances for quality results</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cli_ex6_akfntut" kindref="member">Using tree-based approximation with mlpack_kfn</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cli_ex7_akfntut" kindref="member">Different algorithms with &apos;mlpack_kfn&apos;</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cli_ex8_akfntut" kindref="member">Saving a model for later use</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cli_final_akfntut" kindref="member">Final command-line program notes</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="akfntutorial_1cpp_ds_akfntut" kindref="member">DrusillaSelect C++ class</ref><itemizedlist>
<listitem><para><ref refid="akfntutorial_1cpp_ex1_ds_akfntut" kindref="member">Approximate furthest neighbors with defaults</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cpp_ex2_ds_akfntut" kindref="member">Custom numbers of tables and projections</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cpp_ex3_ds_akfntut" kindref="member">Accessing the candidate set</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cpp_ex4_ds_akfntut" kindref="member">Retraining on a new reference set</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cpp_ex5_ds_akfntut" kindref="member">Running on sparse data</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="akfntutorial_1cpp_qdafn_akfntut" kindref="member">QDAFN C++ class</ref><itemizedlist>
<listitem><para><ref refid="akfntutorial_1cpp_ex1_qdafn_akfntut" kindref="member">Approximate furthest neighbors with defaults</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cpp_ex2_qdafn_akfntut" kindref="member">Custom numbers of tables and projections</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cpp_ex3_qdafn_akfntut" kindref="member">Accessing the candidate set</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cpp_ex4_qdafn_akfntut" kindref="member">Retraining on a new reference set</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cpp_ex5_qdafn_akfntut" kindref="member">Running on sparse data</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="akfntutorial_1cpp_ns_akfntut" kindref="member">KFN C++ class</ref><itemizedlist>
<listitem><para><ref refid="akfntutorial_1cpp_ex1_ns_akfntut" kindref="member">Simple furthest neighbors example</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cpp_ex2_ns_akfntut" kindref="member">Retraining on a new reference set</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cpp_ex3_ns_akfntut" kindref="member">Searching in single-tree mode</ref></para>
</listitem><listitem><para><ref refid="akfntutorial_1cpp_ex4_ns_akfntut" kindref="member">Searching in brute-force mode</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="akfntutorial_1further_doc_akfntut" kindref="member">Further documentation</ref></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="akfntutorial_1which_akfntut">
<title>Which algorithm should be used?</title>
<para>There are three algorithms for furthest neighbor search that <bold>mlpack</bold> implements, and each is suited to a different setting. Below is some basic guidance on what should be used. Note that the question of &quot;which algorithm
should be used&quot; is a very difficult question to answer, so the guidance below is just that<mdash/>guidance<mdash/>and may not be right for a particular problem.</para>
<para><itemizedlist>
<listitem><para><computeroutput>DrusillaSelect</computeroutput> is very fast and will perform extremely well for datasets with outliers or datasets with structure (like low-dimensional datasets embedded in high dimensions)</para>
</listitem><listitem><para><computeroutput>QDAFN</computeroutput> is a random approach and therefore should be well-suited for datasets with little to no structure</para>
</listitem><listitem><para>The tree-based approaches (the <computeroutput>KFN</computeroutput> class and the <computeroutput>mlpack_kfn</computeroutput> program) is best suited for low-dimensional datasets, and is most effective when very small levels of approximation are desired, or when exact results are desired.</para>
</listitem><listitem><para>Dual-tree search is most useful when the query set is large and structured (like for all-furthest-neighbor search).</para>
</listitem><listitem><para>Single-tree search is more useful when the query set is small.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="akfntutorial_1cli_akfntut">
<title>Command-line &apos;mlpack_approx_kfn&apos; and &apos;mlpack_kfn&apos;</title>
<para><bold>mlpack</bold> provides two command-line programs to solve approximate furthest neighbor search:</para>
<para><itemizedlist>
<listitem><para><computeroutput>mlpack_approx_kfn</computeroutput>, for the QDAFN and DrusillaSelect approaches</para>
</listitem><listitem><para><computeroutput>mlpack_kfn</computeroutput>, for exact and approximate tree-based approaches</para>
</listitem></itemizedlist>
</para>
<para>These two programs allow a large number of algorithms to be used to find approximate furthest neighbors. Note that the <computeroutput>mlpack_kfn</computeroutput> program is also documented by the <ref refid="nstutorial_1cli_nstut" kindref="member">Command-Line &apos;mlpack_knn&apos;</ref> section of the <ref refid="nstutorial" kindref="compound">NeighborSearch tutorial (k-nearest-neighbors)</ref> page, as it shares options with the <computeroutput>mlpack_knn</computeroutput> program.</para>
<para>Below are several examples of how the <computeroutput>mlpack_approx_kfn</computeroutput> and <computeroutput>mlpack_kfn</computeroutput> programs might be used. The first examples focus on the <computeroutput>mlpack_approx_kfn</computeroutput> program, and the last few show how <computeroutput>mlpack_kfn</computeroutput> can be used to produce approximate results.</para>
<sect2 id="akfntutorial_1cli_ex1_akfntut">
<title>Calculate 5 furthest neighbors with default options</title>
<para>Here we have a query dataset <computeroutput>queries.csv</computeroutput> and a reference dataset <computeroutput>refs.csv</computeroutput> and we wish to find the 5 furthest neighbors of every query point in the reference dataset. We may do that with the <computeroutput>mlpack_approx_kfn</computeroutput> algorithm, using the default of the <computeroutput>DrusillaSelect</computeroutput> algorithm with default parameters.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_approx_kfn<sp/>-q<sp/>queries.csv<sp/>-r<sp/>refs.csv<sp/>-v<sp/>-k<sp/>5<sp/>-n<sp/>n.csv<sp/>-d<sp/>d.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;refs.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>DrusillaSelect<sp/>model...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Model<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;queries.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Searching<sp/>for<sp/>5<sp/>furthest<sp/>neighbors<sp/>with<sp/>DrusillaSelect...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;n.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;d.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>algorithm:<sp/>ds</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>calculate_error:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>d.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>exact_distances_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>k:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>n.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>num_projections:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>num_tables:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>queries.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>refs.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>drusilla_select_construct:<sp/>0.000342s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>drusilla_select_search:<sp/>0.000780s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.010689s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>saving_data:<sp/>0.005585s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.018592s</highlight></codeline>
</programlisting></para>
<para>Convenient timers for parts of the program operation are printed. The results, saved in <computeroutput>n.csv</computeroutput> and <computeroutput>d.csv</computeroutput>, indicate the furthest neighbors and distances for each query point. The row of the output file indicates the query point that the results are for. The neighbors are listed from furthest to nearest; so, the 4th element in the 3rd row of <computeroutput>d.csv</computeroutput> indicates the distance between the 3rd query point in <computeroutput>queries.csv</computeroutput> and its approximate 4th furthest neighbor. Similarly, the same element in <computeroutput>n.csv</computeroutput> indicates the index of the approximate 4th furthest neighbor (with respect to <computeroutput>refs.csv</computeroutput>).</para>
</sect2>
<sect2 id="akfntutorial_1cli_ex2_akfntut">
<title>Specifying algorithm parameters for DrusillaSelect</title>
<para>The <computeroutput>-p</computeroutput> (<computeroutput><ndash/>num_projections</computeroutput>) and <computeroutput>-t</computeroutput> (<computeroutput><ndash/>num_tables</computeroutput>) parameters affect the running of the <computeroutput>DrusillaSelect</computeroutput> algorithm and the QDAFN algorithm. Specifically, larger values for each of these parameters will search more possible candidate furthest neighbors and produce better results (at the cost of runtime). More details on how each of these parameters works is available in the original papers, the <bold>mlpack</bold> source, or the documentation given by <computeroutput><ndash/>help</computeroutput>.</para>
<para>In the example below, we run <computeroutput>DrusillaSelect</computeroutput> to find 4 furthest neighbors using 10 tables and 2 points in each table. In this case we have chosen to omit the <computeroutput>-n</computeroutput> <computeroutput>n.csv</computeroutput> option, meaning that only the output candidate distances will be written to <computeroutput>d.csv</computeroutput>.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_approx_kfn<sp/>-q<sp/>queries.csv<sp/>-r<sp/>refs.csv<sp/>-v<sp/>-k<sp/>4<sp/>-n<sp/>n.csv<sp/>-d<sp/>d.csv<sp/>-t<sp/>10<sp/>-p<sp/>2</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;refs.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>DrusillaSelect<sp/>model...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Model<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;queries.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Searching<sp/>for<sp/>4<sp/>furthest<sp/>neighbors<sp/>with<sp/>DrusillaSelect...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;n.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;d.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>algorithm:<sp/>ds</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>calculate_error:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>d.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>exact_distances_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>k:<sp/>4</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>n.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>num_projections:<sp/>2</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>num_tables:<sp/>10</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>queries.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>refs.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>drusilla_select_construct:<sp/>0.000645s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>drusilla_select_search:<sp/>0.000551s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.008518s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>saving_data:<sp/>0.003734s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.014019s</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="akfntutorial_1cli_ex3_akfntut">
<title>Using QDAFN instead of DrusillaSelect</title>
<para>The algorithm to be used for approximate furthest neighbor search can be specified with the <computeroutput><ndash/>algorithm</computeroutput> (<computeroutput>-a</computeroutput>) option to the <computeroutput>mlpack_approx_kfn</computeroutput> program. Below, we use the QDAFN algorithm instead of the default. We leave the <computeroutput>-p</computeroutput> and <computeroutput>-t</computeroutput> options at their defaults<mdash/>even though QDAFN often requires more tables and points to get the same quality of results.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_approx_kfn<sp/>-q<sp/>queries.csv<sp/>-r<sp/>refs.csv<sp/>-v<sp/>-k<sp/>3<sp/>-n<sp/>n.csv<sp/>-d<sp/>d.csv<sp/>-a<sp/>qdafn</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;refs.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>QDAFN<sp/>model...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Model<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;queries.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Searching<sp/>for<sp/>3<sp/>furthest<sp/>neighbors<sp/>with<sp/>QDAFN...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;n.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;d.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>algorithm:<sp/>qdafn</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>calculate_error:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>d.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>exact_distances_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>k:<sp/>3</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>n.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>num_projections:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>num_tables:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>queries.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>refs.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.008380s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>qdafn_construct:<sp/>0.003399s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>qdafn_search:<sp/>0.000886s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>saving_data:<sp/>0.002253s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.015465s</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="akfntutorial_1cli_ex4_akfntut">
<title>Printing results quality with exact distances</title>
<para>The <computeroutput>mlpack_approx_kfn</computeroutput> program can calculate the quality of the results if the <computeroutput><ndash/>calculate_error</computeroutput> (<computeroutput>-e</computeroutput>) flag is specified. Below we use the program with its default parameters and calculate the error, which is displayed in the output. The error is only calculated for the furthest neighbor, not all k; therefore, in this example we have set <computeroutput>-k</computeroutput> to <computeroutput>1</computeroutput>.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_approx_kfn<sp/>-q<sp/>queries.csv<sp/>-r<sp/>refs.csv<sp/>-v<sp/>-k<sp/>1<sp/>-e<sp/>-q<sp/>-n<sp/>n.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;refs.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>DrusillaSelect<sp/>model...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Model<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;queries.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Searching<sp/>for<sp/>1<sp/>furthest<sp/>neighbors<sp/>with<sp/>DrusillaSelect...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Calculating<sp/>exact<sp/>distances...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>28891<sp/>node<sp/>combinations<sp/>were<sp/>scored.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>37735<sp/>base<sp/>cases<sp/>were<sp/>calculated.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Calculation<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Average<sp/>error:<sp/>1.08417.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Maximum<sp/>error:<sp/>1.28712.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Minimum<sp/>error:<sp/>1.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>algorithm:<sp/>ds</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>calculate_error:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>exact_distances_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>k:<sp/>3</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>num_projections:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>num_tables:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>queries.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>refs.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>computing_neighbors:<sp/>0.001476s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>drusilla_select_construct:<sp/>0.000309s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>drusilla_select_search:<sp/>0.000495s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.008462s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.011670s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_building:<sp/>0.000202s</highlight></codeline>
</programlisting></para>
<para>Note that the output includes three lines indicating the error:</para>
<para><programlisting><codeline><highlight class="normal">[INFO<sp/>]<sp/>Average<sp/>error:<sp/>1.08417.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Maximum<sp/>error:<sp/>1.28712.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Minimum<sp/>error:<sp/>1.</highlight></codeline>
</programlisting></para>
<para>In this case, a minimum error of 1 indicates an exact result, and over the entire query set the algorithm has returned a furthest neighbor candidate with maximum error 1.28712.</para>
</sect2>
<sect2 id="akfntutorial_1cli_ex5_akfntut">
<title>Using cached exact distances for quality results</title>
<para>However, for large datasets, calculating the error may take a long time, because the exact furthest neighbors must be calculated. Therefore, if the exact furthest neighbor distances are already known, they may be passed in with the <computeroutput><ndash/>exact_distances_file</computeroutput> (<computeroutput>-x</computeroutput>) option in order to avoid the calculation. In the example below, we assume <computeroutput>exact.csv</computeroutput> contains the exact furthest neighbor distances. We run the <computeroutput>qdafn</computeroutput> algorithm in this example.</para>
<para>Note that the <computeroutput>-e</computeroutput> option must be specified for the <computeroutput>-x</computeroutput> option have any effect.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_approx_kfn<sp/>-q<sp/>queries.csv<sp/>-r<sp/>refs.csv<sp/>-k<sp/>1<sp/>-e<sp/>-x<sp/>exact.csv<sp/>-n<sp/>n.csv<sp/>-v<sp/>-a<sp/>qdafn</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;refs.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>QDAFN<sp/>model...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Model<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;queries.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Searching<sp/>for<sp/>1<sp/>furthest<sp/>neighbors<sp/>with<sp/>QDAFN...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;exact.csv&apos;<sp/>as<sp/>raw<sp/>ASCII<sp/>formatted<sp/>data.<sp/><sp/>Size<sp/>is<sp/>1<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Average<sp/>error:<sp/>1.06914.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Maximum<sp/>error:<sp/>1.67407.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Minimum<sp/>error:<sp/>1.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;n.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>algorithm:<sp/>qdafn</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>calculate_error:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>exact_distances_file:<sp/>exact.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>k:<sp/>1</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>n.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>num_projections:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>num_tables:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>queries.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>refs.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.010348s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>qdafn_construct:<sp/>0.000318s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>qdafn_search:<sp/>0.000793s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>saving_data:<sp/>0.000259s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.012254s</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="akfntutorial_1cli_ex6_akfntut">
<title>Using tree-based approximation with mlpack_kfn</title>
<para>The <computeroutput>mlpack_kfn</computeroutput> algorithm allows specifying a desired approximation level with the <computeroutput><ndash/>epsilon</computeroutput> (<computeroutput>-e</computeroutput>) option. The parameter must be greater than or equal to 0 and less than 1. A setting of 0 indicates exact search.</para>
<para>The example below runs dual-tree furthest neighbor search (the default algorithm) with the approximation parameter set to 0.5.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_kfn<sp/>-q<sp/>queries.csv<sp/>-r<sp/>refs.csv<sp/>-v<sp/>-k<sp/>3<sp/>-e<sp/>0.5<sp/>-n<sp/>n.csv<sp/>-d<sp/>d.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;refs.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loaded<sp/>reference<sp/>data<sp/>from<sp/>&apos;refs.csv&apos;<sp/>(3x1000).</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>reference<sp/>tree...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Tree<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;queries.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loaded<sp/>query<sp/>data<sp/>from<sp/>&apos;queries.csv&apos;<sp/>(3x1000).</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Searching<sp/>for<sp/>3<sp/>neighbors<sp/>with<sp/>dual-tree<sp/>kd-tree<sp/>search...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>1611<sp/>node<sp/>combinations<sp/>were<sp/>scored.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>13938<sp/>base<sp/>cases<sp/>were<sp/>calculated.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>1611<sp/>node<sp/>combinations<sp/>were<sp/>scored.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>13938<sp/>base<sp/>cases<sp/>were<sp/>calculated.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;n.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;d.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>algorithm:<sp/>dual_tree</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>d.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>epsilon:<sp/>0.5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>k:<sp/>3</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>leaf_size:<sp/>20</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>naive:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>n.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>percentage:<sp/>1</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>queries.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>random_basis:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>refs.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>seed:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>single_mode:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_type:<sp/>kd</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>true_distances_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>true_neighbors_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>computing_neighbors:<sp/>0.000442s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.008060s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>saving_data:<sp/>0.002850s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.012667s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_building:<sp/>0.000251s</highlight></codeline>
</programlisting></para>
<para>Note that the format of the output files <computeroutput>d.csv</computeroutput> and <computeroutput>n.csv</computeroutput> are the same as for <computeroutput>mlpack_approx_kfn</computeroutput>.</para>
</sect2>
<sect2 id="akfntutorial_1cli_ex7_akfntut">
<title>Different algorithms with &apos;mlpack_kfn&apos;</title>
<para>The <computeroutput>mlpack_kfn</computeroutput> program offers a large number of different algorithms that can be used. The <computeroutput><ndash/>algorithm</computeroutput> (<computeroutput>-a</computeroutput>) may be used to specify three main different algorithm types: <computeroutput>naive</computeroutput> (brute-force search), <computeroutput>single_tree</computeroutput> (single-tree search), <computeroutput>dual_tree</computeroutput> (dual-tree search, the default), and <computeroutput>greedy</computeroutput> (&quot;defeatist&quot; greedy search, which goes to one leaf node of the tree then terminates). The example below uses single-tree search to find approximate neighbors with epsilon set to 0.1.</para>
<para><programlisting><codeline><highlight class="normal">mlpack_kfn<sp/>-q<sp/>queries.csv<sp/>-r<sp/>refs.csv<sp/>-v<sp/>-k<sp/>3<sp/>-e<sp/>0.1<sp/>-n<sp/>n.csv<sp/>-d<sp/>d.csv<sp/>-a<sp/>single_tree</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;refs.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loaded<sp/>reference<sp/>data<sp/>from<sp/>&apos;refs.csv&apos;<sp/>(3x1000).</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>reference<sp/>tree...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Tree<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;queries.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loaded<sp/>query<sp/>data<sp/>from<sp/>&apos;queries.csv&apos;<sp/>(3x1000).</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Searching<sp/>for<sp/>3<sp/>neighbors<sp/>with<sp/>single-tree<sp/>kd-tree<sp/>search...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>13240<sp/>node<sp/>combinations<sp/>were<sp/>scored.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>15924<sp/>base<sp/>cases<sp/>were<sp/>calculated.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;n.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;d.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>algorithm:<sp/>single_tree</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>d.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>epsilon:<sp/>0.1</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>k:<sp/>3</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>leaf_size:<sp/>20</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>naive:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>n.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>percentage:<sp/>1</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>queries.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>random_basis:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>refs.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>seed:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>single_mode:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_type:<sp/>kd</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>true_distances_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>true_neighbors_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>computing_neighbors:<sp/>0.000850s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.007858s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>saving_data:<sp/>0.003445s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.013084s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>tree_building:<sp/>0.000250s</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="akfntutorial_1cli_ex8_akfntut">
<title>Saving a model for later use</title>
<para>The <computeroutput>mlpack_approx_kfn</computeroutput> and <computeroutput>mlpack_kfn</computeroutput> programs both allow models to be saved and loaded for future use. The <computeroutput><ndash/>output_model_file</computeroutput> (<computeroutput>-M</computeroutput>) option allows specifying where to save a model, and the <computeroutput><ndash/>input_model_file</computeroutput> (<computeroutput>-m</computeroutput>) option allows a model to be loaded instead of trained. So, if you specify <computeroutput><ndash/>input_model_file</computeroutput> then you do not need to specify <computeroutput><ndash/>reference_file</computeroutput> (<computeroutput>-r</computeroutput>), <computeroutput><ndash/>num_projections</computeroutput> (<computeroutput>-p</computeroutput>), or <computeroutput><ndash/>num_tables</computeroutput> (<computeroutput>-t</computeroutput>).</para>
<para>The example below saves a model with 10 projections and 5 tables. Note that neither <computeroutput><ndash/>query_file</computeroutput> (<computeroutput>-q</computeroutput>) nor <computeroutput>-k</computeroutput> are specified; this run only builds the model and saves it to <computeroutput>model.bin</computeroutput>.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_approx_kfn<sp/>-r<sp/>refs.csv<sp/>-t<sp/>5<sp/>-p<sp/>10<sp/>-v<sp/>-M<sp/>model.bin</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;refs.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Building<sp/>DrusillaSelect<sp/>model...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Model<sp/>built.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>algorithm:<sp/>ds</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>calculate_error:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>exact_distances_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>k:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>num_projections:<sp/>10</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>num_tables:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>model.bin</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>refs.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>drusilla_select_construct:<sp/>0.000321s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.004700s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.007320s</highlight></codeline>
</programlisting></para>
<para>Now, with the model saved, we can run approximate furthest neighbor search on a query set using the saved model:</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_approx_kfn<sp/>-m<sp/>model.bin<sp/>-q<sp/>queries.csv<sp/>-k<sp/>3<sp/>-d<sp/>d.csv<sp/>-n<sp/>n.csv<sp/>-v</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;queries.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>3<sp/>x<sp/>1000.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Searching<sp/>for<sp/>3<sp/>furthest<sp/>neighbors<sp/>with<sp/>DrusillaSelect...</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Search<sp/>complete.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;n.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;d.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>algorithm:<sp/>ds</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>calculate_error:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>distances_file:<sp/>d.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>exact_distances_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>model.bin</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>k:<sp/>3</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>neighbors_file:<sp/>n.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>num_projections:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>num_tables:<sp/>5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>query_file:<sp/>queries.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>reference_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>drusilla_select_search:<sp/>0.000878s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.004599s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>saving_data:<sp/>0.003006s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.009234s</highlight></codeline>
</programlisting></para>
<para>These options work in the same way for both the <computeroutput>mlpack_approx_kfn</computeroutput> and <computeroutput>mlpack_kfn</computeroutput> programs.</para>
</sect2>
<sect2 id="akfntutorial_1cli_final_akfntut">
<title>Final command-line program notes</title>
<para>Both the <computeroutput>mlpack_kfn</computeroutput> and <computeroutput>mlpack_approx_kfn</computeroutput> programs contain numerous options not fully documented in these short examples. You can run each program with the <computeroutput><ndash/>help</computeroutput> (<computeroutput>-h</computeroutput>) option for more information.</para>
</sect2>
</sect1>
<sect1 id="akfntutorial_1cpp_ds_akfntut">
<title>DrusillaSelect C++ class</title>
<para><bold>mlpack</bold> provides a simple <computeroutput>DrusillaSelect</computeroutput> C++ class that can be used inside of C++ programs to perform approximate furthest neighbor search. The class has only one template parameter<mdash/><computeroutput>MatType<mdash/>which</computeroutput> specifies the type of matrix to be use. That means the class can be used with either dense data (of type <computeroutput>arma::mat</computeroutput>) or sparse data (of type <computeroutput>arma::sp_mat</computeroutput>).</para>
<para>The following examples show simple usage of this class.</para>
<sect2 id="akfntutorial_1cpp_ex1_ds_akfntut">
<title>Approximate furthest neighbors with defaults</title>
<para>The code below builds a <computeroutput>DrusillaSelect</computeroutput> model with default options on the matrix <computeroutput>dataset</computeroutput>, then queries for the approximate furthest neighbor of every point in the <computeroutput>queries</computeroutput> matrix.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/approx_kfn/drusilla_select.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>reference<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>dataset;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>query<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>queries;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>the<sp/>model<sp/>with<sp/>defaults.</highlight></codeline>
<codeline><highlight class="normal">DrusillaSelect&lt;&gt;<sp/>ds(dataset);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Query<sp/>the<sp/>model,<sp/>putting<sp/>output<sp/>into<sp/>the<sp/>following<sp/>two<sp/>matrices.</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>distances;</highlight></codeline>
<codeline><highlight class="normal">arma::Mat&lt;size_t&gt;<sp/>neighbors;</highlight></codeline>
<codeline><highlight class="normal">ds.Search(queries,<sp/>1,<sp/>neighbors,<sp/>distances);</highlight></codeline>
</programlisting></para>
<para>At the end of this code, both the <computeroutput>distances</computeroutput> and <computeroutput>neighbors</computeroutput> matrices will have number of columns equal to the number of columns in the <computeroutput>queries</computeroutput> matrix. So, each column of the <computeroutput>distances</computeroutput> and <computeroutput>neighbors</computeroutput> matrices are the distances or neighbors of the corresponding column in the <computeroutput>queries</computeroutput> matrix.</para>
</sect2>
<sect2 id="akfntutorial_1cpp_ex2_ds_akfntut">
<title>Custom numbers of tables and projections</title>
<para>The following example constructs a DrusillaSelect model with 10 tables and 5 projections. Once that is done it performs the same task as the previous example.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/approx_kfn/drusilla_select.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>reference<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>dataset;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>query<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>queries;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>the<sp/>model<sp/>with<sp/>custom<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal">DrusillaSelect&lt;&gt;<sp/>ds(dataset,<sp/>10,<sp/>5);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Query<sp/>the<sp/>model,<sp/>putting<sp/>output<sp/>into<sp/>the<sp/>following<sp/>two<sp/>matrices.</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>distances;</highlight></codeline>
<codeline><highlight class="normal">arma::Mat&lt;size_t&gt;<sp/>neighbors;</highlight></codeline>
<codeline><highlight class="normal">ds.Search(queries,<sp/>1,<sp/>neighbors,<sp/>distances);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="akfntutorial_1cpp_ex3_ds_akfntut">
<title>Accessing the candidate set</title>
<para>The <computeroutput>DrusillaSelect</computeroutput> algorithm merely scans the reference set and extracts a number of points that will be queried in a brute-force fashion when the <computeroutput>Search()</computeroutput> method is called. We can access this set with the <computeroutput>CandidateSet()</computeroutput> method. The code below prints the fifth point of the candidate set.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/approx_kfn/drusilla_select.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>reference<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>dataset;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>the<sp/>model<sp/>with<sp/>custom<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal">DrusillaSelect&lt;&gt;<sp/>ds(dataset,<sp/>10,<sp/>5);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Print<sp/>the<sp/>fifth<sp/>point<sp/>of<sp/>the<sp/>candidate<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>ds.CandidateSet().col(4).t();</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="akfntutorial_1cpp_ex4_ds_akfntut">
<title>Retraining on a new reference set</title>
<para>It is possible to retrain a <computeroutput>DrusillaSelect</computeroutput> model with new parameters or with a new reference set. This is functionally equivalent to creating a new model. The example code below creates a first <computeroutput>DrusillaSelect</computeroutput> model using 3 tables and 10 projections, and then retrains this with the same reference set using 10 tables and 3 projections.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/approx_kfn/drusilla_select.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>reference<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>dataset;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>the<sp/>model<sp/>with<sp/>initial<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal">DrusillaSelect&lt;&gt;<sp/>ds(dataset,<sp/>3,<sp/>10);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Now<sp/>retrain<sp/>with<sp/>different<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal">ds.Train(dataset,<sp/>10,<sp/>3);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="akfntutorial_1cpp_ex5_ds_akfntut">
<title>Running on sparse data</title>
<para>We can set the template parameter for <computeroutput>DrusillaSelect</computeroutput> to <computeroutput>arma::sp_mat</computeroutput> in order to perform furthest neighbor search on sparse data. This code below creates a <computeroutput>DrusillaSelect</computeroutput> model using 4 tables and 6 projections with sparse input data, then searches for 3 approximate furthest neighbors.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/approx_kfn/drusilla_select.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>reference<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::sp_mat<sp/>dataset;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>query<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::sp_mat<sp/>querySet;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>the<sp/>model<sp/>on<sp/>sparse<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">DrusillaSelect&lt;arma::sp_mat&gt;<sp/>ds(dataset,<sp/>4,<sp/>6);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Search<sp/>on<sp/>query<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">arma::Mat&lt;size_t&gt;<sp/>neighbors;</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>distances;</highlight></codeline>
<codeline><highlight class="normal">ds.Search(querySet,<sp/>3,<sp/>neighbors,<sp/>distances);</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="akfntutorial_1cpp_qdafn_akfntut">
<title>QDAFN C++ class</title>
<para><bold>mlpack</bold> also provides a standalone simple <computeroutput>QDAFN</computeroutput> class for furthest neighbor search. The API for this class is virtually identical to the <computeroutput>DrusillaSelect</computeroutput> class, and also has one template parameter to specify the type of matrix to be used (dense or sparse or other).</para>
<para>The following subsections demonstrate usage of the <computeroutput>QDAFN</computeroutput> class in the same way as the previous section&apos;s examples for <computeroutput>DrusillaSelect</computeroutput>.</para>
<sect2 id="akfntutorial_1cpp_ex1_qdafn_akfntut">
<title>Approximate furthest neighbors with defaults</title>
<para>The code below builds a <computeroutput>QDAFN</computeroutput> model with default options on the matrix <computeroutput>dataset</computeroutput>, then queries for the approximate furthest neighbor of every point in the <computeroutput>queries</computeroutput> matrix.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/approx_kfn/qdafn.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>reference<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>dataset;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>query<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>queries;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>the<sp/>model<sp/>with<sp/>defaults.</highlight></codeline>
<codeline><highlight class="normal">QDAFN&lt;&gt;<sp/>qd(dataset);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Query<sp/>the<sp/>model,<sp/>putting<sp/>output<sp/>into<sp/>the<sp/>following<sp/>two<sp/>matrices.</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>distances;</highlight></codeline>
<codeline><highlight class="normal">arma::Mat&lt;size_t&gt;<sp/>neighbors;</highlight></codeline>
<codeline><highlight class="normal">qd.Search(queries,<sp/>1,<sp/>neighbors,<sp/>distances);</highlight></codeline>
</programlisting></para>
<para>At the end of this code, both the <computeroutput>distances</computeroutput> and <computeroutput>neighbors</computeroutput> matrices will have number of columns equal to the number of columns in the <computeroutput>queries</computeroutput> matrix. So, each column of the <computeroutput>distances</computeroutput> and <computeroutput>neighbors</computeroutput> matrices are the distances or neighbors of the corresponding column in the <computeroutput>queries</computeroutput> matrix.</para>
</sect2>
<sect2 id="akfntutorial_1cpp_ex2_qdafn_akfntut">
<title>Custom numbers of tables and projections</title>
<para>The following example constructs a QDAFN model with 15 tables and 30 projections. Once that is done it performs the same task as the previous example.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/approx_kfn/qdafn.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>reference<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>dataset;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>query<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>queries;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>the<sp/>model<sp/>with<sp/>custom<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal">QDAFN&lt;&gt;<sp/>qdafn(dataset,<sp/>15,<sp/>30);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Query<sp/>the<sp/>model,<sp/>putting<sp/>output<sp/>into<sp/>the<sp/>following<sp/>two<sp/>matrices.</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>distances;</highlight></codeline>
<codeline><highlight class="normal">arma::Mat&lt;size_t&gt;<sp/>neighbors;</highlight></codeline>
<codeline><highlight class="normal">qdafn.Search(queries,<sp/>1,<sp/>neighbors,<sp/>distances);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="akfntutorial_1cpp_ex3_qdafn_akfntut">
<title>Accessing the candidate set</title>
<para>The <computeroutput>QDAFN</computeroutput> algorithm scans the reference set, extracting points that have been projected onto random directions. Each random direction corresponds to a single table. The <computeroutput>QDAFN</computeroutput> class stores these points as a vector of matrices, which can be accessed with the <computeroutput>CandidateSet()</computeroutput> method. The code below prints the fifth point of the candidate set of the third table.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/approx_kfn/qdafn.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>reference<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>dataset;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>the<sp/>model<sp/>with<sp/>custom<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal">QDAFN&lt;&gt;<sp/>qdafn(dataset,<sp/>10,<sp/>5);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Print<sp/>the<sp/>fifth<sp/>point<sp/>of<sp/>the<sp/>candidate<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>ds.CandidateSet(2).col(4).t();</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="akfntutorial_1cpp_ex4_qdafn_akfntut">
<title>Retraining on a new reference set</title>
<para>It is possible to retrain a <computeroutput>QDAFN</computeroutput> model with new parameters or with a new reference set. This is functionally equivalent to creating a new model. The example code below creates a first <computeroutput>QDAFN</computeroutput> model using 10 tables and 40 projections, and then retrains this with the same reference set using 15 tables and 25 projections.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/approx_kfn/qdafn.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>reference<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>dataset;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>the<sp/>model<sp/>with<sp/>initial<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal">QDAFN&lt;&gt;<sp/>qdafn(dataset,<sp/>3,<sp/>10);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Now<sp/>retrain<sp/>with<sp/>different<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal">qdafn.Train(dataset,<sp/>10,<sp/>3);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="akfntutorial_1cpp_ex5_qdafn_akfntut">
<title>Running on sparse data</title>
<para>We can set the template parameter for <computeroutput>QDAFN</computeroutput> to <computeroutput>arma::sp_mat</computeroutput> in order to perform furthest neighbor search on sparse data. This code below creates a <computeroutput>QDAFN</computeroutput> model using 20 tables and 60 projections with sparse input data, then searches for 3 approximate furthest neighbors.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/approx_kfn/qdafn.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>reference<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::sp_mat<sp/>dataset;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>query<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::sp_mat<sp/>querySet;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>the<sp/>model<sp/>on<sp/>sparse<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">QDAFN&lt;arma::sp_mat&gt;<sp/>qdafn(dataset,<sp/>20,<sp/>60);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Search<sp/>on<sp/>query<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">arma::Mat&lt;size_t&gt;<sp/>neighbors;</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>distances;</highlight></codeline>
<codeline><highlight class="normal">qdafn.Search(querySet,<sp/>3,<sp/>neighbors,<sp/>distances);</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="akfntutorial_1cpp_ns_akfntut">
<title>KFN C++ class</title>
<para>The extensive <computeroutput>NeighborSearch</computeroutput> class also provides a way to search for approximate furthest neighbors using a different, tree-based technique. For full documentation on this class, see the <ref refid="nstutorial" kindref="compound">NeighborSearch tutorial</ref>. The <computeroutput>KFN</computeroutput> class is a convenient typedef of the <computeroutput>NeighborSearch</computeroutput> class that can be used to perform the furthest neighbors task with kd-trees.</para>
<para>In the following subsections, the <computeroutput>KFN</computeroutput> class is used in short code examples.</para>
<sect2 id="akfntutorial_1cpp_ex1_ns_akfntut">
<title>Simple furthest neighbors example</title>
<para>The <computeroutput>KFN</computeroutput> class has construction semantics similar to <computeroutput>DrusillaSelect</computeroutput> and <computeroutput>QDAFN</computeroutput>. The example below constructs a <computeroutput>KFN</computeroutput> object (which will build the tree on the reference set), but note that the third parameter to the constructor allows us to specify our desired level of approximation. In this example we choose epsilon = 0.05. Then, the code searches for 3 approximate furthest neighbors.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/neighbor_search/neighbor_search.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>reference<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>dataset;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>query<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>querySet;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>the<sp/>object,<sp/>performing<sp/>the<sp/>default<sp/>dual-tree<sp/>search<sp/>with</highlight></codeline>
<codeline><highlight class="normal">//<sp/>approximation<sp/>level<sp/>epsilon<sp/>=<sp/>0.05.</highlight></codeline>
<codeline><highlight class="normal">KFN<sp/>kfn(dataset,<sp/>KFN::DUAL_TREE_MODE,<sp/>0.05);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Search<sp/>for<sp/>approximate<sp/>furthest<sp/>neighbors.</highlight></codeline>
<codeline><highlight class="normal">arma::Mat&lt;size_t&gt;<sp/>neighbors;</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>distances;</highlight></codeline>
<codeline><highlight class="normal">kfn.Search(querySet,<sp/>3,<sp/>neighbors,<sp/>distances);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="akfntutorial_1cpp_ex2_ns_akfntut">
<title>Retraining on a new reference set</title>
<para>Like the <computeroutput>QDAFN</computeroutput> and <computeroutput>DrusillaSelect</computeroutput> classes, the <computeroutput>KFN</computeroutput> class is capable of retraining on a new reference set. The code below demonstrates this.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/neighbor_search/neighbor_search.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>original<sp/>reference<sp/>set<sp/>we<sp/>train<sp/>on.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>dataset;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>new<sp/>reference<sp/>set<sp/>we<sp/>retrain<sp/>on.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>newDataset;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>the<sp/>object<sp/>with<sp/>approximation<sp/>level<sp/>0.1.</highlight></codeline>
<codeline><highlight class="normal">KFN<sp/>kfn(dataset,<sp/>DUAL_TREE_MODE,<sp/>0.1);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Retrain<sp/>on<sp/>the<sp/>new<sp/>reference<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">kfn.Train(newDataset);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="akfntutorial_1cpp_ex3_ns_akfntut">
<title>Searching in single-tree mode</title>
<para>The particular mode to be used in search can be specified in the constructor. In this example, we use single-tree search (as opposed to the default of dual-tree search).</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/neighbor_search/neighbor_search.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>reference<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>dataset;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>query<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>querySet;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>the<sp/>object<sp/>with<sp/>approximation<sp/>level<sp/>0.25<sp/>and<sp/>in<sp/>single<sp/>tree<sp/>search</highlight></codeline>
<codeline><highlight class="normal">//<sp/>mode.</highlight></codeline>
<codeline><highlight class="normal">KFN<sp/>kfn(dataset,<sp/>SINGLE_TREE_MODE,<sp/>0.25);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Search<sp/>for<sp/>5<sp/>approximate<sp/>furthest<sp/>neighbors.</highlight></codeline>
<codeline><highlight class="normal">arma::Mat&lt;size_t&gt;<sp/>neighbors;</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>distances;</highlight></codeline>
<codeline><highlight class="normal">kfn.Search(querySet,<sp/>5,<sp/>neighbors,<sp/>distances);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="akfntutorial_1cpp_ex4_ns_akfntut">
<title>Searching in brute-force mode</title>
<para>If desired, brute-force search (&quot;naive search&quot;) can be used to find the furthest neighbors; however, the result will not be approximate<mdash/>it will be exact (since every possibility will be considered). The code below performs exact furthest neighbor search by using the <computeroutput>KFN</computeroutput> class in brute-force mode.</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/neighbor_search/neighbor_search.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::neighbor;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>reference<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>dataset;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>query<sp/>set.</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::mat<sp/>querySet;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Construct<sp/>the<sp/>object<sp/>in<sp/>brute-force<sp/>mode.<sp/><sp/>We<sp/>can<sp/>leave<sp/>the<sp/>approximation</highlight></codeline>
<codeline><highlight class="normal">//<sp/>parameter<sp/>to<sp/>its<sp/>default<sp/>(0)<sp/>since<sp/>brute-force<sp/>will<sp/>provide<sp/>exact<sp/>results.</highlight></codeline>
<codeline><highlight class="normal">KFN<sp/>kfn(dataset,<sp/>NAIVE_MODE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Perform<sp/>the<sp/>search<sp/>for<sp/>2<sp/>furthest<sp/>neighbors.</highlight></codeline>
<codeline><highlight class="normal">arma::Mat&lt;size_t&gt;<sp/>neighbors;</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>distances;</highlight></codeline>
<codeline><highlight class="normal">kfn.Search(querySet,<sp/>2,<sp/>neighbors,<sp/>distances);</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="akfntutorial_1further_doc_akfntut">
<title>Further documentation</title>
<para>For further documentation on the approximate furthest neighbor facilities offered by <bold>mlpack</bold>, consult the following documentation:</para>
<para><itemizedlist>
<listitem><para><ref refid="nstutorial" kindref="compound">NeighborSearch tutorial (k-nearest-neighbors)</ref></para>
</listitem><listitem><para><ref refid="classmlpack_1_1neighbor_1_1QDAFN" kindref="compound">QDAFN class documentation</ref></para>
</listitem><listitem><para><ref refid="classmlpack_1_1neighbor_1_1DrusillaSelect" kindref="compound">DrusillaSelect class documentation</ref></para>
</listitem><listitem><para><ref refid="classmlpack_1_1neighbor_1_1NeighborSearch" kindref="compound">NeighborSearch class documentation</ref> </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
    <location file="/home/aakash/mlpack/doc/tutorials/approx_kfn/approx_kfn.txt"/>
  </compounddef>
</doxygen>
