<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="lrtutorial" kind="page">
    <compoundname>lrtutorial</compoundname>
    <title>Linear/ridge regression tutorial (mlpack_linear_regression)</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="lrtutorial_1intro_lrtut">
<title>Introduction</title>
<para>Linear regression and ridge regression are simple machine learning techniques that aim to estimate the parameters of a linear model. Assuming we have <formula id="180">$n$</formula> <bold>predictor</bold> points <formula id="211">$\mathbf{x_i}, 0 \le i &lt; n$</formula> of dimensionality <formula id="212">$d$</formula> and <formula id="180">$n$</formula> responses <formula id="213">$y_i, 0 \le i &lt; n$</formula>, we are trying to estimate the best fit for <formula id="214">$\beta_i, 0 \le i \le d$</formula> in the linear model</para>
<para><formula id="215">\[ y_i = \beta_0 + \displaystyle\sum_{j = 1}^{d} \beta_j x_{ij} \]</formula></para>
<para>for each predictor <formula id="216">$\mathbf{x_i}$</formula> and response <formula id="217">$y_i$</formula>. If we take each predictor <formula id="216">$\mathbf{x_i}$</formula> as a row in the matrix <formula id="218">$\mathbf{X}$</formula> and each response <formula id="217">$y_i$</formula> as an entry of the vector <formula id="219">$\mathbf{y}$</formula>, we can represent the model in vector form:</para>
<para><formula id="220">\[ \mathbf{y} = \mathbf{X} \mathbf{\beta} + \beta_0 \]</formula></para>
<para>The result of this method is the vector <formula id="221">$\mathbf{\beta}$</formula>, including the offset term (or intercept term) <formula id="222">$\beta_0$</formula>.</para>
<para><bold>mlpack</bold> provides:</para>
<para><itemizedlist>
<listitem><para>a <ref refid="lrtutorial_1cli_lrtut" kindref="member">simple command-line executable</ref> to perform linear regression or ridge regression</para>
</listitem><listitem><para>a <ref refid="lrtutorial_1linreg_lrtut" kindref="member">simple C++ interface</ref> to perform linear regression or ridge regression</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="lrtutorial_1toc_lrtut">
<title>Table of Contents</title>
<para>A list of all the sections this tutorial contains.</para>
<para><itemizedlist>
<listitem><para><ref refid="lrtutorial_1intro_lrtut" kindref="member">Introduction</ref></para>
</listitem><listitem><para><ref refid="lrtutorial_1toc_lrtut" kindref="member">Table of Contents</ref></para>
</listitem><listitem><para><ref refid="lrtutorial_1cli_lrtut" kindref="member">Command-Line &apos;mlpack_linear_regression&apos;</ref><itemizedlist>
<listitem><para><ref refid="lrtutorial_1cli_ex1_lrtut" kindref="member">One file, generating the function coefficients</ref></para>
</listitem><listitem><para><ref refid="lrtutorial_1cli_ex2_lrtut" kindref="member">Train a multivariate linear regression model</ref></para>
</listitem><listitem><para><ref refid="lrtutorial_1cli_ex3_lrtut" kindref="member">Compute model and predict at the same time</ref></para>
</listitem><listitem><para><ref refid="lrtutorial_1cli_ex4_lrtut" kindref="member">Prediction using a precomputed model</ref></para>
</listitem><listitem><para><ref refid="lrtutorial_1cli_ex5_lrtut" kindref="member">Using ridge regression</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="lrtutorial_1linreg_lrtut" kindref="member">The &apos;LinearRegression&apos; class</ref><itemizedlist>
<listitem><para><ref refid="lrtutorial_1linreg_ex1_lrtut" kindref="member">Generating a model</ref></para>
</listitem><listitem><para><ref refid="lrtutorial_1linreg_ex2_lrtut" kindref="member">Setting a model</ref></para>
</listitem><listitem><para><ref refid="lrtutorial_1linreg_ex3_lrtut" kindref="member">Load a model from a file</ref></para>
</listitem><listitem><para><ref refid="lrtutorial_1linreg_ex4_lrtut" kindref="member">Prediction</ref></para>
</listitem><listitem><para><ref refid="lrtutorial_1linreg_ex5_lrtut" kindref="member">Setting lambda for ridge regression</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="lrtutorial_1further_doc_lrtut" kindref="member">Further documentation</ref></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="lrtutorial_1cli_lrtut">
<title>Command-Line &apos;mlpack_linear_regression&apos;</title>
<para>The simplest way to perform linear regression or ridge regression in <bold>mlpack</bold> is to use the <computeroutput>mlpack_linear_regression</computeroutput> executable. This program will perform linear regression and place the resultant coefficients into one file.</para>
<para>The output file holds a vector of coefficients in increasing order of dimension; that is, the offset term ( <formula id="222">$\beta_0$</formula>), the coefficient for dimension 1 ( <formula id="223">$\beta_1$</formula>, then dimension 2 ( <formula id="224">$\beta_2$</formula>) and so forth, as well as the intercept. This executable can also predict the <formula id="225">$y$</formula> values of a second dataset based on the computed coefficients.</para>
<para>Below are several examples of simple usage (and the resultant output). The <computeroutput>option</computeroutput> is used so that verbose output is given. Further documentation on each individual option can be found by typing</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_linear_regression<sp/>--help</highlight></codeline>
</programlisting></para>
<sect2 id="lrtutorial_1cli_ex1_lrtut">
<title>One file, generating the function coefficients</title>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_linear_regression<sp/>--training_file<sp/>dataset.csv<sp/>-v<sp/>-M<sp/>lr.xml</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;dataset.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>2<sp/>x<sp/>5.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>lambda:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>lr.xml</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_predictions:<sp/>predictions.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>test_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>training_file:<sp/>dataset.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>training_responses:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>load_regressors:<sp/>0.000263s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.000220s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>regression:<sp/>0.000392s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.001920s</highlight></codeline>
</programlisting></para>
<para>Convenient program timers are given for different parts of the calculation at the bottom of the output, as well as the parameters the simulation was run with. Now, if we look at the output model file, which is <computeroutput>lr.xml</computeroutput>,</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>cat<sp/>dataset.csv</highlight></codeline>
<codeline><highlight class="normal">0,0</highlight></codeline>
<codeline><highlight class="normal">1,1</highlight></codeline>
<codeline><highlight class="normal">2,2</highlight></codeline>
<codeline><highlight class="normal">3,3</highlight></codeline>
<codeline><highlight class="normal">4,4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>cat<sp/>lr.xml</highlight></codeline>
<codeline><highlight class="normal">&lt;?xml<sp/>version=&quot;1.0&quot;<sp/>encoding=&quot;utf-8&quot;?&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;cereal&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;model&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;cereal_class_version&gt;0&lt;/cereal_class_version&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;parameters&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;n_rows&gt;2&lt;/n_rows&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;n_cols&gt;1&lt;/n_cols&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;vec_state&gt;1&lt;/vec_state&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;0&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;1&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/parameters&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;lambda&gt;0&lt;/lambda&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;intercept&gt;true&lt;/intercept&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/model&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/cereal&gt;</highlight></codeline>
</programlisting></para>
<para>As you can see, the function for this input is <formula id="226">$f(y)=0+1x_1$</formula>. We can see that the model we have trained catches this; in the <computeroutput>&lt;parameters&gt;</computeroutput> section of <computeroutput>lr.xml</computeroutput>, we can see that there are two elements, which are (approximately) 0 and 1. The first element corresponds to the intercept 0, and the second column corresponds to the coefficient 1 for the variable <formula id="227">$x_1$</formula>. Note that in this example, the regressors for the dataset are the second column. That is, the dataset is one dimensional, and the last column has the <formula id="225">$y$</formula> values, or responses, for each row. You can specify these responses in a separate file if you want, using the <computeroutput><ndash/>input_responses</computeroutput>, or <computeroutput>-r</computeroutput>, option.</para>
</sect2>
<sect2 id="lrtutorial_1cli_ex2_lrtut">
<title>Train a multivariate linear regression model</title>
<para>Multivariate linear regression means that the response variable is predicted by more than just one input variable. In this example we will try to fit a multivariate linear regression model to data that contains four variables, stored in <computeroutput>dataset_2.csv</computeroutput>.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>cat<sp/>dataset_2.csv</highlight></codeline>
<codeline><highlight class="normal">0,0,0,0,14</highlight></codeline>
<codeline><highlight class="normal">1,1,1,1,24</highlight></codeline>
<codeline><highlight class="normal">2,1,0,2,27</highlight></codeline>
<codeline><highlight class="normal">1,2,2,2,32</highlight></codeline>
<codeline><highlight class="normal">-1,-3,0,2,17</highlight></codeline>
</programlisting></para>
<para>Now let&apos;s run <computeroutput>mlpack_linear_regression</computeroutput> as usual:</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_linear_regression<sp/>--training_file<sp/>dataset_2.csv<sp/>-v<sp/>-M<sp/>lr.xml</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;dataset_2.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>5<sp/>x<sp/>5.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/></highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/></highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/></highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>lambda:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>lr.xml</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_predictions_file:<sp/></highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>test_file:<sp/></highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>training_file:<sp/>dataset_2.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>training_responses_file:<sp/></highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>1</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>load_regressors:<sp/>0.000060s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.000050s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>regression:<sp/>0.000049s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.000118s</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>cat<sp/>lr.xml<sp/></highlight></codeline>
<codeline><highlight class="normal">&lt;?xml<sp/>version=&quot;1.0&quot;<sp/>encoding=&quot;utf-8&quot;?&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;cereal&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;model&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;cereal_class_version&gt;0&lt;/cereal_class_version&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;parameters&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;n_rows&gt;5&lt;/n_rows&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;n_cols&gt;1&lt;/n_cols&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;vec_state&gt;1&lt;/vec_state&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;14.00000000000002&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;1.9999999999999447&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;1.0000000000000431&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;2.9999999999999516&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;4.0000000000000249&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/parameters&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;lambda&gt;0&lt;/lambda&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;intercept&gt;true&lt;/intercept&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/model&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/cereal&gt;</highlight></codeline>
</programlisting></para>
<para>If we take a look at the <computeroutput>lr.xml</computeroutput> output we can see the <computeroutput>&lt;parameters&gt;</computeroutput> part has five elements which the first corresponds to <formula id="222">$\beta_0$</formula> , the second corresponds to <formula id="223">$\beta_1$</formula> , and so on. This is equivalent to <formula id="228">$f(y) = \beta_0 + \beta_1x_1 + \beta_2x_2 + \beta_3x_3 + \beta_4x_4$</formula> or <formula id="229">$f(y)=14+2x_1+1x_2+3x_3+4x_4$</formula>.</para>
</sect2>
<sect2 id="lrtutorial_1cli_ex3_lrtut">
<title>Compute model and predict at the same time</title>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_linear_regression<sp/>--training_file<sp/>dataset.csv<sp/>--test_file<sp/>predict.csv<sp/>--output_predictions_file<sp/>predictions.csv<sp/>\</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>-v</highlight></codeline>
<codeline><highlight class="normal">[WARN<sp/>]<sp/>&apos;--output_predictions_file<sp/>(-o)&apos;<sp/>ignored<sp/>because<sp/>&apos;--test_file<sp/>(-T)&apos;<sp/>is<sp/>specified!</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;dataset.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>2<sp/>x<sp/>5.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;predict.csv&apos;<sp/>as<sp/>raw<sp/>ASCII<sp/>formatted<sp/>data.<sp/><sp/>Size<sp/>is<sp/>1<sp/>x<sp/>3.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;predictions.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/></highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/></highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/></highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>lambda:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/></highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_predictions_file:<sp/>&apos;predictions.csv&apos;<sp/>(1x3<sp/>matrix)</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>test_file:<sp/>&apos;predict.csv&apos;<sp/>(0x0<sp/>matrix)</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>training_file:<sp/>&apos;dataset.csv&apos;<sp/>(0x0<sp/>matrix)</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>training_responses_file:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>1</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>load_regressors:<sp/>0.000069s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>load_test_points:<sp/>0.000031s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.000079s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>prediction:<sp/>0.000001s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>regression:<sp/>0.000054s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>saving_data:<sp/>0.000055s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.000203s</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>cat<sp/>dataset.csv</highlight></codeline>
<codeline><highlight class="normal">0,0</highlight></codeline>
<codeline><highlight class="normal">1,1</highlight></codeline>
<codeline><highlight class="normal">2,2</highlight></codeline>
<codeline><highlight class="normal">3,3</highlight></codeline>
<codeline><highlight class="normal">4,4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>cat<sp/>predict.csv</highlight></codeline>
<codeline><highlight class="normal">2</highlight></codeline>
<codeline><highlight class="normal">3</highlight></codeline>
<codeline><highlight class="normal">4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>cat<sp/>predictions.csv</highlight></codeline>
<codeline><highlight class="normal">2.0000000000e+00</highlight></codeline>
<codeline><highlight class="normal">3.0000000000e+00</highlight></codeline>
<codeline><highlight class="normal">4.0000000000e+00</highlight></codeline>
</programlisting></para>
<para>We used the same dataset, so we got the same parameters. The key thing to note about the <computeroutput>predict.csv</computeroutput> dataset is that it has the same dimensionality as the dataset used to create the model, one. If the model generating dataset has <formula id="212">$d$</formula> dimensions, so must the dataset we want to predict for.</para>
</sect2>
<sect2 id="lrtutorial_1cli_ex4_lrtut">
<title>Prediction using a precomputed model</title>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_linear_regression<sp/>--input_model_file<sp/>lr.xml<sp/>--test_file<sp/>predict.csv<sp/>--output_predictions_file<sp/>predictions.csv<sp/>-v</highlight></codeline>
<codeline><highlight class="normal">[WARN<sp/>]<sp/>&apos;--output_predictions_file<sp/>(-o)&apos;<sp/>ignored<sp/>because<sp/>&apos;--test_file<sp/>(-T)&apos;<sp/>is<sp/>specified!</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;predict.csv&apos;<sp/>as<sp/>raw<sp/>ASCII<sp/>formatted<sp/>data.<sp/><sp/>Size<sp/>is<sp/>1<sp/>x<sp/>3.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Saving<sp/>CSV<sp/>data<sp/>to<sp/>&apos;predictions.csv&apos;.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/></highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/></highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>lr.xml</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>lambda:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/></highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_predictions_file:<sp/>&apos;predictions.csv&apos;<sp/>(1x3<sp/>matrix)</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>test_file:<sp/>&apos;predict.csv&apos;<sp/>(0x0<sp/>matrix)</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>training_file:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>training_responses_file:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>1</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>load_model:<sp/>0.000051s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>load_test_points:<sp/>0.000052s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.000044s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>prediction:<sp/>0.000010s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>saving_data:<sp/>0.000079s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.000160s</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>cat<sp/>lr.xml</highlight></codeline>
<codeline><highlight class="normal">&lt;?xml<sp/>version=&quot;1.0&quot;<sp/>encoding=&quot;utf-8&quot;?&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;cereal&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;model&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;cereal_class_version&gt;0&lt;/cereal_class_version&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;parameters&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;n_rows&gt;2&lt;/n_rows&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;n_cols&gt;1&lt;/n_cols&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;vec_state&gt;1&lt;/vec_state&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;0&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;elem&gt;1&lt;/elem&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/parameters&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;lambda&gt;0&lt;/lambda&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;intercept&gt;true&lt;/intercept&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/model&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/cereal&gt;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>cat<sp/>predict.csv</highlight></codeline>
<codeline><highlight class="normal">2</highlight></codeline>
<codeline><highlight class="normal">3</highlight></codeline>
<codeline><highlight class="normal">4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$<sp/>cat<sp/>predictions.csv</highlight></codeline>
<codeline><highlight class="normal">2.0000000000e+00</highlight></codeline>
<codeline><highlight class="normal">3.0000000000e+00</highlight></codeline>
<codeline><highlight class="normal">4.0000000000e+00</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="lrtutorial_1cli_ex5_lrtut">
<title>Using ridge regression</title>
<para>Sometimes, the input matrix of predictors has a covariance matrix that is not invertible, or the system is overdetermined. In this case, ridge regression is useful: it adds a normalization term to the covariance matrix to make it invertible. Ridge regression is a standard technique and documentation for the mathematics behind it can be found anywhere on the Internet. In short, the covariance matrix</para>
<para><formula id="230">\[ \mathbf{X}&apos; \mathbf{X} \]</formula></para>
<para>is replaced with</para>
<para><formula id="231">\[ \mathbf{X}&apos; \mathbf{X} + \lambda \mathbf{I} \]</formula></para>
<para>where <formula id="232">$\mathbf{I}$</formula> is the identity matrix. So, a <formula id="118">$\lambda$</formula> parameter greater than zero should be specified to perform ridge regression, using the <computeroutput><ndash/>lambda</computeroutput> (or <computeroutput>-l</computeroutput>) option. An example is given below.</para>
<para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_linear_regression<sp/>--training_file<sp/>dataset.csv<sp/>-v<sp/>--lambda<sp/>0.5<sp/>-M<sp/>lr.xml</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Loading<sp/>&apos;dataset.csv&apos;<sp/>as<sp/>CSV<sp/>data.<sp/><sp/>Size<sp/>is<sp/>2<sp/>x<sp/>5.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Execution<sp/>parameters:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>help:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>info:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>input_model_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>lambda:<sp/>0.5</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_model_file:<sp/>lr.xml</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>output_predictions:<sp/>predictions.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>test_file:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>training_file:<sp/>dataset.csv</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>training_responses:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>verbose:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>version:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Program<sp/>timers:</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>load_regressors:<sp/>0.000210s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>loading_data:<sp/>0.000170s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>regression:<sp/>0.000332s</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/><sp/><sp/>total_time:<sp/>0.001835s</highlight></codeline>
</programlisting></para>
<para>Further documentation on options should be found by using the <computeroutput><ndash/>help</computeroutput> option.</para>
</sect2>
</sect1>
<sect1 id="lrtutorial_1linreg_lrtut">
<title>The &apos;LinearRegression&apos; class</title>
<para>The &apos;LinearRegression&apos; class is a simple implementation of linear regression.</para>
<para>Using the LinearRegression class is very simple. It has two available constructors; one for generating a model from a matrix of predictors and a vector of responses, and one for loading an already computed model from a given file.</para>
<para>The class provides one method that performs computation: <programlisting><codeline><highlight class="normal">void<sp/>Predict(const<sp/>arma::mat&amp;<sp/>points,<sp/>arma::vec&amp;<sp/>predictions);</highlight></codeline>
</programlisting></para>
<para>Once you have generated or loaded a model, you can call this method and pass it a matrix of data points to predict values for using the model. The second parameter, predictions, will be modified to contain the predicted values corresponding to each row of the points matrix.</para>
<sect2 id="lrtutorial_1linreg_ex1_lrtut">
<title>Generating a model</title>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/linear_regression/linear_regression.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::regression;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">arma::mat<sp/>data;<sp/>//<sp/>The<sp/>dataset<sp/>itself.</highlight></codeline>
<codeline><highlight class="normal">arma::vec<sp/>responses;<sp/>//<sp/>The<sp/>responses,<sp/>one<sp/>row<sp/>for<sp/>each<sp/>row<sp/>in<sp/>data.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Regress.</highlight></codeline>
<codeline><highlight class="normal">LinearRegression<sp/>lr(data,<sp/>responses);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>parameters,<sp/>or<sp/>coefficients.</highlight></codeline>
<codeline><highlight class="normal">arma::vec<sp/>parameters<sp/>=<sp/>lr.Parameters();</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="lrtutorial_1linreg_ex2_lrtut">
<title>Setting a model</title>
<para>Assuming you already have a model and do not need to create one, this is how you would set the parameters for a LinearRegression instance.</para>
<para><programlisting><codeline><highlight class="normal">arma::vec<sp/>parameters;<sp/>//<sp/>Your<sp/>model.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">LinearRegression<sp/>lr;<sp/>//<sp/>Create<sp/>a<sp/>new<sp/>LinearRegression<sp/>instance<sp/>or<sp/>reuse<sp/>one.</highlight></codeline>
<codeline><highlight class="normal">lr.Parameters()<sp/>=<sp/>parameters;<sp/>//<sp/>Set<sp/>the<sp/>model.</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="lrtutorial_1linreg_ex3_lrtut">
<title>Load a model from a file</title>
<para>If you have a generated model in a file somewhere you would like to load and use, you can use <computeroutput><ref refid="namespacemlpack_1_1data_1abbff2a667bf247e00b1fc09b7ca5f831" kindref="member">data::Load()</ref></computeroutput> to load it.</para>
<para><programlisting><codeline><highlight class="normal">std::string<sp/>filename;<sp/>//<sp/>The<sp/>path<sp/>and<sp/>name<sp/>of<sp/>your<sp/>file.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">LinearRegression<sp/>lr;</highlight></codeline>
<codeline><highlight class="normal">data::Load(filename,<sp/>&quot;lr_model&quot;,<sp/>lr);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="lrtutorial_1linreg_ex4_lrtut">
<title>Prediction</title>
<para>Once you have generated or loaded a model using one of the aforementioned methods, you can predict values for a dataset.</para>
<para><programlisting><codeline><highlight class="normal">LinearRegression<sp/>lr();</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Load<sp/>or<sp/>generate<sp/>your<sp/>model.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>dataset<sp/>we<sp/>want<sp/>to<sp/>predict<sp/>on;<sp/>each<sp/>row<sp/>is<sp/>a<sp/>data<sp/>point.</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>points;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>will<sp/>store<sp/>the<sp/>predictions;<sp/>one<sp/>row<sp/>for<sp/>each<sp/>point.</highlight></codeline>
<codeline><highlight class="normal">arma::vec<sp/>predictions;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">lr.Predict(points,<sp/>predictions);<sp/>//<sp/>Predict.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Now,<sp/>the<sp/>vector<sp/>&apos;predictions&apos;<sp/>will<sp/>contain<sp/>the<sp/>predicted<sp/>values.</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="lrtutorial_1linreg_ex5_lrtut">
<title>Setting lambda for ridge regression</title>
<para>As discussed in <ref refid="lrtutorial_1cli_ex4_lrtut" kindref="member">Prediction using a precomputed model</ref>, ridge regression is useful when the covariance of the predictors is not invertible. The standard constructor can be used to set a value of lambda:</para>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/methods/linear_regression/linear_regression.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::regression;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">arma::mat<sp/>data;<sp/>//<sp/>The<sp/>dataset<sp/>itself.</highlight></codeline>
<codeline><highlight class="normal">arma::vec<sp/>responses;<sp/>//<sp/>The<sp/>responses,<sp/>one<sp/>row<sp/>for<sp/>each<sp/>row<sp/>in<sp/>data.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Regress,<sp/>with<sp/>a<sp/>lambda<sp/>of<sp/>0.5.</highlight></codeline>
<codeline><highlight class="normal">LinearRegression<sp/>lr(data,<sp/>responses,<sp/>0.5);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>parameters,<sp/>or<sp/>coefficients.</highlight></codeline>
<codeline><highlight class="normal">arma::vec<sp/>parameters<sp/>=<sp/>lr.Parameters();</highlight></codeline>
</programlisting></para>
<para>In addition, the <computeroutput>Lambda()</computeroutput> function can be used to get or modify the lambda value:</para>
<para><programlisting><codeline><highlight class="normal">LinearRegression<sp/>lr;</highlight></codeline>
<codeline><highlight class="normal">lr.Lambda()<sp/>=<sp/>0.5;</highlight></codeline>
<codeline><highlight class="normal">Log::Info<sp/>&lt;&lt;<sp/>&quot;Lambda<sp/>is<sp/>&quot;<sp/>&lt;&lt;<sp/>lr.Lambda()<sp/>&lt;&lt;<sp/>&quot;.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="lrtutorial_1further_doc_lrtut">
<title>Further documentation</title>
<para>For further documentation on the LinearRegression class, consult the <ref refid="classmlpack_1_1regression_1_1LinearRegression" kindref="compound">complete API documentation</ref>. </para>
</sect1>
    </detaileddescription>
    <location file="/home/aakash/mlpack/doc/tutorials/linear_regression/linear_regression.txt"/>
  </compounddef>
</doxygen>
