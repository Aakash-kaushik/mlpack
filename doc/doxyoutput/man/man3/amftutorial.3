.TH "amftutorial" 3 "Sun Jun 20 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
amftutorial \- Alternating Matrix Factorization tutorial 

.SH "Introduction"
.PP
Alternating Matrix Factorization
.PP
Alternating matrix factorization decomposes matrx V in the form $ V \approx WH $ where W is called the basis matrix and H is called the encoding matrix\&. V is taken to be of size n x m and the obtained W is n x r and H is r x m\&. The size r is called the rank of the factorization\&. Factorization is done by alternately calculating W and H respectively while holding the other matrix constant\&.
.PP
\fBmlpack\fP provides:
.PP
.IP "\(bu" 2
a \fBsimple C++ interface\fP to perform Alternating Matrix Factorization
.PP
.SH "Table of Contents"
.PP
A list of all the sections this tutorial contains\&.
.PP
.IP "\(bu" 2
\fBIntroduction\fP
.IP "\(bu" 2
\fBTable of Contents\fP
.IP "\(bu" 2
\fBThe 'AMF' class\fP
.IP "  \(bu" 4
\fBUsing different termination policies\fP
.IP "  \(bu" 4
\fBUsing different initialization policies\fP
.IP "  \(bu" 4
\fBUsing different update rules\fP
.IP "  \(bu" 4
\fBUsing Non-Negative Matrix Factorization with AMF\fP
.IP "  \(bu" 4
\fBUsing Singular Value Decomposition with AMF\fP
.PP

.IP "\(bu" 2
\fBFurther documentation\fP
.PP
.SH "The 'AMF' class"
.PP
The AMF class is templatized with 3 parameters; the first contains the policy used to determine when the algorithm has converged; the second contains the initialization rule for the W and H matrix; the last contains the update rule to be used during each iteration\&. This templatization allows the user to try various update rules, initialization rules, and termination policies (including ones not supplied with mlpack) for factorization\&.
.PP
The class provides the following method that performs factorization 
.PP
.nf
template<typename MatType> double Apply(const MatType& V,
                                        const size_t r,
                                        arma::mat& W,
                                        arma::mat& H);

.fi
.PP
.SS "Using different termination policies"
The AMF implementation comes with different termination policies to support many implemented algorithms\&. Every termination policy implements the following method which returns the status of convergence\&. 
.PP
.nf
bool IsConverged(arma::mat& W, arma::mat& H)

.fi
.PP
.PP
Below is a list of all the termination policies that mlpack contains\&.
.PP
.IP "\(bu" 2
\fBmlpack::amf::SimpleResidueTermination\fP
.IP "\(bu" 2
\fBmlpack::amf::SimpleToleranceTermination\fP
.IP "\(bu" 2
\fBmlpack::amf::ValidationRMSETermination\fP
.PP
.PP
In \fCSimpleResidueTermination\fP, termination decision depends on two factors, value of residue and number of iteration\&. If the current value of residue drops below the threshold or the number of iterations goes beyond the threshold, positive termination signal is passed to AMF\&.
.PP
In \fCSimpleToleranceTermination\fP, termination criterion is met when the increase in residue value drops below the given tolerance\&. To accommodate spikes, certain number of successive residue drops are accepted\&. Secondary termination criterion terminates algorithm when iteration count goes beyond the threshold\&.
.PP
\fCValidationRMSETermination\fP divides the data into 2 sets, training set and validation set\&. Entries of validation set are nullifed in the input matrix\&. Termination criterion is met when increase in validation set RMSe value drops below the given tolerance\&. To accommodate spikes certain number of successive validation RMSE drops are accepted\&. This upper imit on successive drops can be adjusted with \fCreverseStepCount\fP\&. A secondary termination criterion terminates the algorithm when the iteration count goes above the threshold\&. Though this termination policy is better measure of convergence than the above 2 termination policies, it may cause a decrease in performance since it is computationally expensive\&.
.PP
On the other hand, \fBCompleteIncrementalTermination\fP and \fBIncompleteIncrementalTermination\fP are just wrapper classes for other termination policies\&. These policies are used when AMF is applied with \fBSVDCompleteIncrementalLearning\fP and \fBSVDIncompleteIncrementalLearning\fP, respectively\&.
.SS "Using different initialization policies"
mlpack currently has 2 initialization policies implemented for AMF:
.PP
.IP "\(bu" 2
\fBRandomInitialization\fP
.IP "\(bu" 2
\fBRandomAcolInitialization\fP
.PP
.PP
\fCRandomInitialization\fP initializes matrices W and H with random uniform distribution while \fCRandomAcolInitialization\fP initializes the W matrix by averaging p randomly chosen columns of V\&. In the case of \fCRandomAcolInitialization\fP, p is a template parameter\&.
.PP
To implement their own initialization policy, users need to define the following function in their class\&.
.PP
.PP
.nf
template<typename MatType>
inline static void Initialize(const MatType& V,
                              const size_t r,
                              arma::mat& W,
                              arma::mat& H)
.fi
.PP
.SS "Using different update rules"
mlpack implements the following update rules for the AMF class:
.PP
.IP "\(bu" 2
\fBAMFALSUpdate\fP
.IP "\(bu" 2
\fBNMFMultiplicativeDistanceUpdate\fP
.IP "\(bu" 2
\fBNMFMultiplicativeDivergenceUpdate\fP
.IP "\(bu" 2
\fBSVDBatchLearning\fP
.IP "\(bu" 2
\fBSVDIncompleteIncrementalLearning\fP
.IP "\(bu" 2
\fBSVDCompleteIncrementalLearning\fP
.PP
.PP
Non-Negative Matrix factorization can be achieved with \fCNMFALSUpdate\fP, \fCNMFMultiplicativeDivergenceUpdate\fP or \fCNMFMultiplicativeDivergenceUpdate\fP\&. \fCNMFALSUpdate\fP implements a simple Alternating Least Squares optimization while the other rules implement algorithms given in the paper 'Algorithms for Non-negative Matrix Factorization'\&.
.PP
The remaining update rules perform the singular value decomposition of the matrix V\&. This SVD factorization is optimized for use by mlpack's collaborative filtering code (\fBCollaborative filtering tutorial\fP)\&. This use of SVD factorizers for collaborative filtering is described in the paper 'A Guide to Singular Value Decomposition for Collaborative Filtering' by Chih-Chao Ma\&. For further details about the algorithms refer to the respective class documentation\&.
.SS "Using Non-Negative Matrix Factorization with AMF"
The use of AMF for Non-Negative Matrix factorization is simple\&. The AMF module defines \fBNMFALSFactorizer\fP which can be used directly without knowing the internal structure of AMF\&. For example:
.PP
.PP
.nf
#include <mlpack/core\&.hpp>
#include <mlpack/methods/amf/amf\&.hpp>

using namespace std;
using namespace arma;
using namespace mlpack::amf;

int main()
{
  NMFALSFactorizer nmf;
  mat W, H;
  mat V = randu<mat>(100, 100);
  double residue = nmf\&.Apply(V, W, H);
}
.fi
.PP
.PP
\fCNMFALSFactorizer\fP uses \fCSimpleResidueTermination\fP, which is most preferred with Non-Negative Matrix factorizers\&. The initialization of W and H in \fCNMFALSFactorizer\fP is random\&. The \fCApply()\fP function returns the residue obtained by comparing the constructed matrix W * H with the original matrix V\&.
.SS "Using Singular Value Decomposition with AMF"
mlpack has the following SVD factorizers implemented for AMF:
.PP
.IP "\(bu" 2
\fBSVDBatchFactorizer\fP
.IP "\(bu" 2
\fBSVDIncompleteIncrementalFactorizer\fP
.IP "\(bu" 2
\fBSVDCompleteIncrementalFactorizer\fP
.PP
.PP
Each of these factorizers takes a template parameter \fCMatType\fP, which specifies the type of the matrix V (dense or sparse---these have types \fCarma::mat\fP and \fCarma::sp_mat\fP, respectively)\&. When the matrix to be factorized is relatively sparse, specifying \fCMatType\fP \fC=\fP \fCarma::sp_mat\fP can provide a runtime boost\&.
.PP
.PP
.nf
#include <mlpack/core\&.hpp>
#include <mlpack/methods/amf/amf\&.hpp>

using namespace std;
using namespace arma;
using namespace mlpack::amf;

int main()
{
  sp_mat V = randu<sp_mat>(100,100);
  mat W, H;

  SVDBatchFactorizer<sp_mat> svd;
  double residue = svd\&.Apply(V, W, H);
}
.fi
.PP
.SH "Further documentation"
.PP
For further documentation on the AMF class, consult the \fBcomplete API documentation\fP\&. 
