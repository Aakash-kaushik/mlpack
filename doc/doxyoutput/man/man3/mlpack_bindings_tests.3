.TH "mlpack::bindings::tests" 3 "Sun Jun 20 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::bindings::tests
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBTestOption\fP"
.br
.RI "A static object whose constructor registers a parameter with the \fBIO\fP class\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBCleanMemory\fP ()"
.br
.RI "Delete any unique pointers that are held by the \fBIO\fP object\&. "
.ti -1c
.RI "template<typename T > void \fBDeleteAllocatedMemory\fP (\fButil::ParamData\fP &d, const void *, void *)"
.br
.ti -1c
.RI "template<typename T > void \fBDeleteAllocatedMemoryImpl\fP (\fButil::ParamData\fP &, const typename boost::disable_if< \fBdata::HasSerialize\fP< T >>::type *=0, const typename boost::disable_if< arma::is_arma_type< T >>::type *=0)"
.br
.ti -1c
.RI "template<typename T > void \fBDeleteAllocatedMemoryImpl\fP (\fButil::ParamData\fP &, const typename boost::enable_if< arma::is_arma_type< T >>::type *=0)"
.br
.ti -1c
.RI "template<typename T > void \fBDeleteAllocatedMemoryImpl\fP (\fButil::ParamData\fP &d, const typename boost::disable_if< arma::is_arma_type< T >>::type *=0, const typename boost::enable_if< \fBdata::HasSerialize\fP< T >>::type *=0)"
.br
.ti -1c
.RI "template<typename T > void * \fBGetAllocatedMemory\fP (\fButil::ParamData\fP &, const typename boost::disable_if< \fBdata::HasSerialize\fP< T >>::type *=0, const typename boost::disable_if< arma::is_arma_type< T >>::type *=0)"
.br
.ti -1c
.RI "template<typename T > void * \fBGetAllocatedMemory\fP (\fButil::ParamData\fP &, const typename boost::enable_if< arma::is_arma_type< T >>::type *=0)"
.br
.ti -1c
.RI "template<typename T > void * \fBGetAllocatedMemory\fP (\fButil::ParamData\fP &d, const typename boost::disable_if< arma::is_arma_type< T >>::type *=0, const typename boost::enable_if< \fBdata::HasSerialize\fP< T >>::type *=0)"
.br
.ti -1c
.RI "template<typename T > void \fBGetAllocatedMemory\fP (\fButil::ParamData\fP &d, const void *, void *output)"
.br
.ti -1c
.RI "template<typename T > T & \fBGetParam\fP (\fButil::ParamData\fP &d)"
.br
.RI "This overload is called when nothing special needs to happen to the name of the parameter\&. "
.ti -1c
.RI "template<typename T > void \fBGetParam\fP (\fButil::ParamData\fP &d, const void *, void *output)"
.br
.RI "Return a parameter casted to the given type\&. "
.ti -1c
.RI "template<typename T > std::string \fBGetPrintableParam\fP (\fButil::ParamData\fP &data, const typename boost::disable_if< arma::is_arma_type< T >>::type *=0, const typename boost::disable_if< \fButil::IsStdVector\fP< T >>::type *=0, const typename boost::disable_if< \fBdata::HasSerialize\fP< T >>::type *=0, const typename boost::disable_if< std::is_same< T, std::tuple< \fBdata::DatasetInfo\fP, arma::mat >>>::type *=0)"
.br
.RI "Print an option\&. "
.ti -1c
.RI "template<typename T > std::string \fBGetPrintableParam\fP (\fButil::ParamData\fP &data, const typename boost::disable_if< arma::is_arma_type< T >>::type *=0, const typename boost::enable_if< \fBdata::HasSerialize\fP< T >>::type *=0)"
.br
.RI "Print a serializable class option (this just prints the filename)\&. "
.ti -1c
.RI "template<typename T > std::string \fBGetPrintableParam\fP (\fButil::ParamData\fP &data, const typename boost::enable_if< arma::is_arma_type< T >>::type *=0)"
.br
.RI "Print a matrix option (this just prints the filename)\&. "
.ti -1c
.RI "template<typename T > std::string \fBGetPrintableParam\fP (\fButil::ParamData\fP &data, const typename boost::enable_if< std::is_same< T, std::tuple< \fBdata::DatasetInfo\fP, arma::mat >>>::type *=0)"
.br
.RI "Print a mapped matrix option (this just prints the filename)\&. "
.ti -1c
.RI "template<typename T > std::string \fBGetPrintableParam\fP (\fButil::ParamData\fP &data, const typename boost::enable_if< \fButil::IsStdVector\fP< T >>::type *=0)"
.br
.RI "Print a vector option, with spaces between it\&. "
.ti -1c
.RI "template<typename T > void \fBGetPrintableParam\fP (\fButil::ParamData\fP &data, const void *, void *output)"
.br
.RI "Print an option into a std::string\&. "
.ti -1c
.RI "template<typename T > bool \fBIgnoreCheck\fP (const T &)"
.br
.RI "Return whether or not a parameter check should be ignored\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "std::string \fBprogramName\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void mlpack::bindings::tests::CleanMemory ()"

.PP
Delete any unique pointers that are held by the \fBIO\fP object\&. 
.SS "void mlpack::bindings::tests::DeleteAllocatedMemory (\fButil::ParamData\fP & d, const void *, void *)"

.PP
Definition at line 49 of file delete_allocated_memory\&.hpp\&.
.SS "void mlpack::bindings::tests::DeleteAllocatedMemoryImpl (\fButil::ParamData\fP &, const typename boost::disable_if< \fBdata::HasSerialize\fP< T >>::type * = \fC0\fP, const typename boost::disable_if< arma::is_arma_type< T >>::type * = \fC0\fP)"

.PP
Definition at line 22 of file delete_allocated_memory\&.hpp\&.
.SS "void mlpack::bindings::tests::DeleteAllocatedMemoryImpl (\fButil::ParamData\fP &, const typename boost::enable_if< arma::is_arma_type< T >>::type * = \fC0\fP)"

.PP
Definition at line 31 of file delete_allocated_memory\&.hpp\&.
.SS "void mlpack::bindings::tests::DeleteAllocatedMemoryImpl (\fButil::ParamData\fP & d, const typename boost::disable_if< arma::is_arma_type< T >>::type * = \fC0\fP, const typename boost::enable_if< \fBdata::HasSerialize\fP< T >>::type * = \fC0\fP)"

.PP
Definition at line 39 of file delete_allocated_memory\&.hpp\&.
.PP
References ParamData::value\&.
.SS "void* mlpack::bindings::tests::GetAllocatedMemory (\fButil::ParamData\fP &, const typename boost::disable_if< \fBdata::HasSerialize\fP< T >>::type * = \fC0\fP, const typename boost::disable_if< arma::is_arma_type< T >>::type * = \fC0\fP)"

.PP
Definition at line 23 of file get_allocated_memory\&.hpp\&.
.SS "void* mlpack::bindings::tests::GetAllocatedMemory (\fButil::ParamData\fP &, const typename boost::enable_if< arma::is_arma_type< T >>::type * = \fC0\fP)"

.PP
Definition at line 32 of file get_allocated_memory\&.hpp\&.
.SS "void* mlpack::bindings::tests::GetAllocatedMemory (\fButil::ParamData\fP & d, const typename boost::disable_if< arma::is_arma_type< T >>::type * = \fC0\fP, const typename boost::enable_if< \fBdata::HasSerialize\fP< T >>::type * = \fC0\fP)"

.PP
Definition at line 40 of file get_allocated_memory\&.hpp\&.
.PP
References ParamData::value\&.
.SS "void mlpack::bindings::tests::GetAllocatedMemory (\fButil::ParamData\fP & d, const void *, void * output)"

.PP
Definition at line 50 of file get_allocated_memory\&.hpp\&.
.SS "T& mlpack::bindings::tests::GetParam (\fButil::ParamData\fP & d)"

.PP
This overload is called when nothing special needs to happen to the name of the parameter\&. 
.PP
Definition at line 26 of file get_param\&.hpp\&.
.PP
References ParamData::value\&.
.SS "void mlpack::bindings::tests::GetParam (\fButil::ParamData\fP & d, const void *, void * output)"

.PP
Return a parameter casted to the given type\&. Type checking does not happen here!
.PP
\fBParameters\fP
.RS 4
\fId\fP Parameter information\&. 
.br
\fI*\fP (input) Unused parameter\&. 
.br
\fIoutput\fP Place to store pointer to value\&. 
.RE
.PP

.PP
Definition at line 41 of file get_param\&.hpp\&.
.SS "std::string mlpack::bindings::tests::GetPrintableParam (\fButil::ParamData\fP & data, const typename boost::disable_if< arma::is_arma_type< T >>::type * = \fC0\fP, const typename boost::disable_if< \fButil::IsStdVector\fP< T >>::type * = \fC0\fP, const typename boost::disable_if< \fBdata::HasSerialize\fP< T >>::type * = \fC0\fP, const typename boost::disable_if< std::is_same< T, std::tuple< \fBdata::DatasetInfo\fP, arma::mat >>>::type * = \fC0\fP)"

.PP
Print an option\&. 
.SS "std::string mlpack::bindings::tests::GetPrintableParam (\fButil::ParamData\fP & data, const typename boost::disable_if< arma::is_arma_type< T >>::type * = \fC0\fP, const typename boost::enable_if< \fBdata::HasSerialize\fP< T >>::type * = \fC0\fP)"

.PP
Print a serializable class option (this just prints the filename)\&. 
.SS "std::string mlpack::bindings::tests::GetPrintableParam (\fButil::ParamData\fP & data, const typename boost::enable_if< arma::is_arma_type< T >>::type * = \fC0\fP)"

.PP
Print a matrix option (this just prints the filename)\&. 
.SS "std::string mlpack::bindings::tests::GetPrintableParam (\fButil::ParamData\fP & data, const typename boost::enable_if< std::is_same< T, std::tuple< \fBdata::DatasetInfo\fP, arma::mat >>>::type * = \fC0\fP)"

.PP
Print a mapped matrix option (this just prints the filename)\&. 
.SS "std::string mlpack::bindings::tests::GetPrintableParam (\fButil::ParamData\fP & data, const typename boost::enable_if< \fButil::IsStdVector\fP< T >>::type * = \fC0\fP)"

.PP
Print a vector option, with spaces between it\&. 
.SS "void mlpack::bindings::tests::GetPrintableParam (\fButil::ParamData\fP & data, const void *, void * output)"

.PP
Print an option into a std::string\&. This should print a short, one-line representation of the object\&. The string will be stored in the output pointer\&. 
.PP
Definition at line 76 of file get_printable_param\&.hpp\&.
.SS "bool mlpack::bindings::tests::IgnoreCheck (const T &)\fC [inline]\fP"

.PP
Return whether or not a parameter check should be ignored\&. For test bindings, we do not ignore any checks, so this always returns false\&. 
.PP
Definition at line 24 of file ignore_check\&.hpp\&.
.SH "Variable Documentation"
.PP 
.SS "std::string programName\fC [extern]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
