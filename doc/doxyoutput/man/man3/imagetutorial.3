.TH "imagetutorial" 3 "Sun Jun 20 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
imagetutorial \- Image Utilities tutorial 

.SH "Introduction"
.PP
Image datasets are becoming increasingly popular in deep learning\&.
.PP
mlpack's image saving/loading functionality is based on \fCstb/\fP\&.
.SH "Table of Contents"
.PP
This tutorial is split into the following sections:
.PP
.IP "\(bu" 2
\fBIntroduction\fP
.IP "\(bu" 2
\fBTable of Contents\fP
.IP "\(bu" 2
\fBModel API\fP
.IP "\(bu" 2
\fBImageInfo\fP
.IP "\(bu" 2
\fBLoad\fP
.IP "\(bu" 2
\fBSave\fP
.PP
.SH "Model API"
.PP
Image utilities supports loading and saving of images\&.
.PP
It supports filetypes 'jpg', 'png', 'tga','bmp', 'psd', 'gif', 'hdr', 'pic', 'pnm' for loading and 'jpg', 'png', 'tga', 'bmp', 'hdr' for saving\&.
.PP
The datatype associated is unsigned char to support RGB values in the range 1-255\&. To feed data into the network typecast of \fCarma::Mat\fP may be required\&. Images are stored in matrix as (width * height * channels, NumberOfImages)\&. Therefore imageMatrix\&.col(0) would be the first image if images are loaded in imageMatrix\&.
.SH "ImageInfo"
.PP
ImageInfo class contains the metadata of the images\&. 
.PP
.nf

ImageInfo(const size_t width,
          const size_t height,
          const size_t channels);

.fi
.PP
 Other public memebers include:
.IP "\(bu" 2
quality Compression of the image if saved as jpg (0-100)\&.
.PP
.SH "Load"
.PP
Standalone loading of images\&. 
.PP
.nf

 template<typename eT>
 bool Load(const std::string& filename,
           arma::Mat<eT>& matrix,
           ImageInfo& info,
           const bool fatal,
           const bool transpose);

.fi
.PP
.PP
Loading a test image\&. It also fills up the ImageInfo class object\&. 
.PP
.nf
data::ImageInfo info;
data::Load("test_image\&.png", matrix, info, false, true);

.fi
.PP
.PP
ImageInfo requires height, width, number of channels of the image\&.
.PP
.PP
.nf
size_t height = 64, width = 64, channels = 1;
data::ImageInfo info(width, height, channels);
.fi
.PP
.PP
More than one image can be loaded into the same matrix\&.
.PP
Loading multiple images:
.PP
.PP
.nf

 template<typename eT>
 bool Load(const std::vector<std::string>& files,
           arma::Mat<eT>& matrix,
           ImageInfo& info,
           const bool fatal,
           const bool transpose);
.fi
.PP
.PP
.PP
.nf
data::ImageInfo info;
std::vector<std::string>> files{"test_image1\&.bmp","test_image2\&.bmp"};
data::load(files, matrix, info, false, true);
.fi
.PP
.SH "Save"
.PP
Save images expects a matrix of type unsigned char in the form (width * height * channels, NumberOfImages)\&. Just like load it can be used to save one image or multiple images\&. Besides image data it also expects the shape of the image as input (width, height, channels)\&.
.PP
Saving one image:
.PP
.PP
.nf

 template<typename eT>
 bool Save(const std::string& filename,
           arma::Mat<eT>& matrix,
           ImageInfo& info,
           const bool fatal,
           const bool transpose);
.fi
.PP
.PP
.PP
.nf
data::ImageInfo info;
info\&.width = info\&.height = 25;
info\&.channels = 3;
info\&.quality = 90;
data::Save("test_image\&.bmp", matrix, info, false, true);
.fi
.PP
.PP
If the matrix contains more than one image, only the first one is saved\&.
.PP
Saving multiple images:
.PP
.PP
.nf

 template<typename eT>
 bool Save(const std::vector<std::string>& files,
           arma::Mat<eT>& matrix,
           ImageInfo& info,
           const bool fatal,
           const bool transpose);
.fi
.PP
.PP
.PP
.nf
data::ImageInfo info;
info\&.width = info\&.height = 25;
info\&.channels = 3;
info\&.quality = 90;
std::vector<std::string>> files{"test_image1\&.bmp", "test_image2\&.bmp"};
data::Save(files, matrix, info, false, true);
.fi
.PP
.PP
Multiple images are saved according to the vector of filenames specified\&. 
