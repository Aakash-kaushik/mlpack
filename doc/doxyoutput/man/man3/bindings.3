.TH "bindings" 3 "Sun Jun 20 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
bindings \- mlpack automatic bindings to other languages 

.SH "Overview"
.PP
mlpack has a system to automatically generate bindings to other languages, such as Python and command-line programs, and it is extensible to other languages with some amount of ease\&. The maintenance burden of this system is low, and it is designed in such a way that the bindings produced are always up to date across languages and up to date with the mlpack library itself\&.
.PP
This document describes the full functioning of the system, and is a good place to start for someone who wishes to understand the system so that they can contribute a new binding language, or someone who wants to understand so they can adapt the system for use in their own project, or someone who is simply curious enough to see how the sausage is made\&.
.PP
The document is split into several sections:
.PP
.IP "\(bu" 2
\fBIntroduction\fP
.IP "\(bu" 2
\fBWriting code that can be turned into a binding\fP
.IP "\(bu" 2
\fBHow to write mlpack bindings\fP
.IP "  \(bu" 4
\fBDocumenting a program with\fP
.IP "  \(bu" 4
\fBDefining parameters for a program\fP
.IP "  \(bu" 4
\fBUsing IO in an mlpackMain() function\fP
.IP "  \(bu" 4
\fBMore documentation on using IO\fP
.PP

.IP "\(bu" 2
\fBStructure of IO module and associated macros\fP
.IP "\(bu" 2
\fBCommand-line program bindings\fP
.IP "  \(bu" 4
\fBmlpackMain() definition\fP
.IP "  \(bu" 4
\fBMatrix and model parameter handling\fP
.IP "  \(bu" 4
\fBParsing the command line\fP
.PP

.IP "\(bu" 2
\fBPython bindings\fP
.IP "  \(bu" 4
\fBPassing matrices to/from Python\fP
.IP "  \(bu" 4
\fBPassing model parameter to/from Python\fP
.IP "  \(bu" 4
\fBCMake generation of setup\&.py\fP
.IP "  \(bu" 4
\fBBuilding the \&.pyx files\fP
.IP "  \(bu" 4
\fBTesting the Python bindings\fP
.PP

.IP "\(bu" 2
\fBAdding new binding types\fP
.PP
.SH "Introduction"
.PP
C++ is not the most popular language on the planet, and it (unfortunately) can scare many away with its ultra-verbose error messages, confusing template rules, and complex metaprogramming techniques\&. Most practitioners of machine learning tend to avoid writing native C++ and instead prefer other languages---probably most notably Python\&.
.PP
In the case of Python, many projects will use tools like SWIG (http://www.swig.org/) to automatically generate bindings, or they might hand-write Cython\&. The same types of strategies may be used for other languages; hand-written MEX files may be used for MATLAB, hand-written RCpp bindings might be used for R bindings, and so forth\&.
.PP
However, these approaches have a fundamental flaw: the hand-written bindings must be maintained, and risk going out of date as the rest of the library changes or new functionality is added\&. This incurs a maintenance burden: each major change to the library means that someone must update the bindings and test that they are still working\&. mlpack is not prepared to handle this maintenance workload; therefore an alternate solution is needed\&.
.PP
At the time of the design of this system, mlpack shipped headers for a C++ library as well as many (~40) hand-written command-line programs that used the \fBmlpack::IO\fP object to manage command-line arguments\&. These programs all had similar structure, and could be logically split into three sections:
.PP
.IP "\(bu" 2
parse the input options supplied by the user
.IP "\(bu" 2
run the machine learning algorithm
.IP "\(bu" 2
prepare the output to return to the user
.PP
.PP
The user might interface with this command-line program like the following:
.PP
.PP
.nf
$ mlpack_knn -r reference\&.csv -q query\&.csv -k 3 -d d\&.csv -n n\&.csv
.fi
.PP
.PP
That is, they would pass a number of input options---some were numeric values (like \fC-k\fP \fC3\fP ); some were filenames (like \fC-r\fP \fCreference\&.csv\fP ); and a few other types also\&. Therefore, the first stage of the program---parsing input options---would be handled by reading the command line and loading any input matrices\&. Preparing the output, which usually consists of data matrices (i\&.e\&. \fC-d\fP \fCd\&.csv\fP ) involves saving the matrix returned by the algorithm to the user's desired file\&.
.PP
Ideally, any binding to any language would have this same structure, and the actual 'run the machine learning algorithm' code could be identical\&. For MATLAB, for instance, we would not need to read the file \fCreference\&.csv\fP but instead the user would simply pass their data matrix as an argument\&. So each input and output parameter would need to be handled differently, but the algorithm could be run identically across all bindings\&.
.PP
Therefore, design of an automatically-generated binding system would simply involve generating the boilerplate code necessary to parse input options for a given language, and to return output options to a user\&.
.SH "Writing code that can be turned into a binding"
.PP
This section details what a binding file might actually look like\&. It is good to have this API in mind when reading the following sections\&.
.PP
Each mlpack binding is typically contained in the \fCsrc/mlpack/methods/\fP folder corresponding to a given machine learning algorithm, with the suffix \fC_main\&.cpp\fP ; so an example is \fCsrc/mlpack/methods/pca/pca_main\&.cpp\fP \&.
.PP
These files have roughly two parts:
.PP
.IP "\(bu" 2
definition of the input and output parameters with \fCPARAM\fP macros
.IP "\(bu" 2
implementation of \fCmlpackMain()\fP, which is the actual machine learning code
.PP
.PP
Here is a simple example file:
.PP
.PP
.nf
// This is a stripped version of mean_shift_main\&.cpp\&.
#include <mlpack/prereqs\&.hpp>
#include <mlpack/core/util/cli\&.hpp>
#include <mlpack/core/util/mlpack_main\&.hpp>

#include <mlpack/core/kernels/gaussian_kernel\&.hpp>
#include "mean_shift\&.hpp"

using namespace mlpack;
using namespace mlpack::meanshift;
using namespace mlpack::kernel;
using namespace std;

// Define the help text for the program\&.  The PRINT_PARAM_STRING() and
// PRINT_DATASET() macros are used to print the name of the parameter as seen in
// the binding type that is being used, and the PRINT_CALL() macro generates a
// sample invocation of the program in the language of the binding type that is
// being used\&.  Note that the macros must have + on either side of them\&.  We
// provide some extra references with the "SEE_ALSO()" macro, which is used to
// generate documentation for the website\&.

// Program Name\&.
BINDING_NAME("Mean Shift Clustering");

// Short description\&.
BINDING_SHORT_DESC(
    "A fast implementation of mean-shift clustering using dual-tree range "
    "search\&.  Given a dataset, this uses the mean shift algorithm to produce "
    "and return a clustering of the data\&.");

// Long description\&.
BINDING_LONG_DESC(
    "This program performs mean shift clustering on the given dataset, storing "
    "the learned cluster assignments either as a column of labels in the input "
    "dataset or separately\&."
    "\n\n"
    "The input dataset should be specified with the " +
    PRINT_PARAM_STRING("input") + " parameter, and the radius used for search"
    " can be specified with the " + PRINT_PARAM_STRING("radius") + " "
    "parameter\&.  The maximum number of iterations before algorithm termination "
    "is controlled with the " + PRINT_PARAM_STRING("max_iterations") + " "
    "parameter\&."
    "\n\n"
    "The output labels may be saved with the " + PRINT_PARAM_STRING("output") +
    " output parameter and the centroids of each cluster may be saved with the"
    " " + PRINT_PARAM_STRING("centroid") + " output parameter\&.");

// Example\&.
BINDING_EXAMPLE(
    "For example, to run mean shift clustering on the dataset " +
    PRINT_DATASET("data") + " and store the centroids to " +
    PRINT_DATASET("centroids") + ", the following command may be used: "
    "\n\n" +
    PRINT_CALL("mean_shift", "input", "data", "centroid", "centroids"));

// See also\&.\&.\&.
BINDING_SEE_ALSO("@kmeans", "#kmeans");
BINDING_SEE_ALSO("@dbscan", "#dbscan");
BINDING_SEE_ALSO("Mean shift on Wikipedia",
        "https://en\&.wikipedia\&.org/wiki/Mean_shift");
BINDING_SEE_ALSO("Mean Shift, Mode Seeking, and Clustering (pdf)",
        "http://citeseerx\&.ist\&.psu\&.edu/viewdoc/download?doi=10\&.1\&.1\&.510\&.1222"
        "&rep=rep1&type=pdf");
BINDING_SEE_ALSO("mlpack::mean_shift::MeanShift C++ class documentation",
        "@doxygen/classmlpack_1_1meanshift_1_1MeanShift\&.html");

// Define parameters for the executable\&.

// Required option: the user must give us a matrix\&.
PARAM_MATRIX_IN_REQ("input", "Input dataset to perform clustering on\&.", "i");

// Output options: the user can save the output matrix of labels and/or the
// centroids\&.
PARAM_UCOL_OUT("output", "Matrix to write output labels to\&.", "o");
PARAM_MATRIX_OUT("centroid", "If specified, the centroids of each cluster will "
    "be written to the given matrix\&.", "C");

// Mean shift configuration options\&.
PARAM_INT_IN("max_iterations", "Maximum number of iterations before mean shift "
    "terminates\&.", "m", 1000);
PARAM_DOUBLE_IN("radius", "If the distance between two centroids is less than "
    "the given radius, one will be removed\&.  A radius of 0 or less means an "
    "estimate will be calculated and used for the radius\&.", "r", 0);

void mlpackMain()
{
  // Process the parameters that the user passed\&.
  const double radius = IO::GetParam<double>("radius");
  const int maxIterations = IO::GetParam<int>("max_iterations");

  if (maxIterations < 0)
  {
    Log::Fatal << "Invalid value for maximum iterations (" << maxIterations <<
        ")! Must be greater than or equal to 0\&." << endl;
  }

  // Warn, if the user did not specify that they wanted any output\&.
  if (!IO::HasParam("output") && !IO::HasParam("centroid"))
  {
    Log::Warn << "--output_file, --in_place, and --centroid_file are not set; "
        << "no results will be saved\&." << endl;
  }

  arma::mat dataset = std::move(IO::GetParam<arma::mat>("input"));
  arma::mat centroids;
  arma::Col<size_t> assignments;

  // Prepare and run the actual algorithm\&.
  MeanShift<> meanShift(radius, maxIterations);

  Timer::Start("clustering");
  Log::Info << "Performing mean shift clustering\&.\&.\&." << endl;
  meanShift\&.Cluster(dataset, assignments, centroids);
  Timer::Stop("clustering");

  Log::Info << "Found " << centroids\&.n_cols << " centroids\&." << endl;
  if (radius <= 0\&.0)
    Log::Info << "Estimated radius was " << meanShift\&.Radius() << "\&.\n";

  // Should we give the user the output matrix?
  if (IO::HasParam("output"))
    IO::GetParam<arma::Col<size_t>>("output") = std::move(assignments);

  // Should we give the user the centroid matrix?
  if (IO::HasParam("centroid"))
    IO::GetParam<arma::mat>("centroid") = std::move(centroids);
}
.fi
.PP
.PP
We can see that we have defined the basic program information in the \fC\fBBINDING_NAME()\fP\fP, \fC\fBBINDING_SHORT_DESC()\fP\fP, \fC\fBBINDING_LONG_DESC()\fP\fP, \fC\fBBINDING_EXAMPLE()\fP\fP and \fC\fBBINDING_SEE_ALSO()\fP\fP macros\&. This is, for instance, what is displayed to describe the binding if the user passed the \fC--help\fP option for a command-line program\&.
.PP
Then, we define five parameters, three input and two output, that define the data and options that the mean shift clustering will function on\&. These parameters are defined with the \fCPARAM\fP macros, of which there are many\&. The names of these macros specify the type, whether the parameter is required, and whether the parameter is input or output\&. Some examples:
.PP
.IP "\(bu" 2
\fC\fBPARAM_STRING_IN()\fP\fP -- a string-type input parameter
.IP "\(bu" 2
\fC\fBPARAM_MATRIX_OUT()\fP\fP -- a matrix-type output parameter
.IP "\(bu" 2
\fC\fBPARAM_DOUBLE_IN_REQ()\fP\fP -- a required double-type input parameter
.IP "\(bu" 2
\fC\fBPARAM_UMATRIX_IN()\fP\fP -- an unsigned matrix-type input parameter
.IP "\(bu" 2
\fC\fBPARAM_MODEL_IN()\fP\fP -- a serializable model-type input parameter
.PP
.PP
Note that each of these macros may have slightly different syntax\&. See the links above for further documentation\&.
.PP
In order to write a new binding, then, you simply must write \fC\fBBINDING_NAME()\fP\fP, \fC\fBBINDING_SHORT_DESC()\fP\fP, \fC\fBBINDING_LONG_DESC()\fP\fP, \fC\fBBINDING_EXAMPLE()\fP\fP and \fC\fBBINDING_SEE_ALSO()\fP\fP definitions of the program with some docuentation, define the input and output parameters as \fCPARAM\fP macros, and then write an \fCmlpackMain()\fP function that actually performs the functionality of the binding\&. Inside of \fCmlpackMain()\fP:
.PP
.IP "\(bu" 2
All input parameters are accessible through \fCIO::GetParam<type>\fP('name')\&.
.IP "\(bu" 2
All output parameters should be set by the end of the function with the \fCIO::GetParam<type>\fP('name') method\&.
.PP
.PP
Then, assuming that your program is saved in the file \fCprogram_name_main\&.cpp\fP, generating bindings for other languages is a simple addition to the \fCCMakeLists\&.txt\fP file:
.PP
.PP
.nf
add_cli_executable(program_name)
add_python_binding(program_name)
add_markdown_docs(program_name "cli;python" "category")
.fi
.PP
.PP
In this example, \fCadd_markdown_docs()\fP will generate documentation that is typically used to build the website\&. The 'category' parameter should be one of the categories in \fCsrc/mlpack/bindings/markdown/MarkdownCategories\&.cmake\fP\&.
.SH "How to write mlpack bindings"
.PP
This section describes the general structure of the \fCIO\fP code and how one might write a new binding for mlpack\&. After reading this section it should be relatively clear how one could use the \fCIO\fP functionality along with CMake to add a binding for a new mlpack machine learning method\&. If it is not clear, then the examples in the following sections should clarify\&.
.SS "Documenting a program with"
\fC\fBBINDING_NAME()\fP\fP, \fC\fBBINDING_SHORT_DESC()\fP\fP, \fC\fBBINDING_LONG_DESC()\fP\fP, \fC\fBBINDING_EXAMPLE()\fP\fP and \fC\fBBINDING_SEE_ALSO()\fP\fP\&.
.PP
Any mlpack program should be documented with the \fC\fBBINDING_NAME()\fP\fP, \fC\fBBINDING_SHORT_DESC()\fP\fP, \fC\fBBINDING_LONG_DESC()\fP\fP , \fC\fBBINDING_EXAMPLE()\fP\fP and \fC\fBBINDING_SEE_ALSO()\fP\fP macros, which is available from the \fC<\fBmlpack/core/util/mlpack_main\&.hpp\fP>\fP header\&. The macros are of the form
.PP
.PP
.nf
BINDING_NAME("program name");
BINDING_SHORT_DESC("This is a short, two-sentence description of what the program does\&.");
BINDING_LONG_DESC("This is a long description of what the program does\&."
    " It might be many lines long and have lots of details about different options\&.");
BINDING_EXAMPLE("This contains one example for this particular binding\&.\n" +
    PROGRAM_CALL(\&.\&.\&.));
BINDING_EXAMPLE("This contains another example for this particular binding\&.\n" +
    PROGRAM_CALL(\&.\&.\&.));
// There could be many of these "see alsos"\&.
BINDING_SEE_ALSO("https://en\&.wikipedia\&.org/wiki/Machine_learning");
.fi
.PP
.PP
The short documentation should be two sentences indicating what the program implements and does, and a quick overview of how it can be used and what it should be used for\&. When writing new short documentation, it is a good idea to take a look at the existing documentation to get an idea of the general format\&.
.PP
For the 'see also' section, you can specify as many \fCSEE_ALSO()\fP calls as you see fit\&. These are links used at the 'see also' section of the website documentation for each binding, and it's very important that relevant links are provided (also to other bindings)\&. See the \fCSEE_ALSO()\fP documentation for more details\&.
.PP
Although it is possible to provide very short documentation, it is certainly better to provide a long description including
.PP
.IP "\(bu" 2
what the program does
.IP "\(bu" 2
a basic overview of what input and output parameters the program has
.IP "\(bu" 2
at least one example invocation
.PP
.PP
Examples are very important, and are probably what most users are going to immediately search for, instead of taking a long time to read and carefully consider all of the written documentation\&.
.PP
However, it is difficult to write language-agnostic documentation\&. For instance, in a command-line program, an output parameter '--output_file' would be specified on the command line as an input parameter, but in Python, the output parameter 'output' would actually simply be returned from the call to the Python function\&. Therefore, we must be careful how our documentation refers to input and output parameters\&. The following general guidelines can help:
.PP
.IP "\(bu" 2
Always refer to output parameters as 'output parameters', which is a fairly close term that can be interpreted to mean both 'return values' for languages like Python and MATLAB and also 'arguments given on the command line' for command line programs\&.
.IP "\(bu" 2
Use the provided \fCPRINT_PARAM_STRING()\fP macro to print the names of parameters\&. For instance, \fCPRINT_PARAM_STRING('shuffle')\fP will print \fC'--shuffle'\fP for a command line program and \fC'shuffle'\fP for a Python binding\&. The \fCPRINT_PARAM_STRING()\fP macro also takes into account the type of the parameter\&.
.IP "\(bu" 2
Use the provided \fCPRINT_DATASET()\fP and \fCPRINT_MODEL()\fP macro to introduce example datasets or models, which can be useful when introducing an example usage of the program\&. So you could write \fC''to @c run @c with @c a
   @c dataset @c '\fP \fC+\fP \fCPRINT_DATASET\fP('data') \fC+\fP \fC'\&.\&.\&.''\fP\&.
.IP "\(bu" 2
Use the provided \fCPRINT_CALL()\fP macro to print example invocations of the program\&. The first argument is the name of the program, and then the following arguments should be the name of a parameter followed by the value of that parameter\&.
.IP "\(bu" 2
Never mention files in the documentation---files are only relevant to command-line programs\&. Similarly, avoid mentioning anything language-specific\&.
.IP "\(bu" 2
Remember that some languages give output through return values and some give output using other input parameters\&. So the right verbiage to use is, e\&.g\&., \fC'the results may be saved using the PRINT_PARAM_STRING('output') parameter'\fP, and \fBnot\fP \fC'the results are returned through the PRINT_PARAM_STRING('output') parameter'\fP\&.
.PP
.PP
Each of these macros (\fCPRINT_PARAM_STRING()\fP, \fCPRINT_DATASET()\fP, \fCPRINT_MODEL()\fP, and \fCPRINT_CALL()\fP ) provides different output depending on the language\&. Below are some example of documentation strings and their outputs for different languages\&. Note that the output might not be \fIexactly\fP as written or formatted here, but the general gist should be the same\&.
.PP
.PP
.nf
Input C++ (snippet):

  "The parameter " + PRINT_PARAM_STRING("shuffle") + ", if set, will shuffle "
  "the data before learning\&."

Command-line program output (snippet):

  The parameter '--shuffle', if set, will shuffle the data before learning\&.

Python binding output (snippet):

  The parameter 'shuffle', if set, will shuffle the data before learning\&.

Julia binding output (snippet):

  The parameter `shuffle`, if set, will shuffle the data before learning\&.

Go binding output (snippet):

  The parameter "Shuffle", if set, will shuffle the data before learning\&.
.fi
.PP
.PP
.PP
.nf
Input C++ (snippet):

  "The output matrix can be saved with the " + PRINT_PARAM_STRING("output") +
  " output parameter\&."

Command-line program output (snippet):

  The output matrix can be saved with the '--output_file' output parameter\&.

Python binding output (snippet):

  The output matrix can be saved with the 'output' output parameter\&.

Julia binding output (snippet):

  The output matrix can be saved with the `output` output parameter\&.

Go binding output (snippet):

  The output matrix can be saved with the "output" output parameter\&.
.fi
.PP
.PP
.PP
.nf
Input C++ (snippet):

  "For example, to train a model on the dataset " + PRINT_DATASET("x") + " and "
  "save the output model to " + PRINT_MODEL("model") + ", the following command"
  " can be used:"
  "\n\n" +
  PRINT_CALL("program", "input", "x", "output_model", "model")

Command-line program output (snippet):

  For example, to train a model on the dataset 'x\&.csv' and save the output model
  to 'model\&.bin', the following command can be used:

  $ program --input_file x\&.csv --output_model_file model\&.bin

Python binding output (snippet):

  For example, to train a model on the dataset 'x' and save the output model to
  'model', the following command can be used:

  >>> output = program(input=x)
  >>> model = output['output_model']

Julia binding output (snippet):

  For example, to train a model on the dataset `x` and save the output model to
  `model`, the following command can be used:

  julia> model = program(input=x)

Go binding output (snippet):

  For example, to train a model on the dataset "x" and save the output model to
  "model", the following command can be used:

    // Initialize optional parameters for Program()\&.
    param := mlpack\&.ProgramOptions()
    param\&.Input = x

    model := mlpack\&.Program(param)
.fi
.PP
.PP
.PP
.nf
Input C++ (full program, 'random_numbers_main\&.cpp'):

  // Program Name\&.
  BINDING_NAME("Random Numbers");

  // Short description\&.
  BINDING_SHORT_DESC("An implementation of Random Numbers");

  // Long description\&.
  BINDING_LONG_DESC(
      "This program generates random numbers with a "
      "variety of nonsensical techniques and example parameters\&.  The input "
      "dataset, which will be ignored, can be specified with the " +
      PRINT_PARAM_STRING("input") + " parameter\&.  If you would like to subtract"
      " values from each number, specify the " +
      PRINT_PARAM_STRING("subtract") + " parameter\&.  The number of random "
      "numbers to generate is specified with the " +
      PRINT_PARAM_STRING("num_values") + " parameter\&."
      "\n\n"
      "The output random numbers can be saved with the " +
      PRINT_PARAM_STRING("output") + " output parameter\&.  In addition, a "
      "randomly generated linear regression model can be saved with the " +
      PRINT_PARAM_STRING("output_model") + " output parameter\&.");

  // Example\&.
  BINDING_EXAMPLE(
      "For example, to generate 100 random numbers with 3 subtracted from them "
      "and save the output to " + PRINT_DATASET("rand") + " and the random "
      "model to " + PRINT_MODEL("rand_lr") + ", use the following "
      "command:"
      "\n\n" +
      PRINT_CALL("random_numbers", "num_values", 100, "subtract", 3, "output",
          "rand", "output_model", "rand_lr"));

Command line output:

    Random Numbers

    This program generates random numbers with a variety of nonsensical
    techniques and example parameters\&.  The input dataset, which will be
    ignored, can be specified with the '--input_file' parameter\&.  If you would
    like to subtract values from each number, specify the '--subtract'
    parameter\&.  The number of random numbers to generate is specified with the
    '--num_values' parameter\&.

    The output random numbers can be saved with the '--output_file' output
    parameter\&.  In addition, a randomly generated linear regression model can be
    saved with the '--output_model_file' output parameter\&.

    For example, to generate 100 random numbers with 3 subtracted from them and
    save the output to 'rand\&.csv' and the random model to 'rand_lr\&.bin', use the
    following command:

    $ random_numbers --num_values 100 --subtract 3 --output_file rand\&.csv
      --output_model_file rand_lr\&.bin

Python binding output:

    Random Numbers

    This program generates random numbers with a variety of nonsensical
    techniques and example parameters\&.  The input dataset, which will be
    ignored, can be specified with the 'input' parameter\&.  If you would like to
    subtract values from each number, specify the 'subtract' parameter\&.  The
    number of random numbers to generate is specified with the 'num_values'
    parameter\&.

    The output random numbers can be saved with the 'output' output parameter\&.
    In addition, a randomly generated linear regression model can be saved with
    the 'output_model' output parameter\&.

    For example, to generate 100 random numbers with 3 subtracted from them and
    save the output to 'rand' and the random model to 'rand_lr', use the
    following command:

    >>> output = random_numbers(num_values=100, subtract=3)
    >>> rand = output['output']
    >>> rand_lr = output['output_model']

Julia binding output:

    Random Numbers

    This program generates random numbers with a variety of nonsensical
    techniques and example parameters\&.  The input dataset, which will be
    ignored, can be specified with the `input` parameter\&.  If you would like to
    subtract values from each number, specify the `subtract` parameter\&.  The
    number of random numbers to generate is specified with the `num_values`
    parameter\&.

    The output random numbers can be saved with the `output` output parameter\&.
    In addition, a randomly generated linear regression model can be saved with
    the `output_model` output parameter\&.

    For example, to generate 100 random numbers with 3 subtracted from them and
    save the output to `rand` and the random model to `rand_lr`, use the
    following command:

    ```julia
    julia> rand, rand_lr = random_numbers(num_values=100, subtract=3)
    ```

Go binding output:

    Random Numbers

    This program generates random numbers with a variety of nonsensical
    techniques and example parameters\&.  The input dataset, which will be
    ignored, can be specified with the "Input" parameter\&.  If you would like to
    subtract values from each number, specify the "Subtract" parameter\&.  The
    number of random numbers to generate is specified with the "NumValues"
    parameter\&.

    The output random numbers can be saved with the "output" output parameter\&.
    In addition, a randomly generated linear regression model can be saved with
    the "outputModel" output parameter\&.

    For example, to generate 100 random numbers with 3 subtracted from them and
    save the output to "rand" and the random model to "randLr", use the
    following command:

    // Initialize optional parameters for RandomNumbers()\&.
    param := mlpack\&.RandomNumbersOptions()
    param\&.NumValues = 100
    param\&.Subtract=3

    rand, randLr := mlpack\&.RandomNumbers(param)
.fi
.PP
.SS "Defining parameters for a program"
There exist several macros that can be used after a \fC\fBBINDING_LONG_DESC()\fP\fP and \fC\fBBINDING_EXAMPLE()\fP\fP definition to define the parameters that can be specified for a given mlpack program\&. These macros all have the same general definition: the name of the macro specifies the type of the parameter, whether or not the parameter is required, and whether the parameter is an input or output parameter\&. Then as arguments to the macros, the name, description, and sometimes the single-character alias and the default value of the parameter\&.
.PP
To give a flavor of how these definitions look, the definition
.PP
.PP
.nf
PARAM_STRING_IN("algorithm", "The algorithm to use: 'svd' or 'blah'\&.", "a");
.fi
.PP
.PP
will define a string input parameter \fCalgorithm\fP (referenced as \fC'--algorithm'\fP from the command-line or \fC'algorithm'\fP from Python) with the description \fCThe algorithm to use: 'svd' or 'blah'\&.\fP The single-character alias \fC'-a'\fP can be used from a command-line program (but means nothing in Python)\&.
.PP
There are numerous different macros that can be used:
.PP
.IP "\(bu" 2
\fC\fBPARAM_FLAG()\fP\fP - boolean flag parameter
.IP "\(bu" 2
\fC\fBPARAM_INT_IN()\fP\fP - integer input parameter
.IP "\(bu" 2
\fC\fBPARAM_INT_OUT()\fP\fP - integer output parameter
.IP "\(bu" 2
\fC\fBPARAM_DOUBLE_IN()\fP\fP - double input parameter
.IP "\(bu" 2
\fC\fBPARAM_DOUBLE_OUT()\fP\fP - double output parameter
.IP "\(bu" 2
\fC\fBPARAM_STRING_IN()\fP\fP - string input parameter
.IP "\(bu" 2
\fC\fBPARAM_STRING_OUT()\fP\fP - string output parameter
.IP "\(bu" 2
\fC\fBPARAM_MATRIX_IN()\fP\fP - double-valued matrix (\fCarma::mat\fP) input parameter
.IP "\(bu" 2
\fC\fBPARAM_MATRIX_OUT()\fP\fP - double-valued matrix (\fCarma::mat\fP) output parameter
.IP "\(bu" 2
\fC\fBPARAM_UMATRIX_IN()\fP\fP - size_t-valued matrix (\fCarma::Mat<size_t>\fP) input parameter
.IP "\(bu" 2
\fC\fBPARAM_UMATRIX_OUT()\fP\fP - size_t-valued matrix (\fCarma::Mat<size_t>\fP) output parameter
.IP "\(bu" 2
\fC\fBPARAM_TMATRIX_IN()\fP\fP - transposed double-valued matrix (\fCarma::mat\fP) input parameter
.IP "\(bu" 2
\fC\fBPARAM_TMATRIX_OUT()\fP\fP - transposed double-valued matrix (\fCarma::mat\fP) output parameter
.IP "\(bu" 2
\fC\fBPARAM_MATRIX_AND_INFO_IN()\fP\fP - matrix with categoricals input parameter (\fCstd::tuple<data::DatasetInfo, arma::mat\fP)
.IP "\(bu" 2
\fC\fBPARAM_COL_IN()\fP\fP - double-valued column vector (\fCarma::vec\fP) input parameter
.IP "\(bu" 2
\fC\fBPARAM_COL_OUT()\fP\fP - double-valued column vector (\fCarma::vec\fP) output parameter
.IP "\(bu" 2
\fC\fBPARAM_UCOL_IN()\fP\fP - size_t-valued column vector (\fCarma::Col<size_t>\fP) input parameter
.IP "\(bu" 2
\fC\fBPARAM_UCOL_OUT()\fP\fP - size_t-valued column vector (\fCarma::Col<size_t>\fP) output parameter
.IP "\(bu" 2
\fC\fBPARAM_ROW_IN()\fP\fP - double-valued row vector (\fCarma::rowvec\fP) input parameter
.IP "\(bu" 2
\fC\fBPARAM_ROW_OUT()\fP\fP - double-valued row vector (\fCarma::rowvec\fP) output parameter
.IP "\(bu" 2
\fC\fBPARAM_VECTOR_IN()\fP\fP - \fCstd::vector\fP input parameter
.IP "\(bu" 2
\fC\fBPARAM_VECTOR_OUT()\fP\fP - \fCstd::vector\fP output parameter
.IP "\(bu" 2
\fC\fBPARAM_MODEL_IN()\fP\fP - serializable model input parameter
.IP "\(bu" 2
\fC\fBPARAM_MODEL_OUT()\fP\fP - serializable model output parameter
.PP
.PP
And for input parameters, the parameter may also be required:
.PP
.IP "\(bu" 2
\fC\fBPARAM_INT_IN_REQ()\fP\fP 
.IP "\(bu" 2
\fC\fBPARAM_DOUBLE_IN_REQ()\fP\fP 
.IP "\(bu" 2
\fC\fBPARAM_STRING_IN_REQ()\fP\fP 
.IP "\(bu" 2
\fC\fBPARAM_MATRIX_IN_REQ()\fP\fP 
.IP "\(bu" 2
\fC\fBPARAM_UMATRIX_IN_REQ()\fP\fP 
.IP "\(bu" 2
\fC\fBPARAM_TMATRIX_IN_REQ()\fP\fP 
.IP "\(bu" 2
\fC\fBPARAM_VECTOR_IN_REQ()\fP\fP 
.IP "\(bu" 2
\fC\fBPARAM_MODEL_IN_REQ()\fP\fP 
.PP
.PP
Click the links for each macro to read further documentation\&. Note also that each possible combination of \fCIN\fP, \fCOUT\fP, and \fCREQ\fP is not available---output options cannot be required, and some combinations simply have not been added because they have not been needed\&.
.PP
The \fC\fBPARAM_MODEL_IN()\fP\fP and \fC\fBPARAM_MODEL_OUT()\fP\fP macros are used to serialize mlpack models\&. These could be used, for instance, to allow the user to save a trained model (like a linear regression model) or load an input model\&. The first parameter to the \fC\fBPARAM_MODEL_IN()\fP\fP or \fC\fBPARAM_MODEL_OUT()\fP\fP macro should be the C++ type of the model to be serialized; this type \fBmust\fP have a function \fCtemplate<typename Archive> void serialize(Archive&)\fP (i\&.e\&. the type must be serializable via cereal)\&. For example, to allow a user to specify an input model of type \fCLinearRegression\fP, the follow definition could be used:
.PP
.PP
.nf
PARAM_MODEL_IN(LinearRegression, "input_model", "The input model to be used\&.",
    "i");
.fi
.PP
.PP
Then, the user will be able to specify their model from the command-line as \fC--input_model_file\fP and from Python using the \fCinput_model\fP option to the generated binding\&.
.PP
From the command line, matrix-type and model-type options (both input and output) are loaded from or saved to the specified file\&. This means that \fC_file\fP is appended to the name of the parameter; so if the parameter name is \fCdata\fP and it is of a matrix or model type, then the name that the user will specify on the command line will be \fC--data_file\fP\&. This displayed parameter name change \fBonly\fP occurs with matrix and model type parameters for command-line programs\&.
.PP
The \fCPARAM_MATRIX_AND_INFO()\fP macro defines a categorical matrix parameter (more specifically, a matrix type that can support categorical columns)\&. From the C++ program side, this means that the parameter type is \fCstd::tuple<data::DatasetInfo, arma::mat>\fP\&. From the user side, for a command-line program, this means that the user will pass the filename of a dataset that can have categorical features, such as an ARFF dataset\&. For a Python program, the user may pass a Pandas matrix with categorical columns\&. When the program is run, the input that the user gives will be processed and the \fCdata::DatasetInfo\fP object will be filled with the dimension types and the \fCarma::mat\fP object will be filled with the data itself\&.
.PP
To give some examples, the parameter definitions from the example 'random_numbers' program in the previous section are shown below\&.
.PP
.PP
.nf
PARAM_MATRIX_IN("input", "The input matrix that will be ignored\&.", "i");
PARAM_DOUBLE_IN("subtract", "The value to subtract from each parameter\&.", "s",
    0\&.0); // Default value of 0\&.0\&.
PARAM_INT_IN("num_samples", "The number of samples to generate\&.", "n", 100);

PARAM_MATRIX_OUT("output", "The output matrix of random samples\&.", "o");
PARAM_MODEL_OUT(LinearRegression, "output_model", "The randomly generated "
    "linear regression output model\&.", "M");
.fi
.PP
.PP
Note that even the parameter documentation strings must be a little be agnostic to the binding type, because the command-line interface is so different than the Python interface to the user\&.
.SS "Using IO in an mlpackMain() function"
mlpack's \fCIO\fP module provides a unified abstract interface for getting input from and providing output to users without needing to consider the language (command-line, Python, MATLAB, etc\&.) that the user is running the program from\&. This means that after the \fC\fBBINDING_LONG_DESC()\fP\fP and \fC\fBBINDING_EXAMPLE()\fP\fP macros and the \fCPARAM_*\fP() macros have been defined, a language-agnostic \fCmlpackMain()\fP function can be written\&. This function then can perform the actual computation that the entire program is meant to\&.
.PP
Inside of an \fCmlpackMain()\fP function, the \fC\fBmlpack::IO\fP\fP module can be used to access input parameters and set output parameters\&. There are two main functions for this, plus a utility printing function:
.PP
.IP "\(bu" 2
\fC\fBIO::GetParam<T>()\fP\fP - get a reference to a parameter
.IP "\(bu" 2
\fCIO::HasParam()\fP - returns true if the user specified the parameter
.IP "\(bu" 2
\fC\fBIO::GetPrintableParam<T>()\fP\fP - returns a string representing the value of the parameter
.PP
.PP
So, to print 'hello' if the user specified the \fCprint_hello\fP parameter, the following code could be used:
.PP
.PP
.nf
using namespace mlpack;

if (IO::HasParam("print_hello"))
  std::cout << "Hello!" << std::endl;
else
  std::cout << "No greetings for you!" << std::endl;
.fi
.PP
.PP
To access a string that a user passed in to the \fCstring\fP parameter, the following code could be used:
.PP
.PP
.nf
using namespace mlpack;

const std::string& str = IO::GetParam<std::string>("string");
.fi
.PP
.PP
Matrix types are accessed in the same way:
.PP
.PP
.nf
using namespace mlpack;

arma::mat& matrix = IO::GetParam<arma::mat>("matrix");
.fi
.PP
.PP
Similarly, model types can be accessed\&. If a \fCLinearRegression\fP model was specified by the user as the parameter \fCmodel\fP, the following code can access the model:
.PP
.PP
.nf
using namespace mlpack;

LinearRegression& lr = IO::GetParam<LinearRegression>("model");
.fi
.PP
.PP
Matrices with categoricals are a little trickier to access since the C++ parameter type is \fCstd::tuple<data::DatasetInfo, arma::mat>\fP\&. The example below creates references to both the \fCDatasetInfo\fP and matrix objects, assuming the user has passed a matrix with categoricals as the \fCmatrix\fP parameter\&.
.PP
.PP
.nf
using namespace mlpack;

typename std::tuple<data::DatasetInfo, arma::mat> TupleType;
data::DatasetInfo& di = std::get<0>(IO::GetParam<TupleType>("matrix"));
arma::mat& matrix = std::get<1>(IO::GetParam<TupleType>("matrix"));
.fi
.PP
.PP
These two functions can be used to write an entire program\&. The third function, \fC\fBGetPrintableParam()\fP\fP, can be used to help provide useful output in a program\&. Typically, this function should be used if you want to provide some kind of error message about a matrix or model parameter, but want to avoid printing the matrix itself\&. For instance, printing a matrix parameter with \fC\fBGetPrintableParam()\fP\fP will print the filename for a command-line binding or the size of a matrix for a Python binding\&. \fC\fBGetPrintableParam()\fP\fP for a model parameter will print the filename for the model for a command-line binding or a simple string representing the type of the model for a Python binding\&.
.PP
Putting all of these ideas together, here is the \fCmlpackMain()\fP function that could be created for the 'random_numbers' program from earlier sections\&.
.PP
.PP
.nf
#include <mlpack/core/util/mlpack_main\&.hpp>

// BINDING_NAME(), BINDING_SHORT_DESC(), BINDING_LONG_DESC() , BINDING_EXAMPLE(),
// BINDING_SEE_ALSO() and PARAM_*() definitions should go here:
// \&.\&.\&.

using namespace mlpack;

void mlpackMain()
{
  // If the user passed an input matrix, tell them that we'll be ignoring it\&.
  if (IO::HasParam("input"))
  {
    // Print the filename the user passed, if a command-line binding, or the
    // size of the matrix passed, if a Python binding\&.
    Log::Warn << "The input matrix "
        << IO::GetPrintableParam<arma::mat>("input") << " is ignored!"
        << std::endl;
  }

  // Get the number of samples and also the value we should subtract\&.
  const size_t numSamples = (size_t) IO::GetParam<int>("num_samples");
  const double subtractValue = IO::GetParam<double>("subtract");

  // Create the random matrix (1-dimensional)\&.
  arma::mat output(1, numSamples, arma::fill::randu);
  output -= subtractValue;

  // Save the output matrix if the user wants\&.
  if (IO::HasParam("output"))
    IO::GetParam<arma::mat>("output") = std::move(output); // Avoid copy\&.

  // Did the user request a random linear regression model?
  if (IO::HasParam("output_model"))
  {
    LinearRegression lr;
    lr\&.Parameters()\&.randu(10); // 10-dimensional (arbitrary)\&.
    lr\&.Lambda() = 0\&.0;
    lr\&.Intercept() = false; // No intercept term\&.

    IO::GetParam<LinearRegression>("output_model") = std::move(lr);
  }
}
.fi
.PP
.SS "More documentation on using IO"
More documentation for the IO module can either be found on the \fBmlpack::IO\fP documentation page, or by reading the existing mlpack bindings\&. These can be found in the \fCsrc/mlpack/methods/\fP folders, by finding the \fC_main\&.cpp\fP files\&. For instance, \fCsrc/mlpack/methods/neighbor_search/knn_main\&.cpp\fP is the k-nearest-neighbor search program definition\&.
.SH "Structure of IO module and associated macros"
.PP
This section describes the internal functionality of the IO module and the associated macros\&. If you are only interested in writing mlpack programs, this section is probably not worth reading\&.
.PP
There are eight main components involved with mlpack bindings:
.PP
.IP "\(bu" 2
the IO module, a singleton class that stores parameter information
.IP "\(bu" 2
the mlpackMain() function that defines the functionality of the binding
.IP "\(bu" 2
the \fBBINDING_NAME()\fP macro that defines the binding name
.IP "\(bu" 2
the \fBBINDING_SHORT_DESC()\fP macro that defines the short description
.IP "\(bu" 2
the \fBBINDING_LONG_DESC()\fP macro that defines the long description
.IP "\(bu" 2
(optional) the \fBBINDING_EXAMPLE()\fP macro that defines example usages
.IP "\(bu" 2
(optional) the \fBBINDING_SEE_ALSO()\fP macro that defines 'see also' links
.IP "\(bu" 2
the PARAM_*() macros that define parameters for the binding
.PP
.PP
The \fBmlpack::IO\fP module is a singleton class that stores, at runtime, the binding name, the documentation, and the parameter information and values\&. In order to do this, each parameter and the program documentation must make themselves known to the IO singleton\&. This is accomplished by having the \fC\fBBINDING_NAME()\fP\fP, \fC\fBBINDING_SHORT_DESC()\fP\fP, \fC\fBBINDING_LONG_DESC()\fP\fP, \fC\fBBINDING_EXAMPLE()\fP\fP, \fC\fBBINDING_SEE_ALSO()\fP\fP and \fCPARAM_*\fP() macros declare global variables that, in their constructors, register themselves with the IO singleton\&.
.PP
The \fC\fBBINDING_NAME()\fP\fP macro declares an object of type \fBmlpack::util::ProgramName\fP\&. The \fC\fBBINDING_SHORT_DESC()\fP\fP macro declares an object of type \fBmlpack::util::ShortDescription\fP\&. The \fC\fBBINDING_LONG_DESC()\fP\fP macro declares an object of type \fBmlpack::util::LongDescription\fP\&. The \fC\fBBINDING_EXAMPLE()\fP\fP macro declares an object of type \fBmlpack::util::Example\fP\&. The \fC\fBBINDING_SEE_ALSO()\fP\fP macro declares an object of type \fBmlpack::util::SeeAlso\fP\&. The \fCProgramName\fP class constructor calls IO::RegisterProgramName() in order to register the given program name\&. The \fCShortDescription\fP class constructor calls IO::RegisterShortDescription() in order to register the given short description\&. The \fCLongDescription\fP class constructor calls IO::RegisterLongDescription() in order to register the given long description\&. The \fCExample\fP class constructor calls IO::RegisterExample() in order to register the given example\&. The \fCSeeAlso\fP class constructor calls IO::RegisterSeeAlso() in order to register the given see-also link\&.
.PP
The \fCPARAM_*\fP() macros declare an object that will, in its constructor, call IO::Add() to register that parameter with the IO singleton\&. The specific type of that object will depend on the binding type being used\&.
.PP
The IO::Add() function takes an \fBmlpack::util::ParamData\fP object as its input\&. This \fCParamData\fP object has a number of fields that must be set to properly describe the parameter\&. Each of the fields is documented and probably self-explanatory, but three fields deserve further explanation:
.PP
.IP "\(bu" 2
the \fCstd::string tname\fP member is used to encode the true type of the parameter---which is not known by the IO singleton at runtime\&. This should be set to \fC\fBTYPENAME(T)\fP\fP where \fCT\fP is the type of the parameter\&.
.IP "\(bu" 2
the \fCboost::any value\fP member is used to hold the actual value of the parameter\&. Typically this will simply be the parameter held by a \fCboost::any\fP object, but for some types it may be more complex\&. For instance, for a command-line matrix option, the \fCvalue\fP parameter will actually hold a tuple containing both the filename and the matrix itself\&.
.IP "\(bu" 2
the \fCstd::string cppType\fP should be a string containing the type as seen in C++ code\&. Typically this can be encoded by stringifying a \fCPARAM_*\fP() macro argument\&.
.PP
.PP
Thus, the global object defined by the \fCPARAM_*\fP() macro must turn its arguments into a fully specified \fCParamData\fP object and then call IO::Add() with it\&.
.PP
With different binding types, different behavior is often required for the \fC\fBGetParam<T>()\fP\fP, \fCHasParam()\fP, and \fC\fBGetPrintableParam<T>()\fP\fP functions\&. In order to handle this, the IO singleton also holds a function pointer map, so that a given type of option can call specific functionality for a certain task\&. This function map is accessible as \fCIO::functionMap\fP and is not meant to be used by users, but instead by people writing binding types\&.
.PP
Each function in the map must have signature
.PP
.PP
.nf
void MapFunction(const util::ParamData& d,
                 const void* input,
                 void* output);
.fi
.PP
.PP
The use of void pointers allows any type to be specified as input or output to the function without changing the signature for the map\&. The IO function map is of type
.PP
.PP
.nf
std::map<std::string, std::map<std::string,
    void (*)(const util::ParamData&, const void*, void*)>>
.fi
.PP
.PP
and the first map key is the typename (\fCtname\fP) of the parameter, and the second map key is the string name of the function\&. For instance, calling
.PP
.PP
.nf
const util::ParamData& d = IO::Parameters()["param"];
IO::GetSingleton()\&.functionMap[d\&.tname]["GetParam"](d, input, output);
.fi
.PP
.PP
will call the \fC\fBGetParam()\fP\fP function for the type of the \fC'param'\fP parameter\&. Examples are probably easiest to understand how this functionality works; see the \fBIO::GetParam<T>()\fP source to see how this might be used\&.
.PP
The IO singleton expects the following functions to be defined in the function map for each type:
.PP
.IP "\(bu" 2
\fCGetParam\fP -- return a pointer to the parameter in \fCoutput\fP\&.
.IP "\(bu" 2
\fCGetPrintableParam\fP -- return a pointer to a string description of the parameter in \fCoutput\fP\&.
.PP
.PP
If these functions are properly defined, then the IO module will work correctly\&. Other functions may also be defined; these may be used by other parts of the binding infrastructure for different languages\&.
.SH "Command-line program bindings"
.PP
This section describes the internal functionality of the command-line program binding generator\&. If you are only interested in writing mlpack programs, this section probably is not worth reading\&. This section is worth reading only if you want to know the specifics of how the \fCmlpackMain()\fP function and macros get turned into a fully working command-line program\&.
.PP
The code for the command-line bindings is found in \fCsrc/mlpack/bindings/cli\fP\&.
.SS "mlpackMain() definition"
Any command-line program must be compiled with the \fCBINDING_TYPE\fP macro set to the value \fCBINDING_TYPE_CLI\fP\&. This is handled by the CMake macro \fC\fBadd_cli_executable()\fP\fP\&.
.PP
When \fCBINDING_TYPE\fP is set to \fCBINDING_TYPE_CLI\fP, the following is set in \fC\fBsrc/mlpack/core/util/mlpack_main\&.hpp\fP\fP, which must be included by every mlpack binding:
.PP
.IP "\(bu" 2
The options defined by \fCPARAM_*\fP() macros are of type \fBmlpack::bindings::cli::CLIOption\fP\&.
.IP "\(bu" 2
The parameter and value printing macros for \fC\fBBINDING_LONG_DESC()\fP\fP and \fBBINDING_EXAMPLE()\fP are set: The \fCPRINT_PARAM_STRING()\fP macro is defined as \fBmlpack::bindings::cli::ParamString()\fP\&. The \fCPRINT_DATASET()\fP macro is defined as \fBmlpack::bindings::cli::PrintDataset()\fP\&. The \fCPRINT_MODEL()\fP macro is defined as \fBmlpack::bindings::cli::PrintModel()\fP\&. The \fCPRINT_CALL()\fP macro is defined as \fBmlpack::bindings::cli::ProgramCall()\fP\&.
.IP "\(bu" 2
The function \fCint main()\fP is defined as:
.PP
.PP
.PP
.nf
int main(int argc, char** argv)
{
  // Parse the command-line options; put them into IO\&.
  mlpack::bindings::cli::ParseCommandLine(argc, argv);

  mlpackMain();

  // Print output options, print verbose information, save model parameters,
  // clean up, and so forth\&.
  mlpack::bindings::cli::EndProgram();
}
.fi
.PP
.PP
Thus any mlpack command-line binding first processes the command-line arguments with \fBmlpack::bindings::cli::ParseCommandLine()\fP, then runs the binding with \fCmlpackMain()\fP, then cleans up with \fBmlpack::bindings::cli::EndProgram()\fP\&.
.PP
The \fC\fBParseCommandLine()\fP\fP function reads the input parameters and sets the values in IO\&. For matrix-type and model-type parameters, this reads the filenames from the command-line, but does not load the matrix or model\&. Instead the matrix or model is loaded the first time it is accessed with \fC\fBGetParam<T>()\fP\fP\&.
.PP
The \fC--help\fP parameter is handled by the \fBmlpack::bindings::cli::PrintHelp()\fP function\&.
.PP
At the end of program execution, the \fBmlpack::bindings::cli::EndProgram()\fP function is called\&. This writes any output matrix or model parameters to disk, and prints the program parameters and timers if \fC--verbose\fP was given\&.
.SS "Matrix and model parameter handling"
For command line bindings, the matrix, model, and matrix with categorical type parameters all require special handling, since it is not possible to pass a matrix of any reasonable size or a model on the command line directly\&. Therefore for a matrix or model parameter, the user specifies the file containing that matrix or model parameter\&. If the parameter is an input parameter, then the file is loaded when \fC\fBGetParam<T>()\fP\fP is called\&. If the parameter is an output parameter, then the matrix or model is saved to the file when \fC\fBEndProgram()\fP\fP is called\&.
.PP
The actual implementation of this is that the \fCboost::any value\fP member of the \fCParamData\fP struct does not hold the model or the matrix, but instead a \fCstd::tuple\fP containing both the matrix or the model, and the filename associated with that matrix or model\&.
.PP
This means that functions like \fC\fBGetParam<T>()\fP\fP and \fC\fBGetPrintableParam<T>()\fP\fP (and all of the other associated functions in the IO function map) must have special handling for matrix or model types\&. See those implementatipns for more details---the special handling is enforced via SFINAE\&.
.SS "Parsing the command line"
The \fC\fBParseCommandLine()\fP\fP function uses \fCCLI11\fP to read the values from the command line into the \fCParamData\fP structs held by the IO singleton\&.
.PP
In order to set up \fCCLI11\fP---and to keep its headers from needing to be included by the rest of the library---the code loops over each parameter known by the IO singleton and calls the \fC'AddToPO'\fP function from the function map\&. This in turn calls the necessary functions to register a given parameter with \fCCLI11\fP, and once all parameters have been registered, the facilities provided by \fCCLI11\fP are used to parse the command line input properly\&.
.SH "Python bindings"
.PP
This section describes the internal functionality of the mlpack Python binding generator\&. If you are only interested in writing new bindings or building the bindings, this section is probably not worth reading\&. But if you are interested in the internal working of the Python binding generator, then this section is for you\&.
.PP
The Python bindings are significantly more complex than the command line bindings because we cannot just compile directly to a finished product\&. Instead we need a multi-stage compilation:
.PP
.IP "\(bu" 2
We must generate a setup\&.py file that can be used to compile the bindings\&.
.IP "\(bu" 2
We must generate the \&.pyx (Cython) bindings for each program\&.
.IP "\(bu" 2
Then we must build each \&.pyx into a \&.so that is loadable from Python\&.
.IP "\(bu" 2
We must also test the Python bindings\&.
.PP
.PP
This is done with a combination of C++ code to generate the \&.pyx bindings, CMake to run the actual compilation and generate the setup\&.py file, some utility Python functions, and tests written in both Python and C++\&. This code is primarily contained in \fCsrc/mlpack/bindings/python/\fP\&.
.SS "Passing matrices to/from Python"
The standard Python matrix library is numpy, so mlpack bindings should accept numpy matrices as input\&. Fortunately, numpy Cython bindings already exist, which make it easy to convert from a numpy object to an Armadillo object without copying any data\&. This code can be found in \fCsrc/mlpack/bindings/python/mlpack/arma_numpy\&.pyx\fP, and is used by the Python \fC\fBGetParam<T>()\fP\fP functionality\&.
.PP
mlpack also supports categorical matrices; in Python, the typical way of representing matrices with categorical features is with Pandas\&. Therefore, mlpack also accepts Pandas matrices, and if any of the Pandas matrix dimensions are categorical, these are properly encoded\&. The function \fCto_matrix_with_info()\fP from \fCmlpack/bindings/python/mlpack/matrix_utils\&.py\fP is used to perform this conversion\&.
.SS "Passing model parameter to/from Python"
We use (or abuse) Cython functionality in order to give the user a model object that they can use in their Python code\&. However, we do not want to (or have the infrastructure to) write bindings for every method that a serializable model class might support; therefore, we only desire to return a memory pointer to the model to the user\&.
.PP
In this way, a user that receives a model from an output parameter can then reuse the model as an input parameter to another binding (or the same binding)\&.
.PP
To return a function pointer we have to define a Cython class in the following way (this example is taken from the perceptron binding):
.PP
.PP
.nf
cdef extern from "</home/ryan/src/mlpack-rc/src/mlpack/methods/perceptron/perceptron_main\&.cpp>" nogil:
  cdef int mlpackMain() nogil except +RuntimeError

  cdef cppclass PerceptronModel:
    PerceptronModel() nogil


cdef class PerceptronModelType:
  cdef PerceptronModel* modelptr

  def __cinit__(self):
    self\&.modelptr = new PerceptronModel()

  def __dealloc__(self):
    del self\&.modelptr
.fi
.PP
.PP
This class definition is automatically generated when the \&.pyx file is automatically generated\&.
.SS "CMake generation of setup\&.py"
A boilerplate setup\&.py file can be found in \fCsrc/mlpack/bindings/python/setup\&.py\&.in\fP\&. This will be configured by CMake to produce the final \fCsetup\&.py\fP file, but in order to do this, a list of the \&.pyx files to be compiled must be gathered\&.
.PP
Therefore, the \fCadd_python_binding()\fP macro is defined in \fC\fBsrc/mlpack/bindings/python/CMakeLists\&.txt\fP\fP\&. This adds the given binding to the \fCMLPACK_PYXS\fP variable, which is then inserted into \fCsetup\&.py\fP as part of the \fCconfigure_file()\fP step in \fC\fBsrc/mlpack/CMakeLists\&.txt\fP\fP\&.
.SS "Generation of \&.pyx files"
A binding named \fCprogram\fP is built into a program called \fCgenerate_pyx_program\fP (this a CMake target, so you can build these individually if you like)\&. The file \fCsrc/mlpack/bindings/python/generate_pyx\&.cpp\&.in\fP is configured by CMake to set the name of the program and the \fC*_main\fP\&.cpp file to include correctly, then the \fC\fBmlpack::bindings::python::PrintPYX()\fP\fP function is called by the program\&. The \fC\fBPrintPYX()\fP\fP function uses the parameters that have been set in the IO singleton by the \fC\fBBINDING_NAME()\fP\fP, \fC\fBBINDING_SHORT_DESC()\fP\fP, \fC\fBBINDING_LONG_DESC()\fP\fP, \fC\fBBINDING_EXAMPLE()\fP\fP, \fC\fBBINDING_SEE_ALSO()\fP\fP and \fCPARAM_*\fP() macros in order to actually print a fully-working \&.pyx file that can be compiled\&. The file has several sections:
.PP
.IP "\(bu" 2
Python imports (numpy/pandas/cython/etc\&.)
.IP "\(bu" 2
Cython imports of C++ utility functions and Armadillo functionality
.IP "\(bu" 2
Cython imports of any necessary serializable model types
.IP "\(bu" 2
Definitions of classes for serializable model types
.IP "\(bu" 2
The binding function definition
.IP "\(bu" 2
Documentation: input and output parameters
.IP "\(bu" 2
The call to mlpackMain()
.IP "\(bu" 2
Handling of output functionality
.IP "\(bu" 2
Return of output parameters
.PP
.PP
Any output parameters for Python bindings are returned in a dict containing named elements\&.
.SS "Building the \&.pyx files"
After building the \fCgenerate_pyx_program\fP target, the \fCbuild_pyx_program\fP target is built as a dependency of the \fCpython\fP target\&. This simply takes the generated \&.pyx file and uses Python setuptools to compile this to a Python binding\&.
.SS "Testing the Python bindings"
We cannot do our tests only from the Boost Unit Test Framework in C++ because we need to see that we are able to load parameters properly from Python and return output correctly\&.
.PP
The tests are in \fCsrc/mlpack/bindings/python/tests/\fP and test both the actual bindings and also the auxiliary Python code included in \fCsrc/mlpack/bindings/python/mlpack/\fP\&.
.SH "Adding new binding types"
.PP
Adding a new binding type to mlpack is fairly straightforward once the general structure of the IO singleton and the function map that IO uses is understood\&. For each different language that bindings are desired for, the route to a solution will be particularly different---so it is hard to provide any general guidance for how to make new bindings that will be applicable to each language\&.
.PP
In general, the first thing to handle will be how matrices are passed back and forth between the target language\&. Typically this might mean getting the memory address of an input matrix and wrapping an \fCarma::mat\fP object around that memory address\&. This can be handled in the \fC\fBGetParam()\fP\fP function that is part of the IO singleton function map; see \fCget_param\&.hpp\fP for both the IO and Python bindings for an example (in \fCsrc/mlpack/bindings/cli/\fP and \fCsrc/mlpack/bindings/python/\fP)\&.
.PP
Serialization of models is also a tricky consideration; in some languages you will be able to pass a pointer to the model itself\&. This is generally best---users should not expect to be able to manipulate the model in the target language, but they should expect that they can pass a model back and forth without paying a runtime penalty\&. So, for example, serializing a model using a \fCboost::text_oarchive\fP and then returning the string that represents the model is not acceptable, because that string can be extremely large and the time it takes to decode the model can be very large\&.
.PP
The strategy of generating a binding definition for the target language, like what is done with Python, can be a useful strategy that should be considered\&. If this is the route that is desired, a large amount of CMake boilerplate may be necessary\&. The Python CMake configuration can be referred to as an example, but probably a large amount of adaptation to other languages will be necessary\&.
.PP
Lastly, when adding a new language, be sure to make sure it works with the Markdown documentation generator\&. In order to make this happen, you will need to modify all of the \fCadd_markdown_docs()\fP calls in the different \fCCMakeLists\&.txt\fP files to contain the name of the language you have written a binding for\&. You will also need to modify every function in \fCsrc/mlpack/bindings/markdown/print_doc_functions_impl\&.hpp\fP to correctly call out to the corresponding function for the language that you have written bindings for\&. 
